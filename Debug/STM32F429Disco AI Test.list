
STM32F429Disco AI Test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a904  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00136db8  0800aab8  0800aab8  0001aab8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  08141870  08141870  00151870  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  08141878  08141878  00151878  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .fini_array   00000004  0814187c  0814187c  0015187c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .data         00000678  20000000  08141880  00160000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .ccmram       00000000  10000000  10000000  00160678  2**0
                  CONTENTS
  8 .bss          000291b8  20000678  20000678  00160678  2**2
                  ALLOC
  9 ._user_heap_stack 00000c00  20029830  20029830  00160678  2**0
                  ALLOC
 10 .ARM.attributes 00000034  00000000  00000000  00160678  2**0
                  CONTENTS, READONLY
 11 .debug_info   0002908e  00000000  00000000  001606ac  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_abbrev 00005e7a  00000000  00000000  0018973a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_loc    00010356  00000000  00000000  0018f5b4  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001608  00000000  00000000  0019f910  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001c10  00000000  00000000  001a0f18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_line   0000cc2b  00000000  00000000  001a2b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_str    00008131  00000000  00000000  001af753  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .comment      00002e94  00000000  00000000  001b7884  2**0
                  CONTENTS, READONLY
 19 .iar.rtmodel  00000218  00000000  00000000  001ba718  2**0
                  CONTENTS, READONLY
 20 .iar_vfe_header 0000001c  00000000  00000000  001ba930  2**2
                  CONTENTS, READONLY
 21 .debug_frame  00006cf8  00000000  00000000  001ba94c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000678 	.word	0x20000678
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800aa9c 	.word	0x0800aa9c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000067c 	.word	0x2000067c
 80001ec:	0800aa9c 	.word	0x0800aa9c

080001f0 <ai_array_get_byte_size>:
 80001f0:	b909      	cbnz	r1, 80001f6 <ai_array_get_byte_size+0x6>
 80001f2:	2000      	movs	r0, #0
 80001f4:	4770      	bx	lr
 80001f6:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80001fa:	f3c0 3282 	ubfx	r2, r0, #14, #3
 80001fe:	18d3      	adds	r3, r2, r3
 8000200:	4359      	muls	r1, r3
 8000202:	1dc9      	adds	r1, r1, #7
 8000204:	08c9      	lsrs	r1, r1, #3
 8000206:	0d42      	lsrs	r2, r0, #21
 8000208:	00c9      	lsls	r1, r1, #3
 800020a:	f002 0203 	and.w	r2, r2, #3
 800020e:	0c43      	lsrs	r3, r0, #17
 8000210:	40d1      	lsrs	r1, r2
 8000212:	f003 030f 	and.w	r3, r3, #15
 8000216:	2b04      	cmp	r3, #4
 8000218:	d00b      	beq.n	8000232 <ai_array_get_byte_size+0x42>
 800021a:	2b08      	cmp	r3, #8
 800021c:	bf01      	itttt	eq
 800021e:	f3c0 12c6 	ubfxeq	r2, r0, #7, #7
 8000222:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8000226:	1882      	addeq	r2, r0, r2
 8000228:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 800022c:	1dc9      	adds	r1, r1, #7
 800022e:	08c8      	lsrs	r0, r1, #3
 8000230:	4770      	bx	lr
 8000232:	f3c0 12c6 	ubfx	r2, r0, #7, #7
 8000236:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800023a:	1882      	adds	r2, r0, r2
 800023c:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8000240:	1dc9      	adds	r1, r1, #7
 8000242:	08c8      	lsrs	r0, r1, #3
 8000244:	4770      	bx	lr

08000246 <ai_mem_copy_buffer>:
 8000246:	b510      	push	{r4, lr}
 8000248:	4604      	mov	r4, r0
 800024a:	f008 fa56 	bl	80086fa <__aeabi_memcpy>
 800024e:	4620      	mov	r0, r4
 8000250:	bd10      	pop	{r4, pc}

08000252 <ai_platform_runtime_get_revision>:
 8000252:	f8df 0414 	ldr.w	r0, [pc, #1044]	; 8000668 <.text_19>
 8000256:	6801      	ldr	r1, [r0, #0]
 8000258:	0849      	lsrs	r1, r1, #1
 800025a:	0049      	lsls	r1, r1, #1
 800025c:	6001      	str	r1, [r0, #0]
 800025e:	2001      	movs	r0, #1
 8000260:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 800066c <.text_20>
 8000264:	6088      	str	r0, [r1, #8]
 8000266:	6888      	ldr	r0, [r1, #8]
 8000268:	2800      	cmp	r0, #0
 800026a:	d1fc      	bne.n	8000266 <ai_platform_runtime_get_revision+0x14>
 800026c:	f8df 2400 	ldr.w	r2, [pc, #1024]	; 8000670 <.text_21>
 8000270:	600a      	str	r2, [r1, #0]
 8000272:	6808      	ldr	r0, [r1, #0]
 8000274:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000674 <.text_22>
 8000278:	4288      	cmp	r0, r1
 800027a:	d000      	beq.n	800027e <ai_platform_runtime_get_revision+0x2c>
 800027c:	e7fe      	b.n	800027c <ai_platform_runtime_get_revision+0x2a>
 800027e:	a0a1      	add	r0, pc, #644	; (adr r0, 8000504 <.text_17>)
 8000280:	4770      	bx	lr

08000282 <ai_platform_runtime_get_version>:
 8000282:	f8df 03e4 	ldr.w	r0, [pc, #996]	; 8000668 <.text_19>
 8000286:	6801      	ldr	r1, [r0, #0]
 8000288:	0849      	lsrs	r1, r1, #1
 800028a:	0049      	lsls	r1, r1, #1
 800028c:	6001      	str	r1, [r0, #0]
 800028e:	2001      	movs	r0, #1
 8000290:	f8df 13d8 	ldr.w	r1, [pc, #984]	; 800066c <.text_20>
 8000294:	6088      	str	r0, [r1, #8]
 8000296:	6888      	ldr	r0, [r1, #8]
 8000298:	2800      	cmp	r0, #0
 800029a:	d1fc      	bne.n	8000296 <ai_platform_runtime_get_version+0x14>
 800029c:	f8df 23d0 	ldr.w	r2, [pc, #976]	; 8000670 <.text_21>
 80002a0:	600a      	str	r2, [r1, #0]
 80002a2:	6808      	ldr	r0, [r1, #0]
 80002a4:	f8df 13cc 	ldr.w	r1, [pc, #972]	; 8000674 <.text_22>
 80002a8:	4288      	cmp	r0, r1
 80002aa:	d000      	beq.n	80002ae <ai_platform_runtime_get_version+0x2c>
 80002ac:	e7fe      	b.n	80002ac <ai_platform_runtime_get_version+0x2a>
 80002ae:	f20f 32dc 	addw	r2, pc, #988	; 0x3dc
 80002b2:	6810      	ldr	r0, [r2, #0]
 80002b4:	4770      	bx	lr

080002b6 <ai_platform_api_get_version>:
 80002b6:	f8df 03b0 	ldr.w	r0, [pc, #944]	; 8000668 <.text_19>
 80002ba:	6801      	ldr	r1, [r0, #0]
 80002bc:	0849      	lsrs	r1, r1, #1
 80002be:	0049      	lsls	r1, r1, #1
 80002c0:	6001      	str	r1, [r0, #0]
 80002c2:	2001      	movs	r0, #1
 80002c4:	f8df 13a4 	ldr.w	r1, [pc, #932]	; 800066c <.text_20>
 80002c8:	6088      	str	r0, [r1, #8]
 80002ca:	6888      	ldr	r0, [r1, #8]
 80002cc:	2800      	cmp	r0, #0
 80002ce:	d1fc      	bne.n	80002ca <ai_platform_api_get_version+0x14>
 80002d0:	f8df 239c 	ldr.w	r2, [pc, #924]	; 8000670 <.text_21>
 80002d4:	600a      	str	r2, [r1, #0]
 80002d6:	6808      	ldr	r0, [r1, #0]
 80002d8:	f8df 1398 	ldr.w	r1, [pc, #920]	; 8000674 <.text_22>
 80002dc:	4288      	cmp	r0, r1
 80002de:	d000      	beq.n	80002e2 <ai_platform_api_get_version+0x2c>
 80002e0:	e7fe      	b.n	80002e0 <ai_platform_api_get_version+0x2a>
 80002e2:	f20f 32ac 	addw	r2, pc, #940	; 0x3ac
 80002e6:	6810      	ldr	r0, [r2, #0]
 80002e8:	4770      	bx	lr

080002ea <ai_platform_interface_api_get_version>:
 80002ea:	f8df 037c 	ldr.w	r0, [pc, #892]	; 8000668 <.text_19>
 80002ee:	6801      	ldr	r1, [r0, #0]
 80002f0:	0849      	lsrs	r1, r1, #1
 80002f2:	0049      	lsls	r1, r1, #1
 80002f4:	6001      	str	r1, [r0, #0]
 80002f6:	2001      	movs	r0, #1
 80002f8:	f8df 1370 	ldr.w	r1, [pc, #880]	; 800066c <.text_20>
 80002fc:	6088      	str	r0, [r1, #8]
 80002fe:	6888      	ldr	r0, [r1, #8]
 8000300:	2800      	cmp	r0, #0
 8000302:	d1fc      	bne.n	80002fe <ai_platform_interface_api_get_version+0x14>
 8000304:	f8df 2368 	ldr.w	r2, [pc, #872]	; 8000670 <.text_21>
 8000308:	600a      	str	r2, [r1, #0]
 800030a:	6808      	ldr	r0, [r1, #0]
 800030c:	f8df 1364 	ldr.w	r1, [pc, #868]	; 8000674 <.text_22>
 8000310:	4288      	cmp	r0, r1
 8000312:	d000      	beq.n	8000316 <ai_platform_interface_api_get_version+0x2c>
 8000314:	e7fe      	b.n	8000314 <ai_platform_interface_api_get_version+0x2a>
 8000316:	f20f 327c 	addw	r2, pc, #892	; 0x37c
 800031a:	6810      	ldr	r0, [r2, #0]
 800031c:	4770      	bx	lr

0800031e <ai_platform_context_acquire>:
 800031e:	b120      	cbz	r0, 800032a <ai_platform_context_acquire+0xc>
 8000320:	6801      	ldr	r1, [r0, #0]
 8000322:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000678 <.text_23>
 8000326:	4291      	cmp	r1, r2
 8000328:	d000      	beq.n	800032c <ai_platform_context_acquire+0xe>
 800032a:	2000      	movs	r0, #0
 800032c:	f8df 1338 	ldr.w	r1, [pc, #824]	; 8000668 <.text_19>
 8000330:	680a      	ldr	r2, [r1, #0]
 8000332:	0852      	lsrs	r2, r2, #1
 8000334:	0052      	lsls	r2, r2, #1
 8000336:	600a      	str	r2, [r1, #0]
 8000338:	2101      	movs	r1, #1
 800033a:	f8df 2330 	ldr.w	r2, [pc, #816]	; 800066c <.text_20>
 800033e:	6091      	str	r1, [r2, #8]
 8000340:	6891      	ldr	r1, [r2, #8]
 8000342:	2900      	cmp	r1, #0
 8000344:	d1fc      	bne.n	8000340 <ai_platform_context_acquire+0x22>
 8000346:	f8df 3328 	ldr.w	r3, [pc, #808]	; 8000670 <.text_21>
 800034a:	6013      	str	r3, [r2, #0]
 800034c:	6811      	ldr	r1, [r2, #0]
 800034e:	f8df 2324 	ldr.w	r2, [pc, #804]	; 8000674 <.text_22>
 8000352:	4291      	cmp	r1, r2
 8000354:	d000      	beq.n	8000358 <ai_platform_context_acquire+0x3a>
 8000356:	e7fe      	b.n	8000356 <ai_platform_context_acquire+0x38>
 8000358:	4770      	bx	lr

0800035a <ai_platform_context_release>:
 800035a:	f8df 131c 	ldr.w	r1, [pc, #796]	; 8000678 <.text_23>
 800035e:	6001      	str	r1, [r0, #0]
 8000360:	4770      	bx	lr

08000362 <ai_copy_buffer_fake_src>:
 8000362:	4608      	mov	r0, r1
 8000364:	4770      	bx	lr

08000366 <ai_copy_buffer_fake_dst>:
 8000366:	4770      	bx	lr

08000368 <ai_platform_network_get_error>:
 8000368:	b120      	cbz	r0, 8000374 <ai_platform_network_get_error+0xc>
 800036a:	6801      	ldr	r1, [r0, #0]
 800036c:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000678 <.text_23>
 8000370:	4291      	cmp	r1, r2
 8000372:	d000      	beq.n	8000376 <ai_platform_network_get_error+0xe>
 8000374:	2000      	movs	r0, #0
 8000376:	49bc      	ldr	r1, [pc, #752]	; (8000668 <.text_19>)
 8000378:	680a      	ldr	r2, [r1, #0]
 800037a:	0852      	lsrs	r2, r2, #1
 800037c:	0052      	lsls	r2, r2, #1
 800037e:	600a      	str	r2, [r1, #0]
 8000380:	2101      	movs	r1, #1
 8000382:	4aba      	ldr	r2, [pc, #744]	; (800066c <.text_20>)
 8000384:	6091      	str	r1, [r2, #8]
 8000386:	6891      	ldr	r1, [r2, #8]
 8000388:	2900      	cmp	r1, #0
 800038a:	d1fc      	bne.n	8000386 <ai_platform_network_get_error+0x1e>
 800038c:	4bb8      	ldr	r3, [pc, #736]	; (8000670 <.text_21>)
 800038e:	6013      	str	r3, [r2, #0]
 8000390:	6811      	ldr	r1, [r2, #0]
 8000392:	4ab8      	ldr	r2, [pc, #736]	; (8000674 <.text_22>)
 8000394:	4291      	cmp	r1, r2
 8000396:	d000      	beq.n	800039a <ai_platform_network_get_error+0x32>
 8000398:	e7fe      	b.n	8000398 <ai_platform_network_get_error+0x30>
 800039a:	2800      	cmp	r0, #0
 800039c:	bf1c      	itt	ne
 800039e:	300c      	addne	r0, #12
 80003a0:	f000 b98a 	bne.w	80006b8 <core_get_error>
 80003a4:	f20f 3000 	addw	r0, pc, #768	; 0x300
 80003a8:	6800      	ldr	r0, [r0, #0]
 80003aa:	4770      	bx	lr

080003ac <ai_platform_network_set_error>:
 80003ac:	2800      	cmp	r0, #0
 80003ae:	bf1c      	itt	ne
 80003b0:	300c      	addne	r0, #12
 80003b2:	f000 b986 	bne.w	80006c2 <core_set_error>
 80003b6:	4770      	bx	lr

080003b8 <ai_platform_network_create>:
 80003b8:	b570      	push	{r4, r5, r6, lr}
 80003ba:	9d04      	ldr	r5, [sp, #16]
 80003bc:	4604      	mov	r4, r0
 80003be:	9805      	ldr	r0, [sp, #20]
 80003c0:	b2db      	uxtb	r3, r3
 80003c2:	042d      	lsls	r5, r5, #16
 80003c4:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80003c8:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80003cc:	f20f 20dc 	addw	r0, pc, #732	; 0x2dc
 80003d0:	6806      	ldr	r6, [r0, #0]
 80003d2:	48a5      	ldr	r0, [pc, #660]	; (8000668 <.text_19>)
 80003d4:	6801      	ldr	r1, [r0, #0]
 80003d6:	0849      	lsrs	r1, r1, #1
 80003d8:	0049      	lsls	r1, r1, #1
 80003da:	6001      	str	r1, [r0, #0]
 80003dc:	2001      	movs	r0, #1
 80003de:	49a3      	ldr	r1, [pc, #652]	; (800066c <.text_20>)
 80003e0:	6088      	str	r0, [r1, #8]
 80003e2:	6888      	ldr	r0, [r1, #8]
 80003e4:	2800      	cmp	r0, #0
 80003e6:	d1fc      	bne.n	80003e2 <ai_platform_network_create+0x2a>
 80003e8:	4ba1      	ldr	r3, [pc, #644]	; (8000670 <.text_21>)
 80003ea:	600b      	str	r3, [r1, #0]
 80003ec:	6808      	ldr	r0, [r1, #0]
 80003ee:	49a1      	ldr	r1, [pc, #644]	; (8000674 <.text_22>)
 80003f0:	4288      	cmp	r0, r1
 80003f2:	d000      	beq.n	80003f6 <ai_platform_network_create+0x3e>
 80003f4:	e7fe      	b.n	80003f4 <ai_platform_network_create+0x3c>
 80003f6:	b91c      	cbnz	r4, 8000400 <ai_platform_network_create+0x48>
 80003f8:	f20f 20b4 	addw	r0, pc, #692	; 0x2b4
 80003fc:	6800      	ldr	r0, [r0, #0]
 80003fe:	bd70      	pop	{r4, r5, r6, pc}
 8000400:	499d      	ldr	r1, [pc, #628]	; (8000678 <.text_23>)
 8000402:	6011      	str	r1, [r2, #0]
 8000404:	6022      	str	r2, [r4, #0]
 8000406:	f000 f955 	bl	80006b4 <core_init>
 800040a:	b910      	cbnz	r0, 8000412 <ai_platform_network_create+0x5a>
 800040c:	f20f 2088 	addw	r0, pc, #648	; 0x288
 8000410:	e00b      	b.n	800042a <ai_platform_network_create+0x72>
 8000412:	499a      	ldr	r1, [pc, #616]	; (800067c <.text_24>)
 8000414:	428d      	cmp	r5, r1
 8000416:	bf28      	it	cs
 8000418:	f20f 2080 	addwcs	r0, pc, #640	; 0x280
 800041c:	d205      	bcs.n	800042a <ai_platform_network_create+0x72>
 800041e:	f20f 2080 	addw	r0, pc, #640	; 0x280
 8000422:	f000 f963 	bl	80006ec <ai_check_custom_types>
 8000426:	b918      	cbnz	r0, 8000430 <ai_platform_network_create+0x78>
 8000428:	a09e      	add	r0, pc, #632	; (adr r0, 80006a4 <.text_34>)
 800042a:	6806      	ldr	r6, [r0, #0]
 800042c:	2100      	movs	r1, #0
 800042e:	6021      	str	r1, [r4, #0]
 8000430:	4630      	mov	r0, r6
 8000432:	bd70      	pop	{r4, r5, r6, pc}

08000434 <ai_platform_network_destroy>:
 8000434:	b128      	cbz	r0, 8000442 <ai_platform_network_destroy+0xe>
 8000436:	6801      	ldr	r1, [r0, #0]
 8000438:	4a8f      	ldr	r2, [pc, #572]	; (8000678 <.text_23>)
 800043a:	4291      	cmp	r1, r2
 800043c:	bf08      	it	eq
 800043e:	4602      	moveq	r2, r0
 8000440:	d000      	beq.n	8000444 <ai_platform_network_destroy+0x10>
 8000442:	2200      	movs	r2, #0
 8000444:	4988      	ldr	r1, [pc, #544]	; (8000668 <.text_19>)
 8000446:	680b      	ldr	r3, [r1, #0]
 8000448:	085b      	lsrs	r3, r3, #1
 800044a:	005b      	lsls	r3, r3, #1
 800044c:	600b      	str	r3, [r1, #0]
 800044e:	2101      	movs	r1, #1
 8000450:	4b86      	ldr	r3, [pc, #536]	; (800066c <.text_20>)
 8000452:	6099      	str	r1, [r3, #8]
 8000454:	6899      	ldr	r1, [r3, #8]
 8000456:	2900      	cmp	r1, #0
 8000458:	d1fc      	bne.n	8000454 <ai_platform_network_destroy+0x20>
 800045a:	f8df c214 	ldr.w	ip, [pc, #532]	; 8000670 <.text_21>
 800045e:	f8c3 c000 	str.w	ip, [r3]
 8000462:	6819      	ldr	r1, [r3, #0]
 8000464:	4b83      	ldr	r3, [pc, #524]	; (8000674 <.text_22>)
 8000466:	4299      	cmp	r1, r3
 8000468:	d000      	beq.n	800046c <ai_platform_network_destroy+0x38>
 800046a:	e7fe      	b.n	800046a <ai_platform_network_destroy+0x36>
 800046c:	b102      	cbz	r2, 8000470 <ai_platform_network_destroy+0x3c>
 800046e:	2000      	movs	r0, #0
 8000470:	4770      	bx	lr

08000472 <ai_platform_network_init>:
 8000472:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000476:	b081      	sub	sp, #4
 8000478:	460a      	mov	r2, r1
 800047a:	b118      	cbz	r0, 8000484 <ai_platform_network_init+0x12>
 800047c:	6801      	ldr	r1, [r0, #0]
 800047e:	4b7e      	ldr	r3, [pc, #504]	; (8000678 <.text_23>)
 8000480:	4299      	cmp	r1, r3
 8000482:	d000      	beq.n	8000486 <ai_platform_network_init+0x14>
 8000484:	2000      	movs	r0, #0
 8000486:	4978      	ldr	r1, [pc, #480]	; (8000668 <.text_19>)
 8000488:	680b      	ldr	r3, [r1, #0]
 800048a:	085b      	lsrs	r3, r3, #1
 800048c:	005b      	lsls	r3, r3, #1
 800048e:	600b      	str	r3, [r1, #0]
 8000490:	2101      	movs	r1, #1
 8000492:	4b76      	ldr	r3, [pc, #472]	; (800066c <.text_20>)
 8000494:	6099      	str	r1, [r3, #8]
 8000496:	6899      	ldr	r1, [r3, #8]
 8000498:	2900      	cmp	r1, #0
 800049a:	d1fc      	bne.n	8000496 <ai_platform_network_init+0x24>
 800049c:	4c74      	ldr	r4, [pc, #464]	; (8000670 <.text_21>)
 800049e:	601c      	str	r4, [r3, #0]
 80004a0:	6819      	ldr	r1, [r3, #0]
 80004a2:	4b74      	ldr	r3, [pc, #464]	; (8000674 <.text_22>)
 80004a4:	4299      	cmp	r1, r3
 80004a6:	d000      	beq.n	80004aa <ai_platform_network_init+0x38>
 80004a8:	e7fe      	b.n	80004a8 <ai_platform_network_init+0x36>
 80004aa:	b340      	cbz	r0, 80004fe <ai_platform_network_init+0x8c>
 80004ac:	b90a      	cbnz	r2, 80004b2 <ai_platform_network_init+0x40>
 80004ae:	2211      	movs	r2, #17
 80004b0:	e006      	b.n	80004c0 <ai_platform_network_init+0x4e>
 80004b2:	69d1      	ldr	r1, [r2, #28]
 80004b4:	b909      	cbnz	r1, 80004ba <ai_platform_network_init+0x48>
 80004b6:	2213      	movs	r2, #19
 80004b8:	e002      	b.n	80004c0 <ai_platform_network_init+0x4e>
 80004ba:	68d1      	ldr	r1, [r2, #12]
 80004bc:	b941      	cbnz	r1, 80004d0 <ai_platform_network_init+0x5e>
 80004be:	2212      	movs	r2, #18
 80004c0:	2110      	movs	r1, #16
 80004c2:	300c      	adds	r0, #12
 80004c4:	f000 f8fd 	bl	80006c2 <core_set_error>
 80004c8:	2000      	movs	r0, #0
 80004ca:	b001      	add	sp, #4
 80004cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80004d0:	ca78      	ldmia	r2!, {r3, r4, r5, r6}
 80004d2:	f100 0114 	add.w	r1, r0, #20
 80004d6:	f100 0724 	add.w	r7, r0, #36	; 0x24
 80004da:	e881 0078 	stmia.w	r1, {r3, r4, r5, r6}
 80004de:	e892 5300 	ldmia.w	r2, {r8, r9, ip, lr}
 80004e2:	e887 5300 	stmia.w	r7, {r8, r9, ip, lr}
 80004e6:	2103      	movs	r1, #3
 80004e8:	6081      	str	r1, [r0, #8]
 80004ea:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80004ec:	b13a      	cbz	r2, 80004fe <ai_platform_network_init+0x8c>
 80004ee:	6891      	ldr	r1, [r2, #8]
 80004f0:	6050      	str	r0, [r2, #4]
 80004f2:	428a      	cmp	r2, r1
 80004f4:	bf18      	it	ne
 80004f6:	2900      	cmpne	r1, #0
 80004f8:	bf18      	it	ne
 80004fa:	460a      	movne	r2, r1
 80004fc:	d1f7      	bne.n	80004ee <ai_platform_network_init+0x7c>
 80004fe:	b001      	add	sp, #4
 8000500:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08000504 <.text_17>:
 8000504:	00000000 	.word	0x00000000

08000508 <ai_platform_network_process>:
 8000508:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800050c:	b083      	sub	sp, #12
 800050e:	b128      	cbz	r0, 800051c <ai_platform_network_process+0x14>
 8000510:	6803      	ldr	r3, [r0, #0]
 8000512:	4c59      	ldr	r4, [pc, #356]	; (8000678 <.text_23>)
 8000514:	42a3      	cmp	r3, r4
 8000516:	bf08      	it	eq
 8000518:	4605      	moveq	r5, r0
 800051a:	d000      	beq.n	800051e <ai_platform_network_process+0x16>
 800051c:	2500      	movs	r5, #0
 800051e:	4852      	ldr	r0, [pc, #328]	; (8000668 <.text_19>)
 8000520:	6803      	ldr	r3, [r0, #0]
 8000522:	085b      	lsrs	r3, r3, #1
 8000524:	005b      	lsls	r3, r3, #1
 8000526:	6003      	str	r3, [r0, #0]
 8000528:	2001      	movs	r0, #1
 800052a:	4b50      	ldr	r3, [pc, #320]	; (800066c <.text_20>)
 800052c:	6098      	str	r0, [r3, #8]
 800052e:	6898      	ldr	r0, [r3, #8]
 8000530:	2800      	cmp	r0, #0
 8000532:	d1fc      	bne.n	800052e <ai_platform_network_process+0x26>
 8000534:	4c4e      	ldr	r4, [pc, #312]	; (8000670 <.text_21>)
 8000536:	601c      	str	r4, [r3, #0]
 8000538:	6818      	ldr	r0, [r3, #0]
 800053a:	4b4e      	ldr	r3, [pc, #312]	; (8000674 <.text_22>)
 800053c:	4298      	cmp	r0, r3
 800053e:	d000      	beq.n	8000542 <ai_platform_network_process+0x3a>
 8000540:	e7fe      	b.n	8000540 <ai_platform_network_process+0x38>
 8000542:	2d00      	cmp	r5, #0
 8000544:	d048      	beq.n	80005d8 <ai_platform_network_process+0xd0>
 8000546:	68ab      	ldr	r3, [r5, #8]
 8000548:	f003 0003 	and.w	r0, r3, #3
 800054c:	2803      	cmp	r0, #3
 800054e:	d002      	beq.n	8000556 <ai_platform_network_process+0x4e>
 8000550:	2230      	movs	r2, #48	; 0x30
 8000552:	2111      	movs	r1, #17
 8000554:	e03c      	b.n	80005d0 <ai_platform_network_process+0xc8>
 8000556:	000f      	movs	r7, r1
 8000558:	bf1c      	itt	ne
 800055a:	68f8      	ldrne	r0, [r7, #12]
 800055c:	2800      	cmpne	r0, #0
 800055e:	d035      	beq.n	80005cc <ai_platform_network_process+0xc4>
 8000560:	8878      	ldrh	r0, [r7, #2]
 8000562:	b908      	cbnz	r0, 8000568 <ai_platform_network_process+0x60>
 8000564:	2221      	movs	r2, #33	; 0x21
 8000566:	e032      	b.n	80005ce <ai_platform_network_process+0xc6>
 8000568:	0014      	movs	r4, r2
 800056a:	d00b      	beq.n	8000584 <ai_platform_network_process+0x7c>
 800056c:	68e1      	ldr	r1, [r4, #12]
 800056e:	b351      	cbz	r1, 80005c6 <ai_platform_network_process+0xbe>
 8000570:	8861      	ldrh	r1, [r4, #2]
 8000572:	b911      	cbnz	r1, 800057a <ai_platform_network_process+0x72>
 8000574:	2221      	movs	r2, #33	; 0x21
 8000576:	2113      	movs	r1, #19
 8000578:	e02a      	b.n	80005d0 <ai_platform_network_process+0xc8>
 800057a:	4288      	cmp	r0, r1
 800057c:	d002      	beq.n	8000584 <ai_platform_network_process+0x7c>
 800057e:	2221      	movs	r2, #33	; 0x21
 8000580:	2102      	movs	r1, #2
 8000582:	e025      	b.n	80005d0 <ai_platform_network_process+0xc8>
 8000584:	05d8      	lsls	r0, r3, #23
 8000586:	bf4c      	ite	mi
 8000588:	2002      	movmi	r0, #2
 800058a:	2000      	movpl	r0, #0
 800058c:	0a59      	lsrs	r1, r3, #9
 800058e:	f001 0101 	and.w	r1, r1, #1
 8000592:	ea41 0800 	orr.w	r8, r1, r0
 8000596:	6b68      	ldr	r0, [r5, #52]	; 0x34
 8000598:	6ba9      	ldr	r1, [r5, #56]	; 0x38
 800059a:	6806      	ldr	r6, [r0, #0]
 800059c:	6808      	ldr	r0, [r1, #0]
 800059e:	9000      	str	r0, [sp, #0]
 80005a0:	6871      	ldr	r1, [r6, #4]
 80005a2:	6830      	ldr	r0, [r6, #0]
 80005a4:	f7ff fe24 	bl	80001f0 <ai_array_get_byte_size>
 80005a8:	9001      	str	r0, [sp, #4]
 80005aa:	9800      	ldr	r0, [sp, #0]
 80005ac:	6841      	ldr	r1, [r0, #4]
 80005ae:	6800      	ldr	r0, [r0, #0]
 80005b0:	f7ff fe1e 	bl	80001f0 <ai_array_get_byte_size>
 80005b4:	68f9      	ldr	r1, [r7, #12]
 80005b6:	2c00      	cmp	r4, #0
 80005b8:	4602      	mov	r2, r0
 80005ba:	bf14      	ite	ne
 80005bc:	f8d4 b00c 	ldrne.w	fp, [r4, #12]
 80005c0:	f04f 0b00 	moveq.w	fp, #0
 80005c4:	e00c      	b.n	80005e0 <ai_platform_network_process+0xd8>
 80005c6:	2217      	movs	r2, #23
 80005c8:	2113      	movs	r1, #19
 80005ca:	e001      	b.n	80005d0 <ai_platform_network_process+0xc8>
 80005cc:	2217      	movs	r2, #23
 80005ce:	2112      	movs	r1, #18
 80005d0:	f105 000c 	add.w	r0, r5, #12
 80005d4:	f000 f875 	bl	80006c2 <core_set_error>
 80005d8:	2000      	movs	r0, #0
 80005da:	b003      	add	sp, #12
 80005dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80005e0:	f018 0002 	ands.w	r0, r8, #2
 80005e4:	bf14      	ite	ne
 80005e6:	f8df 9098 	ldrne.w	r9, [pc, #152]	; 8000680 <.text_25>
 80005ea:	f8df 9098 	ldreq.w	r9, [pc, #152]	; 8000684 <.text_26>
 80005ee:	ea5f 73c8 	movs.w	r3, r8, lsl #31
 80005f2:	bf4c      	ite	mi
 80005f4:	f8df a088 	ldrmi.w	sl, [pc, #136]	; 8000680 <.text_25>
 80005f8:	f8df a08c 	ldrpl.w	sl, [pc, #140]	; 8000688 <.text_27>
 80005fc:	887b      	ldrh	r3, [r7, #2]
 80005fe:	822b      	strh	r3, [r5, #16]
 8000600:	2700      	movs	r7, #0
 8000602:	826f      	strh	r7, [r5, #18]
 8000604:	b908      	cbnz	r0, 800060a <ai_platform_network_process+0x102>
 8000606:	60b1      	str	r1, [r6, #8]
 8000608:	60f1      	str	r1, [r6, #12]
 800060a:	b144      	cbz	r4, 800061e <ai_platform_network_process+0x116>
 800060c:	ea5f 70c8 	movs.w	r0, r8, lsl #31
 8000610:	d405      	bmi.n	800061e <ai_platform_network_process+0x116>
 8000612:	9b00      	ldr	r3, [sp, #0]
 8000614:	f8c3 b008 	str.w	fp, [r3, #8]
 8000618:	9800      	ldr	r0, [sp, #0]
 800061a:	f8c0 b00c 	str.w	fp, [r0, #12]
 800061e:	8a68      	ldrh	r0, [r5, #18]
 8000620:	8a2b      	ldrh	r3, [r5, #16]
 8000622:	4298      	cmp	r0, r3
 8000624:	d21c      	bcs.n	8000660 <ai_platform_network_process+0x158>
 8000626:	462c      	mov	r4, r5
 8000628:	4635      	mov	r5, r6
 800062a:	9e01      	ldr	r6, [sp, #4]
 800062c:	4617      	mov	r7, r2
 800062e:	4688      	mov	r8, r1
 8000630:	68a8      	ldr	r0, [r5, #8]
 8000632:	4632      	mov	r2, r6
 8000634:	4641      	mov	r1, r8
 8000636:	47c8      	blx	r9
 8000638:	60a8      	str	r0, [r5, #8]
 800063a:	44b0      	add	r8, r6
 800063c:	4620      	mov	r0, r4
 800063e:	f000 f8d7 	bl	80007f0 <ai_layers_forward_all>
 8000642:	9800      	ldr	r0, [sp, #0]
 8000644:	6881      	ldr	r1, [r0, #8]
 8000646:	463a      	mov	r2, r7
 8000648:	4658      	mov	r0, fp
 800064a:	47d0      	blx	sl
 800064c:	eb00 0b07 	add.w	fp, r0, r7
 8000650:	8a60      	ldrh	r0, [r4, #18]
 8000652:	8a21      	ldrh	r1, [r4, #16]
 8000654:	1c40      	adds	r0, r0, #1
 8000656:	8260      	strh	r0, [r4, #18]
 8000658:	b280      	uxth	r0, r0
 800065a:	4288      	cmp	r0, r1
 800065c:	d3e8      	bcc.n	8000630 <ai_platform_network_process+0x128>
 800065e:	4625      	mov	r5, r4
 8000660:	8a68      	ldrh	r0, [r5, #18]
 8000662:	b003      	add	sp, #12
 8000664:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000668 <.text_19>:
 8000668:	e0002000 	.word	0xe0002000

0800066c <.text_20>:
 800066c:	40023000 	.word	0x40023000

08000670 <.text_21>:
 8000670:	f407a5c2 	.word	0xf407a5c2

08000674 <.text_22>:
 8000674:	b5e8b5cd 	.word	0xb5e8b5cd

08000678 <.text_23>:
 8000678:	a1c00100 	.word	0xa1c00100

0800067c <.text_24>:
 800067c:	01010001 	.word	0x01010001

08000680 <.text_25>:
 8000680:	08000247 	.word	0x08000247

08000684 <.text_26>:
 8000684:	08000363 	.word	0x08000363

08000688 <.text_27>:
 8000688:	08000367 	.word	0x08000367

0800068c <.text_28>:
 800068c:	00000303 	.word	0x00000303

08000690 <.text_29>:
 8000690:	00000001 	.word	0x00000001

08000694 <.text_30>:
 8000694:	00000101 	.word	0x00000101

08000698 <.text_31>:
 8000698:	00001030 	.word	0x00001030

0800069c <.text_32>:
 800069c:	00001001 	.word	0x00001001

080006a0 <_platform_network_sanity_check{8}::signatures>:
 80006a0:	84048403                                ....

080006a4 <.text_34>:
 80006a4:	00001002 	.word	0x00001002

080006a8 <.text_35>:
 80006a8:	00001010 	.word	0x00001010

080006ac <.text_36>:
 80006ac:	00000000 	.word	0x00000000

080006b0 <.text_37>:
 80006b0:	00001010 	.word	0x00001010

080006b4 <core_init>:
 80006b4:	2001      	movs	r0, #1
 80006b6:	4770      	bx	lr

080006b8 <core_get_error>:
 80006b8:	4601      	mov	r1, r0
 80006ba:	2200      	movs	r2, #0
 80006bc:	6808      	ldr	r0, [r1, #0]
 80006be:	600a      	str	r2, [r1, #0]
 80006c0:	4770      	bx	lr

080006c2 <core_set_error>:
 80006c2:	7803      	ldrb	r3, [r0, #0]
 80006c4:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 80006c8:	d104      	bne.n	80006d4 <core_set_error+0x12>
 80006ca:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 80006ce:	6001      	str	r1, [r0, #0]
 80006d0:	2001      	movs	r0, #1
 80006d2:	4770      	bx	lr
 80006d4:	2000      	movs	r0, #0
 80006d6:	4770      	bx	lr

080006d8 <ai_layers_forward_layer>:
 80006d8:	b510      	push	{r4, lr}
 80006da:	4604      	mov	r4, r0
 80006dc:	68e1      	ldr	r1, [r4, #12]
 80006de:	4788      	blx	r1
 80006e0:	68a0      	ldr	r0, [r4, #8]
 80006e2:	42a0      	cmp	r0, r4
 80006e4:	bf08      	it	eq
 80006e6:	2000      	moveq	r0, #0
 80006e8:	bd10      	pop	{r4, pc}
	...

080006ec <ai_check_custom_types>:
 80006ec:	b500      	push	{lr}
 80006ee:	b081      	sub	sp, #4
 80006f0:	b160      	cbz	r0, 800070c <ai_check_custom_types+0x20>
 80006f2:	7801      	ldrb	r1, [r0, #0]
 80006f4:	2903      	cmp	r1, #3
 80006f6:	d109      	bne.n	800070c <ai_check_custom_types+0x20>
 80006f8:	f05f 0204 	movs.w	r2, #4
 80006fc:	a163      	add	r1, pc, #396	; (adr r1, 800088c <ai_check_custom_types::ref_signatures>)
 80006fe:	f008 f829 	bl	8008754 <memcmp>
 8000702:	1e40      	subs	r0, r0, #1
 8000704:	4180      	sbcs	r0, r0
 8000706:	0fc0      	lsrs	r0, r0, #31
 8000708:	b001      	add	sp, #4
 800070a:	bd00      	pop	{pc}
 800070c:	2000      	movs	r0, #0
 800070e:	b001      	add	sp, #4
 8000710:	bd00      	pop	{pc}
	...

08000714 <ai_layer_type_name>:
 8000714:	f242 7211 	movw	r2, #10001	; 0x2711
 8000718:	1a81      	subs	r1, r0, r2
 800071a:	2901      	cmp	r1, #1
 800071c:	bf84      	itt	hi
 800071e:	1ec9      	subhi	r1, r1, #3
 8000720:	290d      	cmphi	r1, #13
 8000722:	d901      	bls.n	8000728 <ai_layer_type_name+0x14>
 8000724:	390f      	subs	r1, #15
 8000726:	d145      	bne.n	80007b4 <ai_layer_type_name+0xa0>
 8000728:	1a80      	subs	r0, r0, r2
 800072a:	d021      	beq.n	8000770 <ai_layer_type_name+0x5c>
 800072c:	1e40      	subs	r0, r0, #1
 800072e:	d021      	beq.n	8000774 <ai_layer_type_name+0x60>
 8000730:	1e80      	subs	r0, r0, #2
 8000732:	d021      	beq.n	8000778 <ai_layer_type_name+0x64>
 8000734:	1e40      	subs	r0, r0, #1
 8000736:	d021      	beq.n	800077c <ai_layer_type_name+0x68>
 8000738:	1e40      	subs	r0, r0, #1
 800073a:	d021      	beq.n	8000780 <ai_layer_type_name+0x6c>
 800073c:	1e40      	subs	r0, r0, #1
 800073e:	d021      	beq.n	8000784 <ai_layer_type_name+0x70>
 8000740:	1e40      	subs	r0, r0, #1
 8000742:	d021      	beq.n	8000788 <ai_layer_type_name+0x74>
 8000744:	1e40      	subs	r0, r0, #1
 8000746:	d021      	beq.n	800078c <ai_layer_type_name+0x78>
 8000748:	1e40      	subs	r0, r0, #1
 800074a:	d021      	beq.n	8000790 <ai_layer_type_name+0x7c>
 800074c:	1e40      	subs	r0, r0, #1
 800074e:	d021      	beq.n	8000794 <ai_layer_type_name+0x80>
 8000750:	1e40      	subs	r0, r0, #1
 8000752:	d021      	beq.n	8000798 <ai_layer_type_name+0x84>
 8000754:	1e40      	subs	r0, r0, #1
 8000756:	d021      	beq.n	800079c <ai_layer_type_name+0x88>
 8000758:	1e40      	subs	r0, r0, #1
 800075a:	d021      	beq.n	80007a0 <ai_layer_type_name+0x8c>
 800075c:	1e40      	subs	r0, r0, #1
 800075e:	d021      	beq.n	80007a4 <ai_layer_type_name+0x90>
 8000760:	1e40      	subs	r0, r0, #1
 8000762:	d021      	beq.n	80007a8 <ai_layer_type_name+0x94>
 8000764:	1e40      	subs	r0, r0, #1
 8000766:	d021      	beq.n	80007ac <ai_layer_type_name+0x98>
 8000768:	1e80      	subs	r0, r0, #2
 800076a:	d021      	beq.n	80007b0 <ai_layer_type_name+0x9c>
 800076c:	a012      	add	r0, pc, #72	; (adr r0, 80007b8 <.text_5>)
 800076e:	4770      	bx	lr
 8000770:	a012      	add	r0, pc, #72	; (adr r0, 80007bc <.text_6>)
 8000772:	4770      	bx	lr
 8000774:	a012      	add	r0, pc, #72	; (adr r0, 80007c0 <.text_7>)
 8000776:	4770      	bx	lr
 8000778:	a027      	add	r0, pc, #156	; (adr r0, 8000818 <.text_14>)
 800077a:	4770      	bx	lr
 800077c:	a028      	add	r0, pc, #160	; (adr r0, 8000820 <.text_15>)
 800077e:	4770      	bx	lr
 8000780:	a010      	add	r0, pc, #64	; (adr r0, 80007c4 <.text_8>)
 8000782:	4770      	bx	lr
 8000784:	a010      	add	r0, pc, #64	; (adr r0, 80007c8 <.text_9>)
 8000786:	4770      	bx	lr
 8000788:	a027      	add	r0, pc, #156	; (adr r0, 8000828 <.text_16>)
 800078a:	4770      	bx	lr
 800078c:	a00f      	add	r0, pc, #60	; (adr r0, 80007cc <.text_10>)
 800078e:	4770      	bx	lr
 8000790:	a027      	add	r0, pc, #156	; (adr r0, 8000830 <.text_17>)
 8000792:	4770      	bx	lr
 8000794:	a028      	add	r0, pc, #160	; (adr r0, 8000838 <.text_18>)
 8000796:	4770      	bx	lr
 8000798:	a02c      	add	r0, pc, #176	; (adr r0, 800084c <.text_19>)
 800079a:	4770      	bx	lr
 800079c:	a02d      	add	r0, pc, #180	; (adr r0, 8000854 <.text_20>)
 800079e:	4770      	bx	lr
 80007a0:	a00b      	add	r0, pc, #44	; (adr r0, 80007d0 <.text_11>)
 80007a2:	4770      	bx	lr
 80007a4:	a02d      	add	r0, pc, #180	; (adr r0, 800085c <.text_21>)
 80007a6:	4770      	bx	lr
 80007a8:	a02e      	add	r0, pc, #184	; (adr r0, 8000864 <.text_22>)
 80007aa:	4770      	bx	lr
 80007ac:	a030      	add	r0, pc, #192	; (adr r0, 8000870 <.text_23>)
 80007ae:	4770      	bx	lr
 80007b0:	a034      	add	r0, pc, #208	; (adr r0, 8000884 <.text_24>)
 80007b2:	4770      	bx	lr
 80007b4:	a000      	add	r0, pc, #0	; (adr r0, 80007b8 <.text_5>)
 80007b6:	4770      	bx	lr

080007b8 <.text_5>:
 80007b8:	00000000 	.word	0x00000000

080007bc <.text_6>:
 80007bc:	00444441 	.word	0x00444441

080007c0 <.text_7>:
 80007c0:	00004e42 	.word	0x00004e42

080007c4 <.text_8>:
 80007c4:	00555247 	.word	0x00555247

080007c8 <.text_9>:
 80007c8:	004e524c 	.word	0x004e524c

080007cc <.text_10>:
 80007cc:	00004c4e 	.word	0x00004c4e

080007d0 <.text_11>:
 80007d0:	00004d53 	.word	0x00004d53

080007d4 <ai_layer_type_is_valid>:
 80007d4:	f242 7111 	movw	r1, #10001	; 0x2711
 80007d8:	1a40      	subs	r0, r0, r1
 80007da:	2801      	cmp	r0, #1
 80007dc:	bf84      	itt	hi
 80007de:	1ec0      	subhi	r0, r0, #3
 80007e0:	280d      	cmphi	r0, #13
 80007e2:	d901      	bls.n	80007e8 <ai_layer_type_is_valid+0x14>
 80007e4:	380f      	subs	r0, #15
 80007e6:	d101      	bne.n	80007ec <ai_layer_type_is_valid+0x18>
 80007e8:	2001      	movs	r0, #1
 80007ea:	4770      	bx	lr
 80007ec:	2000      	movs	r0, #0
 80007ee:	4770      	bx	lr

080007f0 <ai_layers_forward_all>:
 80007f0:	b530      	push	{r4, r5, lr}
 80007f2:	4604      	mov	r4, r0
 80007f4:	b081      	sub	sp, #4
 80007f6:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 80007f8:	b158      	cbz	r0, 8000812 <ai_layers_forward_all+0x22>
 80007fa:	6420      	str	r0, [r4, #64]	; 0x40
 80007fc:	6c25      	ldr	r5, [r4, #64]	; 0x40
 80007fe:	68e9      	ldr	r1, [r5, #12]
 8000800:	4628      	mov	r0, r5
 8000802:	4788      	blx	r1
 8000804:	68a8      	ldr	r0, [r5, #8]
 8000806:	42a8      	cmp	r0, r5
 8000808:	bf08      	it	eq
 800080a:	2000      	moveq	r0, #0
 800080c:	2800      	cmp	r0, #0
 800080e:	6420      	str	r0, [r4, #64]	; 0x40
 8000810:	d1f4      	bne.n	80007fc <ai_layers_forward_all+0xc>
 8000812:	b001      	add	sp, #4
 8000814:	bd30      	pop	{r4, r5, pc}
	...

08000818 <.text_14>:
 8000818:	564e4f43 	.word	0x564e4f43
 800081c:	00004432 	.word	0x00004432

08000820 <.text_15>:
 8000820:	534e4544 	.word	0x534e4544
 8000824:	00000045 	.word	0x00000045

08000828 <.text_16>:
 8000828:	4d54534c 	.word	0x4d54534c
 800082c:	00000000 	.word	0x00000000

08000830 <.text_17>:
 8000830:	4d524f4e 	.word	0x4d524f4e
 8000834:	00000000 	.word	0x00000000

08000838 <.text_18>:
 8000838:	4954504f 	.word	0x4954504f
 800083c:	455a494d 	.word	0x455a494d
 8000840:	4f435f44 	.word	0x4f435f44
 8000844:	4432564e 	.word	0x4432564e
 8000848:	00000000 	.word	0x00000000

0800084c <.text_19>:
 800084c:	4d524550 	.word	0x4d524550
 8000850:	00455455 	.word	0x00455455

08000854 <.text_20>:
 8000854:	4c4f4f50 	.word	0x4c4f4f50
 8000858:	00000000 	.word	0x00000000

0800085c <.text_21>:
 800085c:	494c5053 	.word	0x494c5053
 8000860:	00000054 	.word	0x00000054

08000864 <.text_22>:
 8000864:	454d4954 	.word	0x454d4954
 8000868:	4c45445f 	.word	0x4c45445f
 800086c:	00005941 	.word	0x00005941

08000870 <.text_23>:
 8000870:	454d4954 	.word	0x454d4954
 8000874:	5349445f 	.word	0x5349445f
 8000878:	42495254 	.word	0x42495254
 800087c:	44455455 	.word	0x44455455
 8000880:	00000000 	.word	0x00000000

08000884 <.text_24>:
 8000884:	434e4f43 	.word	0x434e4f43
 8000888:	00005441 	.word	0x00005441

0800088c <ai_check_custom_types::ref_signatures>:
 800088c:	84048403                                ....

08000890 <ai_conv2d_kernel_simple_f32>:
 8000890:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000894:	b081      	sub	sp, #4
 8000896:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 8000898:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 800089a:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
 800089e:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 80008a0:	980a      	ldr	r0, [sp, #40]	; 0x28
 80008a2:	f8dd b03c 	ldr.w	fp, [sp, #60]	; 0x3c
 80008a6:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 80008aa:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 80008ae:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 80008b2:	1b2f      	subs	r7, r5, r4
 80008b4:	fb09 fa07 	mul.w	sl, r9, r7
 80008b8:	1b37      	subs	r7, r6, r4
 80008ba:	fb07 f709 	mul.w	r7, r7, r9
 80008be:	9700      	str	r7, [sp, #0]
 80008c0:	4288      	cmp	r0, r1
 80008c2:	bf0c      	ite	eq
 80008c4:	ed9f 0a86 	vldreq	s0, [pc, #536]	; 8000ae0 <.text_4>
 80008c8:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80008cc:	fb05 f50c 	mul.w	r5, r5, ip
 80008d0:	fb06 f709 	mul.w	r7, r6, r9
 80008d4:	fb06 860c 	mla	r6, r6, ip, r8
 80008d8:	fb06 f609 	mul.w	r6, r6, r9
 80008dc:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80008e0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
 80008e2:	ebab 0b0e 	sub.w	fp, fp, lr
 80008e6:	fb04 f409 	mul.w	r4, r4, r9
 80008ea:	fb09 f505 	mul.w	r5, r9, r5
 80008ee:	2e00      	cmp	r6, #0
 80008f0:	fb0b fb07 	mul.w	fp, fp, r7
 80008f4:	eb02 0985 	add.w	r9, r2, r5, lsl #2
 80008f8:	d04e      	beq.n	8000998 <ai_conv2d_kernel_simple_f32+0x108>
 80008fa:	460d      	mov	r5, r1
 80008fc:	4619      	mov	r1, r3
 80008fe:	4632      	mov	r2, r6
 8000900:	ea4f 0300 	mov.w	r3, r0
 8000904:	edd3 0a00 	vldr	s1, [r3]
 8000908:	f1be 0f01 	cmp.w	lr, #1
 800090c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000910:	464e      	mov	r6, r9
 8000912:	db39      	blt.n	8000988 <ai_conv2d_kernel_simple_f32+0xf8>
 8000914:	f8dd c000 	ldr.w	ip, [sp]
 8000918:	4670      	mov	r0, lr
 800091a:	2c01      	cmp	r4, #1
 800091c:	db2c      	blt.n	8000978 <ai_conv2d_kernel_simple_f32+0xe8>
 800091e:	f014 0803 	ands.w	r8, r4, #3
 8000922:	d00a      	beq.n	800093a <ai_conv2d_kernel_simple_f32+0xaa>
 8000924:	ed91 1a00 	vldr	s2, [r1]
 8000928:	edd6 1a00 	vldr	s3, [r6]
 800092c:	1d36      	adds	r6, r6, #4
 800092e:	1d09      	adds	r1, r1, #4
 8000930:	f1b8 0801 	subs.w	r8, r8, #1
 8000934:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000938:	d1f4      	bne.n	8000924 <ai_conv2d_kernel_simple_f32+0x94>
 800093a:	08a7      	lsrs	r7, r4, #2
 800093c:	f000 801c 	beq.w	8000978 <ai_conv2d_kernel_simple_f32+0xe8>
 8000940:	ed91 2a00 	vldr	s4, [r1]
 8000944:	ed96 1a00 	vldr	s2, [r6]
 8000948:	edd1 1a01 	vldr	s3, [r1, #4]
 800094c:	edd6 2a01 	vldr	s5, [r6, #4]
 8000950:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000954:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000958:	ed91 2a02 	vldr	s4, [r1, #8]
 800095c:	ed96 1a02 	vldr	s2, [r6, #8]
 8000960:	edd1 1a03 	vldr	s3, [r1, #12]
 8000964:	edd6 2a03 	vldr	s5, [r6, #12]
 8000968:	3610      	adds	r6, #16
 800096a:	3110      	adds	r1, #16
 800096c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8000970:	1e7f      	subs	r7, r7, #1
 8000972:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8000976:	d1e3      	bne.n	8000940 <ai_conv2d_kernel_simple_f32+0xb0>
 8000978:	1e40      	subs	r0, r0, #1
 800097a:	eb06 068a 	add.w	r6, r6, sl, lsl #2
 800097e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8000982:	d1ca      	bne.n	800091a <ai_conv2d_kernel_simple_f32+0x8a>
 8000984:	f8cd c000 	str.w	ip, [sp]
 8000988:	edc5 0a00 	vstr	s1, [r5]
 800098c:	1d2d      	adds	r5, r5, #4
 800098e:	1d1b      	adds	r3, r3, #4
 8000990:	1e52      	subs	r2, r2, #1
 8000992:	eb01 018b 	add.w	r1, r1, fp, lsl #2
 8000996:	d1b5      	bne.n	8000904 <ai_conv2d_kernel_simple_f32+0x74>
 8000998:	b001      	add	sp, #4
 800099a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080009a0 <ai_conv2d_kernel_depthwise_f32>:
 80009a0:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80009a4:	b084      	sub	sp, #16
 80009a6:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80009a8:	f8dd b058 	ldr.w	fp, [sp, #88]	; 0x58
 80009ac:	9d11      	ldr	r5, [sp, #68]	; 0x44
 80009ae:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80009b0:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80009b2:	f8dd c05c 	ldr.w	ip, [sp, #92]	; 0x5c
 80009b6:	f8dd a03c 	ldr.w	sl, [sp, #60]	; 0x3c
 80009ba:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80009bc:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
 80009c0:	fb09 bb07 	mla	fp, r9, r7, fp
 80009c4:	4611      	mov	r1, r2
 80009c6:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 80009ca:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80009cc:	9b04      	ldr	r3, [sp, #16]
 80009ce:	eba5 0e0c 	sub.w	lr, r5, ip
 80009d2:	1b00      	subs	r0, r0, r4
 80009d4:	429a      	cmp	r2, r3
 80009d6:	bf0c      	ite	eq
 80009d8:	ed9f 0a41 	vldreq	s0, [pc, #260]	; 8000ae0 <.text_4>
 80009dc:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 80009e0:	437d      	muls	r5, r7
 80009e2:	fb0a f505 	mul.w	r5, sl, r5
 80009e6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80009ea:	2500      	movs	r5, #0
 80009ec:	eb01 078a 	add.w	r7, r1, sl, lsl #2
 80009f0:	42b9      	cmp	r1, r7
 80009f2:	fbb6 f6fa 	udiv	r6, r6, sl
 80009f6:	fb0a fe0e 	mul.w	lr, sl, lr
 80009fa:	eba9 080c 	sub.w	r8, r9, ip
 80009fe:	fb00 f009 	mul.w	r0, r0, r9
 8000a02:	9700      	str	r7, [sp, #0]
 8000a04:	d268      	bcs.n	8000ad8 <ai_conv2d_kernel_depthwise_f32+0x138>
 8000a06:	920e      	str	r2, [sp, #56]	; 0x38
 8000a08:	9603      	str	r6, [sp, #12]
 8000a0a:	9a03      	ldr	r2, [sp, #12]
 8000a0c:	2a00      	cmp	r2, #0
 8000a0e:	d05f      	beq.n	8000ad0 <ai_conv2d_kernel_depthwise_f32+0x130>
 8000a10:	9b04      	ldr	r3, [sp, #16]
 8000a12:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000a14:	9002      	str	r0, [sp, #8]
 8000a16:	eb03 0785 	add.w	r7, r3, r5, lsl #2
 8000a1a:	9b03      	ldr	r3, [sp, #12]
 8000a1c:	f8cd 1004 	str.w	r1, [sp, #4]
 8000a20:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8000a24:	edd6 0a00 	vldr	s1, [r6]
 8000a28:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8000a2c:	2c01      	cmp	r4, #1
 8000a2e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000a32:	db41      	blt.n	8000ab8 <ai_conv2d_kernel_depthwise_f32+0x118>
 8000a34:	ea4f 0204 	mov.w	r2, r4
 8000a38:	f1bc 0f01 	cmp.w	ip, #1
 8000a3c:	db36      	blt.n	8000aac <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000a3e:	f01c 0103 	ands.w	r1, ip, #3
 8000a42:	d00b      	beq.n	8000a5c <ai_conv2d_kernel_depthwise_f32+0xbc>
 8000a44:	ed9b 1a00 	vldr	s2, [fp]
 8000a48:	edd9 1a00 	vldr	s3, [r9]
 8000a4c:	1e49      	subs	r1, r1, #1
 8000a4e:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a52:	f10b 0b04 	add.w	fp, fp, #4
 8000a56:	eb09 098a 	add.w	r9, r9, sl, lsl #2
 8000a5a:	d1f3      	bne.n	8000a44 <ai_conv2d_kernel_depthwise_f32+0xa4>
 8000a5c:	ea5f 009c 	movs.w	r0, ip, lsr #2
 8000a60:	f000 8024 	beq.w	8000aac <ai_conv2d_kernel_depthwise_f32+0x10c>
 8000a64:	ed9b 1a00 	vldr	s2, [fp]
 8000a68:	edd9 1a00 	vldr	s3, [r9]
 8000a6c:	eb09 018a 	add.w	r1, r9, sl, lsl #2
 8000a70:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a74:	eddb 1a01 	vldr	s3, [fp, #4]
 8000a78:	ed91 1a00 	vldr	s2, [r1]
 8000a7c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000a80:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000a84:	ed9b 1a02 	vldr	s2, [fp, #8]
 8000a88:	edd1 1a00 	vldr	s3, [r1]
 8000a8c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8000a90:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000a94:	eddb 1a03 	vldr	s3, [fp, #12]
 8000a98:	ed91 1a00 	vldr	s2, [r1]
 8000a9c:	1e40      	subs	r0, r0, #1
 8000a9e:	ee41 0a81 	vmla.f32	s1, s3, s2
 8000aa2:	f10b 0b10 	add.w	fp, fp, #16
 8000aa6:	eb01 098a 	add.w	r9, r1, sl, lsl #2
 8000aaa:	d1db      	bne.n	8000a64 <ai_conv2d_kernel_depthwise_f32+0xc4>
 8000aac:	1e52      	subs	r2, r2, #1
 8000aae:	eb09 098e 	add.w	r9, r9, lr, lsl #2
 8000ab2:	eb0b 0b88 	add.w	fp, fp, r8, lsl #2
 8000ab6:	d1bf      	bne.n	8000a38 <ai_conv2d_kernel_depthwise_f32+0x98>
 8000ab8:	9802      	ldr	r0, [sp, #8]
 8000aba:	edc7 0a00 	vstr	s1, [r7]
 8000abe:	1c6d      	adds	r5, r5, #1
 8000ac0:	1d3f      	adds	r7, r7, #4
 8000ac2:	1d36      	adds	r6, r6, #4
 8000ac4:	1e5b      	subs	r3, r3, #1
 8000ac6:	eb0b 0b80 	add.w	fp, fp, r0, lsl #2
 8000aca:	d1ab      	bne.n	8000a24 <ai_conv2d_kernel_depthwise_f32+0x84>
 8000acc:	9802      	ldr	r0, [sp, #8]
 8000ace:	9901      	ldr	r1, [sp, #4]
 8000ad0:	9a00      	ldr	r2, [sp, #0]
 8000ad2:	1d09      	adds	r1, r1, #4
 8000ad4:	4291      	cmp	r1, r2
 8000ad6:	d398      	bcc.n	8000a0a <ai_conv2d_kernel_depthwise_f32+0x6a>
 8000ad8:	b005      	add	sp, #20
 8000ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000ae0 <.text_4>:
 8000ae0:	00000000 	.word	0x00000000

08000ae4 <ai_conv2d_kernel_group_f32>:
 8000ae4:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000ae8:	b084      	sub	sp, #16
 8000aea:	f8dd e04c 	ldr.w	lr, [sp, #76]	; 0x4c
 8000aee:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000af2:	9818      	ldr	r0, [sp, #96]	; 0x60
 8000af4:	9910      	ldr	r1, [sp, #64]	; 0x40
 8000af6:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8000af8:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8000afa:	9f0f      	ldr	r7, [sp, #60]	; 0x3c
 8000afc:	ebae 0e0c 	sub.w	lr, lr, ip
 8000b00:	4692      	mov	sl, r2
 8000b02:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000b04:	fbb1 f9f2 	udiv	r9, r1, r2
 8000b08:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000b0a:	f8cd 900c 	str.w	r9, [sp, #12]
 8000b0e:	1a09      	subs	r1, r1, r0
 8000b10:	4379      	muls	r1, r7
 8000b12:	461e      	mov	r6, r3
 8000b14:	fbb7 f3f2 	udiv	r3, r7, r2
 8000b18:	fb04 fb03 	mul.w	fp, r4, r3
 8000b1c:	fb0e fe0b 	mul.w	lr, lr, fp
 8000b20:	f8dd b05c 	ldr.w	fp, [sp, #92]	; 0x5c
 8000b24:	eba7 0903 	sub.w	r9, r7, r3
 8000b28:	eba4 0800 	sub.w	r8, r4, r0
 8000b2c:	fb04 b405 	mla	r4, r4, r5, fp
 8000b30:	435c      	muls	r4, r3
 8000b32:	eb06 0484 	add.w	r4, r6, r4, lsl #2
 8000b36:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8000b38:	f8dd b010 	ldr.w	fp, [sp, #16]
 8000b3c:	455e      	cmp	r6, fp
 8000b3e:	9e11      	ldr	r6, [sp, #68]	; 0x44
 8000b40:	bf0c      	ite	eq
 8000b42:	ed9f 0a3f 	vldreq	s0, [pc, #252]	; 8000c40 <.text_6>
 8000b46:	eeb7 0a00 	vmovne.f32	s0, #112	; 0x3f800000  1.0
 8000b4a:	4375      	muls	r5, r6
 8000b4c:	436f      	muls	r7, r5
 8000b4e:	eb0a 0587 	add.w	r5, sl, r7, lsl #2
 8000b52:	2a00      	cmp	r2, #0
 8000b54:	fb08 f803 	mul.w	r8, r8, r3
 8000b58:	f04f 0a00 	mov.w	sl, #0
 8000b5c:	d06c      	beq.n	8000c38 <ai_conv2d_kernel_group_f32+0x154>
 8000b5e:	9200      	str	r2, [sp, #0]
 8000b60:	9a03      	ldr	r2, [sp, #12]
 8000b62:	2a00      	cmp	r2, #0
 8000b64:	d062      	beq.n	8000c2c <ai_conv2d_kernel_group_f32+0x148>
 8000b66:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000b68:	9f04      	ldr	r7, [sp, #16]
 8000b6a:	f8cd c058 	str.w	ip, [sp, #88]	; 0x58
 8000b6e:	eb02 068a 	add.w	r6, r2, sl, lsl #2
 8000b72:	9a03      	ldr	r2, [sp, #12]
 8000b74:	f8cd e008 	str.w	lr, [sp, #8]
 8000b78:	eb07 078a 	add.w	r7, r7, sl, lsl #2
 8000b7c:	f8cd 5004 	str.w	r5, [sp, #4]
 8000b80:	f8dd e058 	ldr.w	lr, [sp, #88]	; 0x58
 8000b84:	edd6 0a00 	vldr	s1, [r6]
 8000b88:	9d01      	ldr	r5, [sp, #4]
 8000b8a:	f1be 0f01 	cmp.w	lr, #1
 8000b8e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8000b92:	db3b      	blt.n	8000c0c <ai_conv2d_kernel_group_f32+0x128>
 8000b94:	2801      	cmp	r0, #1
 8000b96:	db32      	blt.n	8000bfe <ai_conv2d_kernel_group_f32+0x11a>
 8000b98:	ea4f 0c00 	mov.w	ip, r0
 8000b9c:	eb05 0b83 	add.w	fp, r5, r3, lsl #2
 8000ba0:	455d      	cmp	r5, fp
 8000ba2:	d227      	bcs.n	8000bf4 <ai_conv2d_kernel_group_f32+0x110>
 8000ba4:	ed94 1a00 	vldr	s2, [r4]
 8000ba8:	edd5 1a00 	vldr	s3, [r5]
 8000bac:	1d2d      	adds	r5, r5, #4
 8000bae:	1d24      	adds	r4, r4, #4
 8000bb0:	455d      	cmp	r5, fp
 8000bb2:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bb6:	d21d      	bcs.n	8000bf4 <ai_conv2d_kernel_group_f32+0x110>
 8000bb8:	ed94 1a00 	vldr	s2, [r4]
 8000bbc:	edd5 1a00 	vldr	s3, [r5]
 8000bc0:	1d2d      	adds	r5, r5, #4
 8000bc2:	1d24      	adds	r4, r4, #4
 8000bc4:	455d      	cmp	r5, fp
 8000bc6:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bca:	d213      	bcs.n	8000bf4 <ai_conv2d_kernel_group_f32+0x110>
 8000bcc:	ed94 1a00 	vldr	s2, [r4]
 8000bd0:	edd5 1a00 	vldr	s3, [r5]
 8000bd4:	1d2d      	adds	r5, r5, #4
 8000bd6:	1d24      	adds	r4, r4, #4
 8000bd8:	455d      	cmp	r5, fp
 8000bda:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bde:	d209      	bcs.n	8000bf4 <ai_conv2d_kernel_group_f32+0x110>
 8000be0:	ed94 1a00 	vldr	s2, [r4]
 8000be4:	edd5 1a00 	vldr	s3, [r5]
 8000be8:	1d2d      	adds	r5, r5, #4
 8000bea:	1d24      	adds	r4, r4, #4
 8000bec:	455d      	cmp	r5, fp
 8000bee:	ee41 0a21 	vmla.f32	s1, s2, s3
 8000bf2:	d3d7      	bcc.n	8000ba4 <ai_conv2d_kernel_group_f32+0xc0>
 8000bf4:	f1bc 0c01 	subs.w	ip, ip, #1
 8000bf8:	eb05 0589 	add.w	r5, r5, r9, lsl #2
 8000bfc:	d1ce      	bne.n	8000b9c <ai_conv2d_kernel_group_f32+0xb8>
 8000bfe:	f1be 0e01 	subs.w	lr, lr, #1
 8000c02:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 8000c06:	eb04 0488 	add.w	r4, r4, r8, lsl #2
 8000c0a:	d1c3      	bne.n	8000b94 <ai_conv2d_kernel_group_f32+0xb0>
 8000c0c:	9d02      	ldr	r5, [sp, #8]
 8000c0e:	edc7 0a00 	vstr	s1, [r7]
 8000c12:	1d3f      	adds	r7, r7, #4
 8000c14:	1d36      	adds	r6, r6, #4
 8000c16:	1e52      	subs	r2, r2, #1
 8000c18:	eb04 0485 	add.w	r4, r4, r5, lsl #2
 8000c1c:	f10a 0a01 	add.w	sl, sl, #1
 8000c20:	d1ae      	bne.n	8000b80 <ai_conv2d_kernel_group_f32+0x9c>
 8000c22:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8000c26:	f8dd e008 	ldr.w	lr, [sp, #8]
 8000c2a:	9d01      	ldr	r5, [sp, #4]
 8000c2c:	9a00      	ldr	r2, [sp, #0]
 8000c2e:	1e52      	subs	r2, r2, #1
 8000c30:	eb05 0583 	add.w	r5, r5, r3, lsl #2
 8000c34:	9200      	str	r2, [sp, #0]
 8000c36:	d193      	bne.n	8000b60 <ai_conv2d_kernel_group_f32+0x7c>
 8000c38:	b005      	add	sp, #20
 8000c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000c40 <.text_6>:
 8000c40:	00000000 	.word	0x00000000

08000c44 <ai_conv2d_kernel_f32>:
 8000c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000c48:	b08d      	sub	sp, #52	; 0x34
 8000c4a:	9c16      	ldr	r4, [sp, #88]	; 0x58
 8000c4c:	b904      	cbnz	r4, 8000c50 <ai_conv2d_kernel_f32+0xc>
 8000c4e:	460c      	mov	r4, r1
 8000c50:	9f1e      	ldr	r7, [sp, #120]	; 0x78
 8000c52:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 8000c54:	f8dd 8070 	ldr.w	r8, [sp, #112]	; 0x70
 8000c58:	f8dd e080 	ldr.w	lr, [sp, #128]	; 0x80
 8000c5c:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
 8000c5e:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 8000c62:	f8dd 9064 	ldr.w	r9, [sp, #100]	; 0x64
 8000c66:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8000c6a:	f8dd b06c 	ldr.w	fp, [sp, #108]	; 0x6c
 8000c6e:	900b      	str	r0, [sp, #44]	; 0x2c
 8000c70:	1bbf      	subs	r7, r7, r6
 8000c72:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000c74:	f1b8 0f01 	cmp.w	r8, #1
 8000c78:	ebae 0e05 	sub.w	lr, lr, r5
 8000c7c:	d114      	bne.n	8000ca8 <ai_conv2d_kernel_f32+0x64>
 8000c7e:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000c82:	9508      	str	r5, [sp, #32]
 8000c84:	9707      	str	r7, [sp, #28]
 8000c86:	9001      	str	r0, [sp, #4]
 8000c88:	f8cd c008 	str.w	ip, [sp, #8]
 8000c8c:	9606      	str	r6, [sp, #24]
 8000c8e:	f8cd b014 	str.w	fp, [sp, #20]
 8000c92:	f8cd a010 	str.w	sl, [sp, #16]
 8000c96:	f8cd 900c 	str.w	r9, [sp, #12]
 8000c9a:	9400      	str	r4, [sp, #0]
 8000c9c:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000c9e:	f7ff fdf7 	bl	8000890 <ai_conv2d_kernel_simple_f32>
 8000ca2:	b00d      	add	sp, #52	; 0x34
 8000ca4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000ca8:	4580      	cmp	r8, r0
 8000caa:	d114      	bne.n	8000cd6 <ai_conv2d_kernel_f32+0x92>
 8000cac:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8000cb0:	9508      	str	r5, [sp, #32]
 8000cb2:	9707      	str	r7, [sp, #28]
 8000cb4:	9001      	str	r0, [sp, #4]
 8000cb6:	f8cd c008 	str.w	ip, [sp, #8]
 8000cba:	9606      	str	r6, [sp, #24]
 8000cbc:	f8cd b014 	str.w	fp, [sp, #20]
 8000cc0:	f8cd a010 	str.w	sl, [sp, #16]
 8000cc4:	f8cd 900c 	str.w	r9, [sp, #12]
 8000cc8:	9400      	str	r4, [sp, #0]
 8000cca:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000ccc:	f7ff fe68 	bl	80009a0 <ai_conv2d_kernel_depthwise_f32>
 8000cd0:	b00d      	add	sp, #52	; 0x34
 8000cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000cd6:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8000cda:	9509      	str	r5, [sp, #36]	; 0x24
 8000cdc:	9708      	str	r7, [sp, #32]
 8000cde:	9001      	str	r0, [sp, #4]
 8000ce0:	f8cd c008 	str.w	ip, [sp, #8]
 8000ce4:	9607      	str	r6, [sp, #28]
 8000ce6:	f8cd 8018 	str.w	r8, [sp, #24]
 8000cea:	f8cd b014 	str.w	fp, [sp, #20]
 8000cee:	f8cd a010 	str.w	sl, [sp, #16]
 8000cf2:	f8cd 900c 	str.w	r9, [sp, #12]
 8000cf6:	9400      	str	r4, [sp, #0]
 8000cf8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000cfa:	f7ff fef3 	bl	8000ae4 <ai_conv2d_kernel_group_f32>
 8000cfe:	b00d      	add	sp, #52	; 0x34
 8000d00:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000d04 <func_dummy>:
 8000d04:	4770      	bx	lr
	...

08000d08 <ai_dict8_dot_array_f32>:
 8000d08:	b4f0      	push	{r4, r5, r6, r7}
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	9804      	ldr	r0, [sp, #16]
 8000d0e:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 8000d12:	3d20      	subs	r5, #32
 8000d14:	2808      	cmp	r0, #8
 8000d16:	ed9f 0ad9 	vldr	s0, [pc, #868]	; 800107c <.text_11>
 8000d1a:	d22f      	bcs.n	8000d7c <ai_dict8_dot_array_f32+0x74>
 8000d1c:	3520      	adds	r5, #32
 8000d1e:	42ab      	cmp	r3, r5
 8000d20:	d224      	bcs.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000d22:	7808      	ldrb	r0, [r1, #0]
 8000d24:	ed93 1a00 	vldr	s2, [r3]
 8000d28:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000d2c:	1d18      	adds	r0, r3, #4
 8000d2e:	edd6 0a00 	vldr	s1, [r6]
 8000d32:	42a8      	cmp	r0, r5
 8000d34:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d38:	d218      	bcs.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000d3a:	784b      	ldrb	r3, [r1, #1]
 8000d3c:	ed90 1a00 	vldr	s2, [r0]
 8000d40:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000d44:	1d00      	adds	r0, r0, #4
 8000d46:	edd6 0a00 	vldr	s1, [r6]
 8000d4a:	42a8      	cmp	r0, r5
 8000d4c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d50:	d20c      	bcs.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000d52:	788b      	ldrb	r3, [r1, #2]
 8000d54:	ed90 1a00 	vldr	s2, [r0]
 8000d58:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000d5c:	1d03      	adds	r3, r0, #4
 8000d5e:	1cc9      	adds	r1, r1, #3
 8000d60:	edd6 0a00 	vldr	s1, [r6]
 8000d64:	42ab      	cmp	r3, r5
 8000d66:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000d6a:	d3da      	bcc.n	8000d22 <ai_dict8_dot_array_f32+0x1a>
 8000d6c:	edd4 0a00 	vldr	s1, [r4]
 8000d70:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000d74:	ed84 0a00 	vstr	s0, [r4]
 8000d78:	bcf0      	pop	{r4, r5, r6, r7}
 8000d7a:	4770      	bx	lr
 8000d7c:	f001 0003 	and.w	r0, r1, #3
 8000d80:	2803      	cmp	r0, #3
 8000d82:	d8f3      	bhi.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000d84:	e8df f000 	tbb	[pc, r0]
 8000d88:	4c413603 	.word	0x4c413603
 8000d8c:	e7ee      	b.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000d8e:	429d      	cmp	r5, r3
 8000d90:	f080 80d5 	bcs.w	8000f3e <ai_dict8_dot_array_f32+0x236>
 8000d94:	3520      	adds	r5, #32
 8000d96:	42ab      	cmp	r3, r5
 8000d98:	d2e8      	bcs.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000d9a:	7808      	ldrb	r0, [r1, #0]
 8000d9c:	ed93 1a00 	vldr	s2, [r3]
 8000da0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000da4:	1d18      	adds	r0, r3, #4
 8000da6:	edd6 0a00 	vldr	s1, [r6]
 8000daa:	42a8      	cmp	r0, r5
 8000dac:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000db0:	d2dc      	bcs.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000db2:	784b      	ldrb	r3, [r1, #1]
 8000db4:	ed90 1a00 	vldr	s2, [r0]
 8000db8:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000dbc:	1d00      	adds	r0, r0, #4
 8000dbe:	edd6 0a00 	vldr	s1, [r6]
 8000dc2:	42a8      	cmp	r0, r5
 8000dc4:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000dc8:	d2d0      	bcs.n	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000dca:	788b      	ldrb	r3, [r1, #2]
 8000dcc:	ed90 1a00 	vldr	s2, [r0]
 8000dd0:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000dd4:	1d03      	adds	r3, r0, #4
 8000dd6:	1cc9      	adds	r1, r1, #3
 8000dd8:	edd6 0a00 	vldr	s1, [r6]
 8000ddc:	42ab      	cmp	r3, r5
 8000dde:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000de2:	d3da      	bcc.n	8000d9a <ai_dict8_dot_array_f32+0x92>
 8000de4:	edd4 0a00 	vldr	s1, [r4]
 8000de8:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000dec:	ed84 0a00 	vstr	s0, [r4]
 8000df0:	bcf0      	pop	{r4, r5, r6, r7}
 8000df2:	4770      	bx	lr
 8000df4:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000df8:	ed93 1a00 	vldr	s2, [r3]
 8000dfc:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000e00:	1d1b      	adds	r3, r3, #4
 8000e02:	edd6 0a00 	vldr	s1, [r6]
 8000e06:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e0a:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000e0e:	ed93 1a00 	vldr	s2, [r3]
 8000e12:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000e16:	1d1b      	adds	r3, r3, #4
 8000e18:	edd6 0a00 	vldr	s1, [r6]
 8000e1c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e20:	f811 0b01 	ldrb.w	r0, [r1], #1
 8000e24:	ed93 1a00 	vldr	s2, [r3]
 8000e28:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000e2c:	1d1b      	adds	r3, r3, #4
 8000e2e:	edd6 0a00 	vldr	s1, [r6]
 8000e32:	429d      	cmp	r5, r3
 8000e34:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e38:	d34e      	bcc.n	8000ed8 <ai_dict8_dot_array_f32+0x1d0>
 8000e3a:	78cf      	ldrb	r7, [r1, #3]
 8000e3c:	ed93 4a00 	vldr	s8, [r3]
 8000e40:	ed93 3a01 	vldr	s6, [r3, #4]
 8000e44:	ed93 2a02 	vldr	s4, [r3, #8]
 8000e48:	ed93 1a03 	vldr	s2, [r3, #12]
 8000e4c:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e50:	788f      	ldrb	r7, [r1, #2]
 8000e52:	edd6 0a00 	vldr	s1, [r6]
 8000e56:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e5a:	784f      	ldrb	r7, [r1, #1]
 8000e5c:	edd6 1a00 	vldr	s3, [r6]
 8000e60:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e64:	780f      	ldrb	r7, [r1, #0]
 8000e66:	edd6 2a00 	vldr	s5, [r6]
 8000e6a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000e6e:	f103 0010 	add.w	r0, r3, #16
 8000e72:	edd6 3a00 	vldr	s7, [r6]
 8000e76:	790b      	ldrb	r3, [r1, #4]
 8000e78:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000e7c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000e80:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000e84:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000e88:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000e8c:	794b      	ldrb	r3, [r1, #5]
 8000e8e:	edd7 0a00 	vldr	s1, [r7]
 8000e92:	ed90 4a00 	vldr	s8, [r0]
 8000e96:	edd0 3a01 	vldr	s7, [r0, #4]
 8000e9a:	ed90 3a02 	vldr	s6, [r0, #8]
 8000e9e:	edd0 2a03 	vldr	s5, [r0, #12]
 8000ea2:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000ea6:	798b      	ldrb	r3, [r1, #6]
 8000ea8:	ed97 1a00 	vldr	s2, [r7]
 8000eac:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000eb0:	79cb      	ldrb	r3, [r1, #7]
 8000eb2:	edd7 1a00 	vldr	s3, [r7]
 8000eb6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000eba:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000ebe:	3108      	adds	r1, #8
 8000ec0:	f100 0310 	add.w	r3, r0, #16
 8000ec4:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000ec8:	ed97 2a00 	vldr	s4, [r7]
 8000ecc:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000ed0:	429d      	cmp	r5, r3
 8000ed2:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000ed6:	d2b0      	bcs.n	8000e3a <ai_dict8_dot_array_f32+0x132>
 8000ed8:	3520      	adds	r5, #32
 8000eda:	42ab      	cmp	r3, r5
 8000edc:	f4bf af46 	bcs.w	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000ee0:	7808      	ldrb	r0, [r1, #0]
 8000ee2:	ed93 1a00 	vldr	s2, [r3]
 8000ee6:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 8000eea:	1d18      	adds	r0, r3, #4
 8000eec:	edd6 0a00 	vldr	s1, [r6]
 8000ef0:	42a8      	cmp	r0, r5
 8000ef2:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000ef6:	f4bf af39 	bcs.w	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000efa:	784b      	ldrb	r3, [r1, #1]
 8000efc:	ed90 1a00 	vldr	s2, [r0]
 8000f00:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000f04:	1d00      	adds	r0, r0, #4
 8000f06:	edd6 0a00 	vldr	s1, [r6]
 8000f0a:	42a8      	cmp	r0, r5
 8000f0c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f10:	f4bf af2c 	bcs.w	8000d6c <ai_dict8_dot_array_f32+0x64>
 8000f14:	788b      	ldrb	r3, [r1, #2]
 8000f16:	ed90 1a00 	vldr	s2, [r0]
 8000f1a:	eb02 0683 	add.w	r6, r2, r3, lsl #2
 8000f1e:	1d03      	adds	r3, r0, #4
 8000f20:	1cc9      	adds	r1, r1, #3
 8000f22:	edd6 0a00 	vldr	s1, [r6]
 8000f26:	42ab      	cmp	r3, r5
 8000f28:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f2c:	d3d8      	bcc.n	8000ee0 <ai_dict8_dot_array_f32+0x1d8>
 8000f2e:	edd4 0a00 	vldr	s1, [r4]
 8000f32:	ee30 0a80 	vadd.f32	s0, s1, s0
 8000f36:	ed84 0a00 	vstr	s0, [r4]
 8000f3a:	bcf0      	pop	{r4, r5, r6, r7}
 8000f3c:	4770      	bx	lr
 8000f3e:	78cf      	ldrb	r7, [r1, #3]
 8000f40:	ed93 4a00 	vldr	s8, [r3]
 8000f44:	ed93 3a01 	vldr	s6, [r3, #4]
 8000f48:	ed93 2a02 	vldr	s4, [r3, #8]
 8000f4c:	ed93 1a03 	vldr	s2, [r3, #12]
 8000f50:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f54:	788f      	ldrb	r7, [r1, #2]
 8000f56:	edd6 0a00 	vldr	s1, [r6]
 8000f5a:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f5e:	784f      	ldrb	r7, [r1, #1]
 8000f60:	edd6 1a00 	vldr	s3, [r6]
 8000f64:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f68:	780f      	ldrb	r7, [r1, #0]
 8000f6a:	edd6 2a00 	vldr	s5, [r6]
 8000f6e:	eb02 0687 	add.w	r6, r2, r7, lsl #2
 8000f72:	f103 0010 	add.w	r0, r3, #16
 8000f76:	edd6 3a00 	vldr	s7, [r6]
 8000f7a:	790b      	ldrb	r3, [r1, #4]
 8000f7c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8000f80:	ee02 0a83 	vmla.f32	s0, s5, s6
 8000f84:	ee01 0a82 	vmla.f32	s0, s3, s4
 8000f88:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000f8c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8000f90:	794b      	ldrb	r3, [r1, #5]
 8000f92:	edd7 0a00 	vldr	s1, [r7]
 8000f96:	ed90 4a00 	vldr	s8, [r0]
 8000f9a:	edd0 3a01 	vldr	s7, [r0, #4]
 8000f9e:	ed90 3a02 	vldr	s6, [r0, #8]
 8000fa2:	edd0 2a03 	vldr	s5, [r0, #12]
 8000fa6:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000faa:	798b      	ldrb	r3, [r1, #6]
 8000fac:	ed97 1a00 	vldr	s2, [r7]
 8000fb0:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000fb4:	79cb      	ldrb	r3, [r1, #7]
 8000fb6:	edd7 1a00 	vldr	s3, [r7]
 8000fba:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8000fbe:	ee00 0a84 	vmla.f32	s0, s1, s8
 8000fc2:	3108      	adds	r1, #8
 8000fc4:	f100 0310 	add.w	r3, r0, #16
 8000fc8:	ee01 0a23 	vmla.f32	s0, s2, s7
 8000fcc:	ed97 2a00 	vldr	s4, [r7]
 8000fd0:	ee01 0a83 	vmla.f32	s0, s3, s6
 8000fd4:	429d      	cmp	r5, r3
 8000fd6:	ee02 0a22 	vmla.f32	s0, s4, s5
 8000fda:	d2b0      	bcs.n	8000f3e <ai_dict8_dot_array_f32+0x236>
 8000fdc:	e6da      	b.n	8000d94 <ai_dict8_dot_array_f32+0x8c>
	...

08000fe0 <ai_dict4_dot_array_f32>:
 8000fe0:	b4f0      	push	{r4, r5, r6, r7}
 8000fe2:	9c04      	ldr	r4, [sp, #16]
 8000fe4:	0865      	lsrs	r5, r4, #1
 8000fe6:	006d      	lsls	r5, r5, #1
 8000fe8:	eb03 0585 	add.w	r5, r3, r5, lsl #2
 8000fec:	42ab      	cmp	r3, r5
 8000fee:	ed9f 0a23 	vldr	s0, [pc, #140]	; 800107c <.text_11>
 8000ff2:	d22f      	bcs.n	8001054 <ai_dict4_dot_array_f32+0x74>
 8000ff4:	f811 6b01 	ldrb.w	r6, [r1], #1
 8000ff8:	ed93 2a00 	vldr	s4, [r3]
 8000ffc:	ed93 1a01 	vldr	s2, [r3, #4]
 8001000:	f006 070f 	and.w	r7, r6, #15
 8001004:	0936      	lsrs	r6, r6, #4
 8001006:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800100a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800100e:	edd6 1a00 	vldr	s3, [r6]
 8001012:	edd7 0a00 	vldr	s1, [r7]
 8001016:	3308      	adds	r3, #8
 8001018:	ee01 0a82 	vmla.f32	s0, s3, s4
 800101c:	42ab      	cmp	r3, r5
 800101e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001022:	d217      	bcs.n	8001054 <ai_dict4_dot_array_f32+0x74>
 8001024:	f811 6b01 	ldrb.w	r6, [r1], #1
 8001028:	ed93 2a00 	vldr	s4, [r3]
 800102c:	ed93 1a01 	vldr	s2, [r3, #4]
 8001030:	f006 070f 	and.w	r7, r6, #15
 8001034:	0936      	lsrs	r6, r6, #4
 8001036:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800103a:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800103e:	edd6 1a00 	vldr	s3, [r6]
 8001042:	edd7 0a00 	vldr	s1, [r7]
 8001046:	3308      	adds	r3, #8
 8001048:	ee01 0a82 	vmla.f32	s0, s3, s4
 800104c:	42ab      	cmp	r3, r5
 800104e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001052:	d3cf      	bcc.n	8000ff4 <ai_dict4_dot_array_f32+0x14>
 8001054:	07e4      	lsls	r4, r4, #31
 8001056:	d509      	bpl.n	800106c <ai_dict4_dot_array_f32+0x8c>
 8001058:	7809      	ldrb	r1, [r1, #0]
 800105a:	ed93 1a00 	vldr	s2, [r3]
 800105e:	0909      	lsrs	r1, r1, #4
 8001060:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001064:	edd2 0a00 	vldr	s1, [r2]
 8001068:	ee00 0a81 	vmla.f32	s0, s1, s2
 800106c:	edd0 1a00 	vldr	s3, [r0]
 8001070:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001074:	ed80 0a00 	vstr	s0, [r0]
 8001078:	bcf0      	pop	{r4, r5, r6, r7}
 800107a:	4770      	bx	lr

0800107c <.text_11>:
 800107c:	00000000 	.word	0x00000000

08001080 <forward_conv2d>:
 8001080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001084:	4605      	mov	r5, r0
 8001086:	b09b      	sub	sp, #108	; 0x6c
 8001088:	6968      	ldr	r0, [r5, #20]
 800108a:	6800      	ldr	r0, [r0, #0]
 800108c:	6801      	ldr	r1, [r0, #0]
 800108e:	6842      	ldr	r2, [r0, #4]
 8001090:	6880      	ldr	r0, [r0, #8]
 8001092:	680f      	ldr	r7, [r1, #0]
 8001094:	f8d2 a000 	ldr.w	sl, [r2]
 8001098:	f8d0 e000 	ldr.w	lr, [r0]
 800109c:	6840      	ldr	r0, [r0, #4]
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	920d      	str	r2, [sp, #52]	; 0x34
 80010a2:	2800      	cmp	r0, #0
 80010a4:	f8da 3008 	ldr.w	r3, [sl, #8]
 80010a8:	9301      	str	r3, [sp, #4]
 80010aa:	f8da 1010 	ldr.w	r1, [sl, #16]
 80010ae:	f8da 900c 	ldr.w	r9, [sl, #12]
 80010b2:	693c      	ldr	r4, [r7, #16]
 80010b4:	f8d7 800c 	ldr.w	r8, [r7, #12]
 80010b8:	8c2b      	ldrh	r3, [r5, #32]
 80010ba:	930c      	str	r3, [sp, #48]	; 0x30
 80010bc:	8cae      	ldrh	r6, [r5, #36]	; 0x24
 80010be:	960f      	str	r6, [sp, #60]	; 0x3c
 80010c0:	6aea      	ldr	r2, [r5, #44]	; 0x2c
 80010c2:	8d2e      	ldrh	r6, [r5, #40]	; 0x28
 80010c4:	f8de 300c 	ldr.w	r3, [lr, #12]
 80010c8:	930e      	str	r3, [sp, #56]	; 0x38
 80010ca:	b292      	uxth	r2, r2
 80010cc:	f8de 3008 	ldr.w	r3, [lr, #8]
 80010d0:	9300      	str	r3, [sp, #0]
 80010d2:	683f      	ldr	r7, [r7, #0]
 80010d4:	f8d7 c008 	ldr.w	ip, [r7, #8]
 80010d8:	f8de 7000 	ldr.w	r7, [lr]
 80010dc:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80010e0:	69ab      	ldr	r3, [r5, #24]
 80010e2:	bf1a      	itte	ne
 80010e4:	6800      	ldrne	r0, [r0, #0]
 80010e6:	6887      	ldrne	r7, [r0, #8]
 80010e8:	2700      	moveq	r7, #0
 80010ea:	f8da 0000 	ldr.w	r0, [sl]
 80010ee:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80010f2:	69e8      	ldr	r0, [r5, #28]
 80010f4:	2800      	cmp	r0, #0
 80010f6:	bf14      	ite	ne
 80010f8:	4605      	movne	r5, r0
 80010fa:	f8df 5710 	ldreq.w	r5, [pc, #1808]	; 800180c <.text_17>
 80010fe:	4252      	negs	r2, r2
 8001100:	2900      	cmp	r1, #0
 8001102:	920b      	str	r2, [sp, #44]	; 0x2c
 8001104:	d06b      	beq.n	80011de <forward_conv2d+0x15e>
 8001106:	4276      	negs	r6, r6
 8001108:	9619      	str	r6, [sp, #100]	; 0x64
 800110a:	f8cd 9058 	str.w	r9, [sp, #88]	; 0x58
 800110e:	9415      	str	r4, [sp, #84]	; 0x54
 8001110:	9110      	str	r1, [sp, #64]	; 0x40
 8001112:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 8001116:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8001118:	9915      	ldr	r1, [sp, #84]	; 0x54
 800111a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800111c:	9c16      	ldr	r4, [sp, #88]	; 0x58
 800111e:	9e19      	ldr	r6, [sp, #100]	; 0x64
 8001120:	4240      	negs	r0, r0
 8001122:	bfd8      	it	le
 8001124:	2000      	movle	r0, #0
 8001126:	1a89      	subs	r1, r1, r2
 8001128:	4559      	cmp	r1, fp
 800112a:	bf28      	it	cs
 800112c:	4659      	movcs	r1, fp
 800112e:	2c00      	cmp	r4, #0
 8001130:	fb08 6202 	mla	r2, r8, r2, r6
 8001134:	d04b      	beq.n	80011ce <forward_conv2d+0x14e>
 8001136:	9402      	str	r4, [sp, #8]
 8001138:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 800113c:	9c01      	ldr	r4, [sp, #4]
 800113e:	f8dd 9000 	ldr.w	r9, [sp]
 8001142:	9314      	str	r3, [sp, #80]	; 0x50
 8001144:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
 8001148:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 800114c:	9711      	str	r7, [sp, #68]	; 0x44
 800114e:	9018      	str	r0, [sp, #96]	; 0x60
 8001150:	9117      	str	r1, [sp, #92]	; 0x5c
 8001152:	4693      	mov	fp, r2
 8001154:	9f02      	ldr	r7, [sp, #8]
 8001156:	4270      	negs	r0, r6
 8001158:	bfd8      	it	le
 800115a:	2000      	movle	r0, #0
 800115c:	eba8 0106 	sub.w	r1, r8, r6
 8001160:	4549      	cmp	r1, r9
 8001162:	bf28      	it	cs
 8001164:	4649      	movcs	r1, r9
 8001166:	910a      	str	r1, [sp, #40]	; 0x28
 8001168:	9009      	str	r0, [sp, #36]	; 0x24
 800116a:	f8cd 9010 	str.w	r9, [sp, #16]
 800116e:	f8cd 800c 	str.w	r8, [sp, #12]
 8001172:	9402      	str	r4, [sp, #8]
 8001174:	4458      	add	r0, fp
 8001176:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001178:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800117a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800117c:	9108      	str	r1, [sp, #32]
 800117e:	9207      	str	r2, [sp, #28]
 8001180:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001182:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001184:	9106      	str	r1, [sp, #24]
 8001186:	9205      	str	r2, [sp, #20]
 8001188:	990d      	ldr	r1, [sp, #52]	; 0x34
 800118a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800118c:	9101      	str	r1, [sp, #4]
 800118e:	9200      	str	r2, [sp, #0]
 8001190:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001192:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001194:	4350      	muls	r0, r2
 8001196:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 800119a:	4651      	mov	r1, sl
 800119c:	2000      	movs	r0, #0
 800119e:	f7ff fd51 	bl	8000c44 <ai_conv2d_kernel_f32>
 80011a2:	4622      	mov	r2, r4
 80011a4:	4651      	mov	r1, sl
 80011a6:	4650      	mov	r0, sl
 80011a8:	47a8      	blx	r5
 80011aa:	980c      	ldr	r0, [sp, #48]	; 0x30
 80011ac:	1986      	adds	r6, r0, r6
 80011ae:	1e7f      	subs	r7, r7, #1
 80011b0:	eb0a 0a84 	add.w	sl, sl, r4, lsl #2
 80011b4:	4483      	add	fp, r0
 80011b6:	d1ce      	bne.n	8001156 <forward_conv2d+0xd6>
 80011b8:	9401      	str	r4, [sp, #4]
 80011ba:	f8cd 9000 	str.w	r9, [sp]
 80011be:	f8dd b038 	ldr.w	fp, [sp, #56]	; 0x38
 80011c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80011c4:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 80011c8:	f8dd e048 	ldr.w	lr, [sp, #72]	; 0x48
 80011cc:	9f11      	ldr	r7, [sp, #68]	; 0x44
 80011ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80011d0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80011d2:	9c10      	ldr	r4, [sp, #64]	; 0x40
 80011d4:	1851      	adds	r1, r2, r1
 80011d6:	1e64      	subs	r4, r4, #1
 80011d8:	910b      	str	r1, [sp, #44]	; 0x2c
 80011da:	9410      	str	r4, [sp, #64]	; 0x40
 80011dc:	d19b      	bne.n	8001116 <forward_conv2d+0x96>
 80011de:	b01b      	add	sp, #108	; 0x6c
 80011e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080011e4 <forward_conv2d_nl_pool>:
 80011e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80011e8:	4603      	mov	r3, r0
 80011ea:	b0b5      	sub	sp, #212	; 0xd4
 80011ec:	6958      	ldr	r0, [r3, #20]
 80011ee:	6800      	ldr	r0, [r0, #0]
 80011f0:	6801      	ldr	r1, [r0, #0]
 80011f2:	6842      	ldr	r2, [r0, #4]
 80011f4:	f8d1 b000 	ldr.w	fp, [r1]
 80011f8:	6817      	ldr	r7, [r2, #0]
 80011fa:	6880      	ldr	r0, [r0, #8]
 80011fc:	f8d0 a000 	ldr.w	sl, [r0]
 8001200:	6844      	ldr	r4, [r0, #4]
 8001202:	f10b 0114 	add.w	r1, fp, #20
 8001206:	e891 1064 	ldmia.w	r1, {r2, r5, r6, ip}
 800120a:	a82d      	add	r0, sp, #180	; 0xb4
 800120c:	e880 1064 	stmia.w	r0, {r2, r5, r6, ip}
 8001210:	f8db 0008 	ldr.w	r0, [fp, #8]
 8001214:	9004      	str	r0, [sp, #16]
 8001216:	68b9      	ldr	r1, [r7, #8]
 8001218:	9103      	str	r1, [sp, #12]
 800121a:	6938      	ldr	r0, [r7, #16]
 800121c:	68fa      	ldr	r2, [r7, #12]
 800121e:	921b      	str	r2, [sp, #108]	; 0x6c
 8001220:	f8db 5010 	ldr.w	r5, [fp, #16]
 8001224:	950d      	str	r5, [sp, #52]	; 0x34
 8001226:	f8db 200c 	ldr.w	r2, [fp, #12]
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	8c1d      	ldrh	r5, [r3, #32]
 800122e:	9511      	str	r5, [sp, #68]	; 0x44
 8001230:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
 8001232:	8d19      	ldrh	r1, [r3, #40]	; 0x28
 8001234:	9110      	str	r1, [sp, #64]	; 0x40
 8001236:	f8b3 c02c 	ldrh.w	ip, [r3, #44]	; 0x2c
 800123a:	f8d3 e030 	ldr.w	lr, [r3, #48]	; 0x30
 800123e:	6b5d      	ldr	r5, [r3, #52]	; 0x34
 8001240:	f8ad 5004 	strh.w	r5, [sp, #4]
 8001244:	699e      	ldr	r6, [r3, #24]
 8001246:	960c      	str	r6, [sp, #48]	; 0x30
 8001248:	f8da 1008 	ldr.w	r1, [sl, #8]
 800124c:	9100      	str	r1, [sp, #0]
 800124e:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8001250:	f8da 100c 	ldr.w	r1, [sl, #12]
 8001254:	950f      	str	r5, [sp, #60]	; 0x3c
 8001256:	6bdd      	ldr	r5, [r3, #60]	; 0x3c
 8001258:	951a      	str	r5, [sp, #104]	; 0x68
 800125a:	6c1d      	ldr	r5, [r3, #64]	; 0x40
 800125c:	9519      	str	r5, [sp, #100]	; 0x64
 800125e:	6c5d      	ldr	r5, [r3, #68]	; 0x44
 8001260:	951d      	str	r5, [sp, #116]	; 0x74
 8001262:	6a3e      	ldr	r6, [r7, #32]
 8001264:	f8d3 8048 	ldr.w	r8, [r3, #72]	; 0x48
 8001268:	6cdd      	ldr	r5, [r3, #76]	; 0x4c
 800126a:	4346      	muls	r6, r0
 800126c:	9605      	str	r6, [sp, #20]
 800126e:	2c00      	cmp	r4, #0
 8001270:	69fe      	ldr	r6, [r7, #28]
 8001272:	9618      	str	r6, [sp, #96]	; 0x60
 8001274:	f8db 6000 	ldr.w	r6, [fp]
 8001278:	68b6      	ldr	r6, [r6, #8]
 800127a:	9617      	str	r6, [sp, #92]	; 0x5c
 800127c:	f8da 6000 	ldr.w	r6, [sl]
 8001280:	68b6      	ldr	r6, [r6, #8]
 8001282:	960b      	str	r6, [sp, #44]	; 0x2c
 8001284:	bf1a      	itte	ne
 8001286:	6824      	ldrne	r4, [r4, #0]
 8001288:	f8d4 b008 	ldrne.w	fp, [r4, #8]
 800128c:	f04f 0b00 	moveq.w	fp, #0
 8001290:	69dc      	ldr	r4, [r3, #28]
 8001292:	2c00      	cmp	r4, #0
 8001294:	bf12      	itee	ne
 8001296:	940e      	strne	r4, [sp, #56]	; 0x38
 8001298:	f8df 4570 	ldreq.w	r4, [pc, #1392]	; 800180c <.text_17>
 800129c:	940e      	streq	r4, [sp, #56]	; 0x38
 800129e:	6d1e      	ldr	r6, [r3, #80]	; 0x50
 80012a0:	9c00      	ldr	r4, [sp, #0]
 80012a2:	9616      	str	r6, [sp, #88]	; 0x58
 80012a4:	426d      	negs	r5, r5
 80012a6:	9b02      	ldr	r3, [sp, #8]
 80012a8:	683f      	ldr	r7, [r7, #0]
 80012aa:	f8bd 6004 	ldrh.w	r6, [sp, #4]
 80012ae:	eba3 0904 	sub.w	r9, r3, r4
 80012b2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80012b4:	9c11      	ldr	r4, [sp, #68]	; 0x44
 80012b6:	4499      	add	r9, r3
 80012b8:	fa19 f38e 	uxtah	r3, r9, lr
 80012bc:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80012c0:	9f05      	ldr	r7, [sp, #20]
 80012c2:	fbb3 f4f4 	udiv	r4, r3, r4
 80012c6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80012c8:	1a5b      	subs	r3, r3, r1
 80012ca:	4463      	add	r3, ip
 80012cc:	199e      	adds	r6, r3, r6
 80012ce:	fbb6 f3f2 	udiv	r3, r6, r2
 80012d2:	1c64      	adds	r4, r4, #1
 80012d4:	1c5b      	adds	r3, r3, #1
 80012d6:	4477      	add	r7, lr
 80012d8:	2800      	cmp	r0, #0
 80012da:	9715      	str	r7, [sp, #84]	; 0x54
 80012dc:	f000 8118 	beq.w	8001510 <forward_conv2d_nl_pool+0x32c>
 80012e0:	f1c8 0800 	rsb	r8, r8, #0
 80012e4:	f8cd 80d0 	str.w	r8, [sp, #208]	; 0xd0
 80012e8:	932a      	str	r3, [sp, #168]	; 0xa8
 80012ea:	9514      	str	r5, [sp, #80]	; 0x50
 80012ec:	9024      	str	r0, [sp, #144]	; 0x90
 80012ee:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80012f0:	9d14      	ldr	r5, [sp, #80]	; 0x50
 80012f2:	9e1a      	ldr	r6, [sp, #104]	; 0x68
 80012f4:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80012f6:	2b00      	cmp	r3, #0
 80012f8:	bfd8      	it	le
 80012fa:	2300      	movle	r3, #0
 80012fc:	1975      	adds	r5, r6, r5
 80012fe:	42a8      	cmp	r0, r5
 8001300:	bf32      	itee	cc
 8001302:	4607      	movcc	r7, r0
 8001304:	9f14      	ldrcs	r7, [sp, #80]	; 0x50
 8001306:	19f7      	addcs	r7, r6, r7
 8001308:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800130a:	9d34      	ldr	r5, [sp, #208]	; 0xd0
 800130c:	2800      	cmp	r0, #0
 800130e:	f000 80f6 	beq.w	80014fe <forward_conv2d_nl_pool+0x31a>
 8001312:	1bde      	subs	r6, r3, r7
 8001314:	9633      	str	r6, [sp, #204]	; 0xcc
 8001316:	f8cd c0ac 	str.w	ip, [sp, #172]	; 0xac
 800131a:	9425      	str	r4, [sp, #148]	; 0x94
 800131c:	9323      	str	r3, [sp, #140]	; 0x8c
 800131e:	9728      	str	r7, [sp, #160]	; 0xa0
 8001320:	9513      	str	r5, [sp, #76]	; 0x4c
 8001322:	9022      	str	r0, [sp, #136]	; 0x88
 8001324:	9813      	ldr	r0, [sp, #76]	; 0x4c
 8001326:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001328:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
 800132a:	2800      	cmp	r0, #0
 800132c:	bfcc      	ite	gt
 800132e:	4606      	movgt	r6, r0
 8001330:	2600      	movle	r6, #0
 8001332:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001334:	18e3      	adds	r3, r4, r3
 8001336:	4298      	cmp	r0, r3
 8001338:	bf32      	itee	cc
 800133a:	4603      	movcc	r3, r0
 800133c:	9b13      	ldrcs	r3, [sp, #76]	; 0x4c
 800133e:	18e3      	addcs	r3, r4, r3
 8001340:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001342:	1af4      	subs	r4, r6, r3
 8001344:	fb04 fa00 	mul.w	sl, r4, r0
 8001348:	9823      	ldr	r0, [sp, #140]	; 0x8c
 800134a:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 800134c:	42a0      	cmp	r0, r4
 800134e:	46f0      	mov	r8, lr
 8001350:	f04f 0900 	mov.w	r9, #0
 8001354:	f280 80c5 	bge.w	80014e2 <forward_conv2d_nl_pool+0x2fe>
 8001358:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 800135a:	9d23      	ldr	r5, [sp, #140]	; 0x8c
 800135c:	922c      	str	r2, [sp, #176]	; 0xb0
 800135e:	4350      	muls	r0, r2
 8001360:	1b04      	subs	r4, r0, r4
 8001362:	9828      	ldr	r0, [sp, #160]	; 0xa0
 8001364:	9621      	str	r6, [sp, #132]	; 0x84
 8001366:	1b45      	subs	r5, r0, r5
 8001368:	9811      	ldr	r0, [sp, #68]	; 0x44
 800136a:	9327      	str	r3, [sp, #156]	; 0x9c
 800136c:	9412      	str	r4, [sp, #72]	; 0x48
 800136e:	951f      	str	r5, [sp, #124]	; 0x7c
 8001370:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001374:	9c12      	ldr	r4, [sp, #72]	; 0x48
 8001376:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001378:	4252      	negs	r2, r2
 800137a:	bfd8      	it	le
 800137c:	2200      	movle	r2, #0
 800137e:	1b1b      	subs	r3, r3, r4
 8001380:	428b      	cmp	r3, r1
 8001382:	bf3a      	itte	cc
 8001384:	9b0d      	ldrcc	r3, [sp, #52]	; 0x34
 8001386:	1b1d      	subcc	r5, r3, r4
 8001388:	460d      	movcs	r5, r1
 800138a:	9c21      	ldr	r4, [sp, #132]	; 0x84
 800138c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800138e:	4344      	muls	r4, r0
 8001390:	1ae3      	subs	r3, r4, r3
 8001392:	9c21      	ldr	r4, [sp, #132]	; 0x84
 8001394:	42b4      	cmp	r4, r6
 8001396:	f280 8099 	bge.w	80014cc <forward_conv2d_nl_pool+0x2e8>
 800139a:	1aad      	subs	r5, r5, r2
 800139c:	9532      	str	r5, [sp, #200]	; 0xc8
 800139e:	eba6 0c04 	sub.w	ip, r6, r4
 80013a2:	9d12      	ldr	r5, [sp, #72]	; 0x48
 80013a4:	9e30      	ldr	r6, [sp, #192]	; 0xc0
 80013a6:	9c04      	ldr	r4, [sp, #16]
 80013a8:	9f00      	ldr	r7, [sp, #0]
 80013aa:	f8cd b098 	str.w	fp, [sp, #152]	; 0x98
 80013ae:	4375      	muls	r5, r6
 80013b0:	9531      	str	r5, [sp, #196]	; 0xc4
 80013b2:	f8cd a080 	str.w	sl, [sp, #128]	; 0x80
 80013b6:	9d03      	ldr	r5, [sp, #12]
 80013b8:	9e02      	ldr	r6, [sp, #8]
 80013ba:	9011      	str	r0, [sp, #68]	; 0x44
 80013bc:	911c      	str	r1, [sp, #112]	; 0x70
 80013be:	f8cd e0a4 	str.w	lr, [sp, #164]	; 0xa4
 80013c2:	921e      	str	r2, [sp, #120]	; 0x78
 80013c4:	469a      	mov	sl, r3
 80013c6:	46e3      	mov	fp, ip
 80013c8:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 80013ca:	f8dd e0bc 	ldr.w	lr, [sp, #188]	; 0xbc
 80013ce:	f1da 0100 	rsbs	r1, sl, #0
 80013d2:	bfd8      	it	le
 80013d4:	2100      	movle	r1, #0
 80013d6:	eb01 0c0a 	add.w	ip, r1, sl
 80013da:	fb0e 220c 	mla	r2, lr, ip, r2
 80013de:	eba6 000a 	sub.w	r0, r6, sl
 80013e2:	42b8      	cmp	r0, r7
 80013e4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80013e6:	4402      	add	r2, r0
 80013e8:	9826      	ldr	r0, [sp, #152]	; 0x98
 80013ea:	bf34      	ite	cc
 80013ec:	eba6 030a 	subcc.w	r3, r6, sl
 80013f0:	463b      	movcs	r3, r7
 80013f2:	b908      	cbnz	r0, 80013f8 <forward_conv2d_nl_pool+0x214>
 80013f4:	ea4f 0008 	mov.w	r0, r8
 80013f8:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
 80013fc:	f8dd c0c8 	ldr.w	ip, [sp, #200]	; 0xc8
 8001400:	1a5b      	subs	r3, r3, r1
 8001402:	f1be 0f01 	cmp.w	lr, #1
 8001406:	d112      	bne.n	800142e <forward_conv2d_nl_pool+0x24a>
 8001408:	9108      	str	r1, [sp, #32]
 800140a:	9309      	str	r3, [sp, #36]	; 0x24
 800140c:	f8cd c01c 	str.w	ip, [sp, #28]
 8001410:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001412:	9106      	str	r1, [sp, #24]
 8001414:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001416:	9105      	str	r1, [sp, #20]
 8001418:	9000      	str	r0, [sp, #0]
 800141a:	9704      	str	r7, [sp, #16]
 800141c:	9603      	str	r6, [sp, #12]
 800141e:	9502      	str	r5, [sp, #8]
 8001420:	9401      	str	r4, [sp, #4]
 8001422:	4641      	mov	r1, r8
 8001424:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001426:	2000      	movs	r0, #0
 8001428:	f7ff fa32 	bl	8000890 <ai_conv2d_kernel_simple_f32>
 800142c:	e028      	b.n	8001480 <forward_conv2d_nl_pool+0x29c>
 800142e:	45a6      	cmp	lr, r4
 8001430:	d112      	bne.n	8001458 <forward_conv2d_nl_pool+0x274>
 8001432:	9309      	str	r3, [sp, #36]	; 0x24
 8001434:	9108      	str	r1, [sp, #32]
 8001436:	9000      	str	r0, [sp, #0]
 8001438:	f8cd c01c 	str.w	ip, [sp, #28]
 800143c:	9704      	str	r7, [sp, #16]
 800143e:	9603      	str	r6, [sp, #12]
 8001440:	9502      	str	r5, [sp, #8]
 8001442:	9401      	str	r4, [sp, #4]
 8001444:	2000      	movs	r0, #0
 8001446:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8001448:	991e      	ldr	r1, [sp, #120]	; 0x78
 800144a:	9305      	str	r3, [sp, #20]
 800144c:	9106      	str	r1, [sp, #24]
 800144e:	4641      	mov	r1, r8
 8001450:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001452:	f7ff faa5 	bl	80009a0 <ai_conv2d_kernel_depthwise_f32>
 8001456:	e013      	b.n	8001480 <forward_conv2d_nl_pool+0x29c>
 8001458:	9109      	str	r1, [sp, #36]	; 0x24
 800145a:	930a      	str	r3, [sp, #40]	; 0x28
 800145c:	9000      	str	r0, [sp, #0]
 800145e:	f8cd c020 	str.w	ip, [sp, #32]
 8001462:	9704      	str	r7, [sp, #16]
 8001464:	9603      	str	r6, [sp, #12]
 8001466:	9502      	str	r5, [sp, #8]
 8001468:	9401      	str	r4, [sp, #4]
 800146a:	2000      	movs	r0, #0
 800146c:	991e      	ldr	r1, [sp, #120]	; 0x78
 800146e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001470:	9107      	str	r1, [sp, #28]
 8001472:	9306      	str	r3, [sp, #24]
 8001474:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001476:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001478:	9105      	str	r1, [sp, #20]
 800147a:	4641      	mov	r1, r8
 800147c:	f7ff fb32 	bl	8000ae4 <ai_conv2d_kernel_group_f32>
 8001480:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001482:	462a      	mov	r2, r5
 8001484:	4641      	mov	r1, r8
 8001486:	4640      	mov	r0, r8
 8001488:	4798      	blx	r3
 800148a:	9820      	ldr	r0, [sp, #128]	; 0x80
 800148c:	f8dd c058 	ldr.w	ip, [sp, #88]	; 0x58
 8001490:	f109 0901 	add.w	r9, r9, #1
 8001494:	4548      	cmp	r0, r9
 8001496:	bf18      	it	ne
 8001498:	2000      	movne	r0, #0
 800149a:	9000      	str	r0, [sp, #0]
 800149c:	462b      	mov	r3, r5
 800149e:	9829      	ldr	r0, [sp, #164]	; 0xa4
 80014a0:	462a      	mov	r2, r5
 80014a2:	4641      	mov	r1, r8
 80014a4:	47e0      	blx	ip
 80014a6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80014a8:	f8dd 8054 	ldr.w	r8, [sp, #84]	; 0x54
 80014ac:	f1bb 0b01 	subs.w	fp, fp, #1
 80014b0:	4482      	add	sl, r0
 80014b2:	d189      	bne.n	80013c8 <forward_conv2d_nl_pool+0x1e4>
 80014b4:	9811      	ldr	r0, [sp, #68]	; 0x44
 80014b6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80014b8:	f8dd b098 	ldr.w	fp, [sp, #152]	; 0x98
 80014bc:	f8dd e0a4 	ldr.w	lr, [sp, #164]	; 0xa4
 80014c0:	f8dd a080 	ldr.w	sl, [sp, #128]	; 0x80
 80014c4:	9404      	str	r4, [sp, #16]
 80014c6:	9503      	str	r5, [sp, #12]
 80014c8:	9602      	str	r6, [sp, #8]
 80014ca:	9700      	str	r7, [sp, #0]
 80014cc:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80014ce:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 80014d0:	189a      	adds	r2, r3, r2
 80014d2:	9212      	str	r2, [sp, #72]	; 0x48
 80014d4:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 80014d6:	1e52      	subs	r2, r2, #1
 80014d8:	921f      	str	r2, [sp, #124]	; 0x7c
 80014da:	f47f af49 	bne.w	8001370 <forward_conv2d_nl_pool+0x18c>
 80014de:	9011      	str	r0, [sp, #68]	; 0x44
 80014e0:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
 80014e2:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80014e4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80014e6:	1818      	adds	r0, r3, r0
 80014e8:	9013      	str	r0, [sp, #76]	; 0x4c
 80014ea:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80014ec:	9818      	ldr	r0, [sp, #96]	; 0x60
 80014ee:	1e5b      	subs	r3, r3, #1
 80014f0:	4486      	add	lr, r0
 80014f2:	9322      	str	r3, [sp, #136]	; 0x88
 80014f4:	f47f af16 	bne.w	8001324 <forward_conv2d_nl_pool+0x140>
 80014f8:	f8dd c0ac 	ldr.w	ip, [sp, #172]	; 0xac
 80014fc:	9c25      	ldr	r4, [sp, #148]	; 0x94
 80014fe:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8001500:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8001502:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001504:	18eb      	adds	r3, r5, r3
 8001506:	1e76      	subs	r6, r6, #1
 8001508:	9314      	str	r3, [sp, #80]	; 0x50
 800150a:	9624      	str	r6, [sp, #144]	; 0x90
 800150c:	f47f aeef 	bne.w	80012ee <forward_conv2d_nl_pool+0x10a>
 8001510:	b035      	add	sp, #212	; 0xd4
 8001512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001518 <forward_dense>:
 8001518:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800151c:	b089      	sub	sp, #36	; 0x24
 800151e:	6940      	ldr	r0, [r0, #20]
 8001520:	6800      	ldr	r0, [r0, #0]
 8001522:	6801      	ldr	r1, [r0, #0]
 8001524:	6842      	ldr	r2, [r0, #4]
 8001526:	6880      	ldr	r0, [r0, #8]
 8001528:	f8d0 8000 	ldr.w	r8, [r0]
 800152c:	6844      	ldr	r4, [r0, #4]
 800152e:	680e      	ldr	r6, [r1, #0]
 8001530:	f8d2 e000 	ldr.w	lr, [r2]
 8001534:	f8de 000c 	ldr.w	r0, [lr, #12]
 8001538:	f8de 2010 	ldr.w	r2, [lr, #16]
 800153c:	68b5      	ldr	r5, [r6, #8]
 800153e:	f8de 1008 	ldr.w	r1, [lr, #8]
 8001542:	4350      	muls	r0, r2
 8001544:	f8d8 2000 	ldr.w	r2, [r8]
 8001548:	6813      	ldr	r3, [r2, #0]
 800154a:	ea4f 5a53 	mov.w	sl, r3, lsr #21
 800154e:	f3c3 19c6 	ubfx	r9, r3, #7, #7
 8001552:	f00a 0a03 	and.w	sl, sl, #3
 8001556:	0c5b      	lsrs	r3, r3, #17
 8001558:	2700      	movs	r7, #0
 800155a:	fa29 f90a 	lsr.w	r9, r9, sl
 800155e:	f003 030f 	and.w	r3, r3, #15
 8001562:	f8cd 9004 	str.w	r9, [sp, #4]
 8001566:	2b04      	cmp	r3, #4
 8001568:	6836      	ldr	r6, [r6, #0]
 800156a:	bf14      	ite	ne
 800156c:	2b08      	cmpne	r3, #8
 800156e:	68d7      	ldreq	r7, [r2, #12]
 8001570:	f8de 2000 	ldr.w	r2, [lr]
 8001574:	f8d8 3018 	ldr.w	r3, [r8, #24]
 8001578:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800157c:	68b2      	ldr	r2, [r6, #8]
 800157e:	2800      	cmp	r0, #0
 8001580:	eb09 0681 	add.w	r6, r9, r1, lsl #2
 8001584:	d066      	beq.n	8001654 <forward_dense+0x13c>
 8001586:	f8cd 801c 	str.w	r8, [sp, #28]
 800158a:	9405      	str	r4, [sp, #20]
 800158c:	9106      	str	r1, [sp, #24]
 800158e:	9704      	str	r7, [sp, #16]
 8001590:	9600      	str	r6, [sp, #0]
 8001592:	9003      	str	r0, [sp, #12]
 8001594:	9807      	ldr	r0, [sp, #28]
 8001596:	6801      	ldr	r1, [r0, #0]
 8001598:	6888      	ldr	r0, [r1, #8]
 800159a:	9905      	ldr	r1, [sp, #20]
 800159c:	b109      	cbz	r1, 80015a2 <forward_dense+0x8a>
 800159e:	680c      	ldr	r4, [r1, #0]
 80015a0:	68a1      	ldr	r1, [r4, #8]
 80015a2:	9c04      	ldr	r4, [sp, #16]
 80015a4:	2c00      	cmp	r4, #0
 80015a6:	9c00      	ldr	r4, [sp, #0]
 80015a8:	d110      	bne.n	80015cc <forward_dense+0xb4>
 80015aa:	45a1      	cmp	r9, r4
 80015ac:	d247      	bcs.n	800163e <forward_dense+0x126>
 80015ae:	46a2      	mov	sl, r4
 80015b0:	462e      	mov	r6, r5
 80015b2:	464f      	mov	r7, r9
 80015b4:	461c      	mov	r4, r3
 80015b6:	4690      	mov	r8, r2
 80015b8:	4681      	mov	r9, r0
 80015ba:	460d      	mov	r5, r1
 80015bc:	2d00      	cmp	r5, #0
 80015be:	bf19      	ittee	ne
 80015c0:	f855 0b04 	ldrne.w	r0, [r5], #4
 80015c4:	9002      	strne	r0, [sp, #8]
 80015c6:	2100      	moveq	r1, #0
 80015c8:	9102      	streq	r1, [sp, #8]
 80015ca:	e028      	b.n	800161e <forward_dense+0x106>
 80015cc:	45a1      	cmp	r9, r4
 80015ce:	d236      	bcs.n	800163e <forward_dense+0x126>
 80015d0:	9c04      	ldr	r4, [sp, #16]
 80015d2:	9f00      	ldr	r7, [sp, #0]
 80015d4:	4698      	mov	r8, r3
 80015d6:	4616      	mov	r6, r2
 80015d8:	4682      	mov	sl, r0
 80015da:	468b      	mov	fp, r1
 80015dc:	f1bb 0f00 	cmp.w	fp, #0
 80015e0:	bf19      	ittee	ne
 80015e2:	f85b 0b04 	ldrne.w	r0, [fp], #4
 80015e6:	9002      	strne	r0, [sp, #8]
 80015e8:	2000      	moveq	r0, #0
 80015ea:	9002      	streq	r0, [sp, #8]
 80015ec:	9901      	ldr	r1, [sp, #4]
 80015ee:	9500      	str	r5, [sp, #0]
 80015f0:	2904      	cmp	r1, #4
 80015f2:	4633      	mov	r3, r6
 80015f4:	4622      	mov	r2, r4
 80015f6:	4651      	mov	r1, sl
 80015f8:	a802      	add	r0, sp, #8
 80015fa:	d103      	bne.n	8001604 <forward_dense+0xec>
 80015fc:	f7ff fcf0 	bl	8000fe0 <ai_dict4_dot_array_f32>
 8001600:	e002      	b.n	8001608 <forward_dense+0xf0>
 8001602:	bf00      	nop
 8001604:	f7ff fb80 	bl	8000d08 <ai_dict8_dot_array_f32>
 8001608:	9802      	ldr	r0, [sp, #8]
 800160a:	f849 0b04 	str.w	r0, [r9], #4
 800160e:	45b9      	cmp	r9, r7
 8001610:	44c2      	add	sl, r8
 8001612:	d3e3      	bcc.n	80015dc <forward_dense+0xc4>
 8001614:	9404      	str	r4, [sp, #16]
 8001616:	4643      	mov	r3, r8
 8001618:	4632      	mov	r2, r6
 800161a:	9700      	str	r7, [sp, #0]
 800161c:	e00f      	b.n	800163e <forward_dense+0x126>
 800161e:	4633      	mov	r3, r6
 8001620:	4642      	mov	r2, r8
 8001622:	4649      	mov	r1, r9
 8001624:	a802      	add	r0, sp, #8
 8001626:	f000 fff5 	bl	8002614 <ai_math_dot_array>
 800162a:	9802      	ldr	r0, [sp, #8]
 800162c:	f847 0b04 	str.w	r0, [r7], #4
 8001630:	4557      	cmp	r7, sl
 8001632:	44a1      	add	r9, r4
 8001634:	d3c2      	bcc.n	80015bc <forward_dense+0xa4>
 8001636:	4635      	mov	r5, r6
 8001638:	4623      	mov	r3, r4
 800163a:	46b9      	mov	r9, r7
 800163c:	4642      	mov	r2, r8
 800163e:	9800      	ldr	r0, [sp, #0]
 8001640:	9906      	ldr	r1, [sp, #24]
 8001642:	eb00 0481 	add.w	r4, r0, r1, lsl #2
 8001646:	9803      	ldr	r0, [sp, #12]
 8001648:	9400      	str	r4, [sp, #0]
 800164a:	1e40      	subs	r0, r0, #1
 800164c:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8001650:	9003      	str	r0, [sp, #12]
 8001652:	d19f      	bne.n	8001594 <forward_dense+0x7c>
 8001654:	b009      	add	sp, #36	; 0x24
 8001656:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800165c <arm_mat_gemm_f32>:
 800165c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001660:	b08a      	sub	sp, #40	; 0x28
 8001662:	4615      	mov	r5, r2
 8001664:	468b      	mov	fp, r1
 8001666:	469a      	mov	sl, r3
 8001668:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800166a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800166e:	6869      	ldr	r1, [r5, #4]
 8001670:	9100      	str	r1, [sp, #0]
 8001672:	685c      	ldr	r4, [r3, #4]
 8001674:	9402      	str	r4, [sp, #8]
 8001676:	f8b3 9000 	ldrh.w	r9, [r3]
 800167a:	8804      	ldrh	r4, [r0, #0]
 800167c:	885e      	ldrh	r6, [r3, #2]
 800167e:	8840      	ldrh	r0, [r0, #2]
 8001680:	f8bb 1000 	ldrh.w	r1, [fp]
 8001684:	f8bb 2002 	ldrh.w	r2, [fp, #2]
 8001688:	f8b5 e000 	ldrh.w	lr, [r5]
 800168c:	886f      	ldrh	r7, [r5, #2]
 800168e:	f8db 3004 	ldr.w	r3, [fp, #4]
 8001692:	9305      	str	r3, [sp, #20]
 8001694:	9304      	str	r3, [sp, #16]
 8001696:	2500      	movs	r5, #0
 8001698:	fa4f f38a 	sxtb.w	r3, sl
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf0c      	ite	eq
 80016a0:	46a0      	moveq	r8, r4
 80016a2:	4680      	movne	r8, r0
 80016a4:	2f01      	cmp	r7, #1
 80016a6:	bf0c      	ite	eq
 80016a8:	2300      	moveq	r3, #0
 80016aa:	2304      	movne	r3, #4
 80016ac:	f1be 0f01 	cmp.w	lr, #1
 80016b0:	d104      	bne.n	80016bc <arm_mat_gemm_f32+0x60>
 80016b2:	2f01      	cmp	r7, #1
 80016b4:	d007      	beq.n	80016c6 <arm_mat_gemm_f32+0x6a>
 80016b6:	f1c6 0e00 	rsb	lr, r6, #0
 80016ba:	e005      	b.n	80016c8 <arm_mat_gemm_f32+0x6c>
 80016bc:	2f01      	cmp	r7, #1
 80016be:	bf08      	it	eq
 80016c0:	f04f 0e01 	moveq.w	lr, #1
 80016c4:	d000      	beq.n	80016c8 <arm_mat_gemm_f32+0x6c>
 80016c6:	46ae      	mov	lr, r5
 80016c8:	fa0f f78e 	sxth.w	r7, lr
 80016cc:	9701      	str	r7, [sp, #4]
 80016ce:	fa4f f78a 	sxtb.w	r7, sl
 80016d2:	2f00      	cmp	r7, #0
 80016d4:	bf0c      	ite	eq
 80016d6:	46a3      	moveq	fp, r4
 80016d8:	4683      	movne	fp, r0
 80016da:	45cb      	cmp	fp, r9
 80016dc:	d115      	bne.n	800170a <arm_mat_gemm_f32+0xae>
 80016de:	f99d e04c 	ldrsb.w	lr, [sp, #76]	; 0x4c
 80016e2:	f1be 0f00 	cmp.w	lr, #0
 80016e6:	bf0c      	ite	eq
 80016e8:	4691      	moveq	r9, r2
 80016ea:	4689      	movne	r9, r1
 80016ec:	45b1      	cmp	r9, r6
 80016ee:	d10c      	bne.n	800170a <arm_mat_gemm_f32+0xae>
 80016f0:	fa4f f68a 	sxtb.w	r6, sl
 80016f4:	2e00      	cmp	r6, #0
 80016f6:	bf0c      	ite	eq
 80016f8:	4683      	moveq	fp, r0
 80016fa:	46a3      	movne	fp, r4
 80016fc:	f1be 0f00 	cmp.w	lr, #0
 8001700:	bf0c      	ite	eq
 8001702:	460e      	moveq	r6, r1
 8001704:	4616      	movne	r6, r2
 8001706:	45b3      	cmp	fp, r6
 8001708:	d06c      	beq.n	80017e4 <arm_mat_gemm_f32+0x188>
 800170a:	f06f 0002 	mvn.w	r0, #2
 800170e:	b00a      	add	sp, #40	; 0x28
 8001710:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001714:	9d05      	ldr	r5, [sp, #20]
 8001716:	0097      	lsls	r7, r2, #2
 8001718:	9708      	str	r7, [sp, #32]
 800171a:	0086      	lsls	r6, r0, #2
 800171c:	9607      	str	r6, [sp, #28]
 800171e:	f8cd c018 	str.w	ip, [sp, #24]
 8001722:	f8ad 4002 	strh.w	r4, [sp, #2]
 8001726:	4644      	mov	r4, r8
 8001728:	f8dd c010 	ldr.w	ip, [sp, #16]
 800172c:	fa4f f68a 	sxtb.w	r6, sl
 8001730:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8001734:	2e00      	cmp	r6, #0
 8001736:	ed9f 1a34 	vldr	s2, [pc, #208]	; 8001808 <.text_16>
 800173a:	bf0c      	ite	eq
 800173c:	4606      	moveq	r6, r0
 800173e:	f8bd 6002 	ldrhne.w	r6, [sp, #2]
 8001742:	b1b6      	cbz	r6, 8001772 <arm_mat_gemm_f32+0x116>
 8001744:	fa4f f78a 	sxtb.w	r7, sl
 8001748:	2f00      	cmp	r7, #0
 800174a:	bf0c      	ite	eq
 800174c:	2704      	moveq	r7, #4
 800174e:	9f07      	ldrne	r7, [sp, #28]
 8001750:	f1be 0f00 	cmp.w	lr, #0
 8001754:	edd8 1a00 	vldr	s3, [r8]
 8001758:	ed95 2a00 	vldr	s4, [r5]
 800175c:	44b8      	add	r8, r7
 800175e:	bf0c      	ite	eq
 8001760:	9f08      	ldreq	r7, [sp, #32]
 8001762:	2704      	movne	r7, #4
 8001764:	19ed      	adds	r5, r5, r7
 8001766:	1e76      	subs	r6, r6, #1
 8001768:	b2b7      	uxth	r7, r6
 800176a:	2f00      	cmp	r7, #0
 800176c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001770:	d1e8      	bne.n	8001744 <arm_mat_gemm_f32+0xe8>
 8001772:	ee20 1a01 	vmul.f32	s2, s0, s2
 8001776:	eddb 1a00 	vldr	s3, [fp]
 800177a:	1e64      	subs	r4, r4, #1
 800177c:	ee00 1aa1 	vmla.f32	s2, s1, s3
 8001780:	b2a4      	uxth	r4, r4
 8001782:	f1be 0f00 	cmp.w	lr, #0
 8001786:	ed89 1a00 	vstr	s2, [r9]
 800178a:	bf0e      	itee	eq
 800178c:	1b15      	subeq	r5, r2, r4
 800178e:	1b0d      	subne	r5, r1, r4
 8001790:	4355      	mulne	r5, r2
 8001792:	2c00      	cmp	r4, #0
 8001794:	f109 0904 	add.w	r9, r9, #4
 8001798:	449b      	add	fp, r3
 800179a:	eb0c 0585 	add.w	r5, ip, r5, lsl #2
 800179e:	d1c5      	bne.n	800172c <arm_mat_gemm_f32+0xd0>
 80017a0:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80017a4:	9d06      	ldr	r5, [sp, #24]
 80017a6:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 80017aa:	f8cd c010 	str.w	ip, [sp, #16]
 80017ae:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80017b0:	444e      	add	r6, r9
 80017b2:	9603      	str	r6, [sp, #12]
 80017b4:	fa4f f68a 	sxtb.w	r6, sl
 80017b8:	2e00      	cmp	r6, #0
 80017ba:	bf0c      	ite	eq
 80017bc:	ea4f 0c80 	moveq.w	ip, r0, lsl #2
 80017c0:	f04f 0c04 	movne.w	ip, #4
 80017c4:	44ac      	add	ip, r5
 80017c6:	9d01      	ldr	r5, [sp, #4]
 80017c8:	eb0b 0b85 	add.w	fp, fp, r5, lsl #2
 80017cc:	f8bd 5000 	ldrh.w	r5, [sp]
 80017d0:	1e6e      	subs	r6, r5, #1
 80017d2:	f8ad 6000 	strh.w	r6, [sp]
 80017d6:	f8bd 5000 	ldrh.w	r5, [sp]
 80017da:	b955      	cbnz	r5, 80017f2 <arm_mat_gemm_f32+0x196>
 80017dc:	2000      	movs	r0, #0
 80017de:	b00a      	add	sp, #40	; 0x28
 80017e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80017e4:	f8dd b000 	ldr.w	fp, [sp]
 80017e8:	9503      	str	r5, [sp, #12]
 80017ea:	f8ad 8000 	strh.w	r8, [sp]
 80017ee:	f8cd 9024 	str.w	r9, [sp, #36]	; 0x24
 80017f2:	ae03      	add	r6, sp, #12
 80017f4:	9d02      	ldr	r5, [sp, #8]
 80017f6:	8836      	ldrh	r6, [r6, #0]
 80017f8:	f1be 0f00 	cmp.w	lr, #0
 80017fc:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 8001800:	bf0c      	ite	eq
 8001802:	4690      	moveq	r8, r2
 8001804:	4688      	movne	r8, r1
 8001806:	e785      	b.n	8001714 <arm_mat_gemm_f32+0xb8>

08001808 <.text_16>:
 8001808:	00000000 	.word	0x00000000

0800180c <.text_17>:
 800180c:	08000d05 	.word	0x08000d05

08001810 <forward_gemm>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	b08b      	sub	sp, #44	; 0x2c
 8001814:	6941      	ldr	r1, [r0, #20]
 8001816:	6809      	ldr	r1, [r1, #0]
 8001818:	680a      	ldr	r2, [r1, #0]
 800181a:	6849      	ldr	r1, [r1, #4]
 800181c:	6809      	ldr	r1, [r1, #0]
 800181e:	680d      	ldr	r5, [r1, #0]
 8001820:	6814      	ldr	r4, [r2, #0]
 8001822:	6853      	ldr	r3, [r2, #4]
 8001824:	6892      	ldr	r2, [r2, #8]
 8001826:	68ad      	ldr	r5, [r5, #8]
 8001828:	68ce      	ldr	r6, [r1, #12]
 800182a:	690f      	ldr	r7, [r1, #16]
 800182c:	9509      	str	r5, [sp, #36]	; 0x24
 800182e:	f8ad 7020 	strh.w	r7, [sp, #32]
 8001832:	f8ad 6022 	strh.w	r6, [sp, #34]	; 0x22
 8001836:	6825      	ldr	r5, [r4, #0]
 8001838:	68e6      	ldr	r6, [r4, #12]
 800183a:	68ad      	ldr	r5, [r5, #8]
 800183c:	6924      	ldr	r4, [r4, #16]
 800183e:	f8ad 4018 	strh.w	r4, [sp, #24]
 8001842:	f8ad 601a 	strh.w	r6, [sp, #26]
 8001846:	9507      	str	r5, [sp, #28]
 8001848:	681c      	ldr	r4, [r3, #0]
 800184a:	68dd      	ldr	r5, [r3, #12]
 800184c:	68a4      	ldr	r4, [r4, #8]
 800184e:	691b      	ldr	r3, [r3, #16]
 8001850:	f8ad 3010 	strh.w	r3, [sp, #16]
 8001854:	f8ad 5012 	strh.w	r5, [sp, #18]
 8001858:	9405      	str	r4, [sp, #20]
 800185a:	6813      	ldr	r3, [r2, #0]
 800185c:	68d4      	ldr	r4, [r2, #12]
 800185e:	689b      	ldr	r3, [r3, #8]
 8001860:	6912      	ldr	r2, [r2, #16]
 8001862:	f8ad 2008 	strh.w	r2, [sp, #8]
 8001866:	f8ad 400a 	strh.w	r4, [sp, #10]
 800186a:	aa08      	add	r2, sp, #32
 800186c:	9303      	str	r3, [sp, #12]
 800186e:	9201      	str	r2, [sp, #4]
 8001870:	aa02      	add	r2, sp, #8
 8001872:	f990 1021 	ldrsb.w	r1, [r0, #33]	; 0x21
 8001876:	9100      	str	r1, [sp, #0]
 8001878:	a904      	add	r1, sp, #16
 800187a:	f990 3020 	ldrsb.w	r3, [r0, #32]
 800187e:	edd0 0a07 	vldr	s1, [r0, #28]
 8001882:	ed90 0a06 	vldr	s0, [r0, #24]
 8001886:	a806      	add	r0, sp, #24
 8001888:	f7ff fee8 	bl	800165c <arm_mat_gemm_f32>
 800188c:	b00b      	add	sp, #44	; 0x2c
 800188e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001890 <nl_func_sm_channel_f32>:
 8001890:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001894:	460f      	mov	r7, r1
 8001896:	4614      	mov	r4, r2
 8001898:	ed2d 8b02 	vpush	{d8}
 800189c:	2c02      	cmp	r4, #2
 800189e:	4606      	mov	r6, r0
 80018a0:	ed97 8a00 	vldr	s16, [r7]
 80018a4:	eddf 8ac3 	vldr	s17, [pc, #780]	; 8001bb4 <.text_11>
 80018a8:	d33d      	bcc.n	8001926 <nl_func_sm_channel_f32+0x96>
 80018aa:	1e61      	subs	r1, r4, #1
 80018ac:	1d3a      	adds	r2, r7, #4
 80018ae:	f011 0003 	ands.w	r0, r1, #3
 80018b2:	d00c      	beq.n	80018ce <nl_func_sm_channel_f32+0x3e>
 80018b4:	ed92 0a00 	vldr	s0, [r2]
 80018b8:	eeb4 0a48 	vcmp.f32	s0, s16
 80018bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c0:	bf58      	it	pl
 80018c2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018c6:	1e40      	subs	r0, r0, #1
 80018c8:	f102 0204 	add.w	r2, r2, #4
 80018cc:	d1f2      	bne.n	80018b4 <nl_func_sm_channel_f32+0x24>
 80018ce:	0889      	lsrs	r1, r1, #2
 80018d0:	f000 802b 	beq.w	800192a <nl_func_sm_channel_f32+0x9a>
 80018d4:	ed92 0a00 	vldr	s0, [r2]
 80018d8:	eeb4 0a48 	vcmp.f32	s0, s16
 80018dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e0:	bf58      	it	pl
 80018e2:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018e6:	ed92 0a01 	vldr	s0, [r2, #4]
 80018ea:	eeb4 0a48 	vcmp.f32	s0, s16
 80018ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018f2:	bf58      	it	pl
 80018f4:	eeb0 8a40 	vmovpl.f32	s16, s0
 80018f8:	ed92 0a02 	vldr	s0, [r2, #8]
 80018fc:	eeb4 0a48 	vcmp.f32	s0, s16
 8001900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001904:	bf58      	it	pl
 8001906:	eeb0 8a40 	vmovpl.f32	s16, s0
 800190a:	ed92 0a03 	vldr	s0, [r2, #12]
 800190e:	eeb4 0a48 	vcmp.f32	s0, s16
 8001912:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001916:	bf58      	it	pl
 8001918:	eeb0 8a40 	vmovpl.f32	s16, s0
 800191c:	1e49      	subs	r1, r1, #1
 800191e:	f102 0210 	add.w	r2, r2, #16
 8001922:	d1d7      	bne.n	80018d4 <nl_func_sm_channel_f32+0x44>
 8001924:	e001      	b.n	800192a <nl_func_sm_channel_f32+0x9a>
 8001926:	2c00      	cmp	r4, #0
 8001928:	d040      	beq.n	80019ac <nl_func_sm_channel_f32+0x11c>
 800192a:	46b0      	mov	r8, r6
 800192c:	ea4f 0504 	mov.w	r5, r4
 8001930:	ed97 0a00 	vldr	s0, [r7]
 8001934:	ee30 0a48 	vsub.f32	s0, s0, s16
 8001938:	f008 f8a2 	bl	8009a80 <expf>
 800193c:	1d3f      	adds	r7, r7, #4
 800193e:	ed88 0a00 	vstr	s0, [r8]
 8001942:	1e6d      	subs	r5, r5, #1
 8001944:	ee78 8a80 	vadd.f32	s17, s17, s0
 8001948:	f108 0804 	add.w	r8, r8, #4
 800194c:	d1f0      	bne.n	8001930 <nl_func_sm_channel_f32+0xa0>
 800194e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001952:	f014 0003 	ands.w	r0, r4, #3
 8001956:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800195a:	d009      	beq.n	8001970 <nl_func_sm_channel_f32+0xe0>
 800195c:	edd6 0a00 	vldr	s1, [r6]
 8001960:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001964:	edc6 0a00 	vstr	s1, [r6]
 8001968:	1e40      	subs	r0, r0, #1
 800196a:	f106 0604 	add.w	r6, r6, #4
 800196e:	d1f5      	bne.n	800195c <nl_func_sm_channel_f32+0xcc>
 8001970:	08a4      	lsrs	r4, r4, #2
 8001972:	d01b      	beq.n	80019ac <nl_func_sm_channel_f32+0x11c>
 8001974:	edd6 0a00 	vldr	s1, [r6]
 8001978:	ee60 0a80 	vmul.f32	s1, s1, s0
 800197c:	edc6 0a00 	vstr	s1, [r6]
 8001980:	1e64      	subs	r4, r4, #1
 8001982:	ed96 1a01 	vldr	s2, [r6, #4]
 8001986:	edd6 0a02 	vldr	s1, [r6, #8]
 800198a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800198e:	ed86 1a01 	vstr	s2, [r6, #4]
 8001992:	ee60 0a80 	vmul.f32	s1, s1, s0
 8001996:	ed96 1a03 	vldr	s2, [r6, #12]
 800199a:	edc6 0a02 	vstr	s1, [r6, #8]
 800199e:	ee21 1a00 	vmul.f32	s2, s2, s0
 80019a2:	ed86 1a03 	vstr	s2, [r6, #12]
 80019a6:	f106 0610 	add.w	r6, r6, #16
 80019aa:	d1e3      	bne.n	8001974 <nl_func_sm_channel_f32+0xe4>
 80019ac:	ecbd 8b02 	vpop	{d8}
 80019b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080019b4 <nl_func_sm_array_f32>:
 80019b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80019b8:	b081      	sub	sp, #4
 80019ba:	460c      	mov	r4, r1
 80019bc:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 80019c0:	9e08      	ldr	r6, [sp, #32]
 80019c2:	9f09      	ldr	r7, [sp, #36]	; 0x24
 80019c4:	454c      	cmp	r4, r9
 80019c6:	4680      	mov	r8, r0
 80019c8:	461d      	mov	r5, r3
 80019ca:	d20a      	bcs.n	80019e2 <nl_func_sm_array_f32+0x2e>
 80019cc:	462a      	mov	r2, r5
 80019ce:	4621      	mov	r1, r4
 80019d0:	4640      	mov	r0, r8
 80019d2:	f7ff ff5d 	bl	8001890 <nl_func_sm_channel_f32>
 80019d6:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 80019da:	454c      	cmp	r4, r9
 80019dc:	eb08 0887 	add.w	r8, r8, r7, lsl #2
 80019e0:	d3f4      	bcc.n	80019cc <nl_func_sm_array_f32+0x18>
 80019e2:	b001      	add	sp, #4
 80019e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

080019e8 <nl_func_tanh_array_f32>:
 80019e8:	b570      	push	{r4, r5, r6, lr}
 80019ea:	460d      	mov	r5, r1
 80019ec:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 80019f0:	42b5      	cmp	r5, r6
 80019f2:	4604      	mov	r4, r0
 80019f4:	f080 800a 	bcs.w	8001a0c <nl_func_tanh_array_f32+0x24>
 80019f8:	ed95 0a00 	vldr	s0, [r5]
 80019fc:	f007 ffee 	bl	80099dc <tanhf>
 8001a00:	ed84 0a00 	vstr	s0, [r4]
 8001a04:	1d24      	adds	r4, r4, #4
 8001a06:	1d2d      	adds	r5, r5, #4
 8001a08:	42b5      	cmp	r5, r6
 8001a0a:	d3f5      	bcc.n	80019f8 <nl_func_tanh_array_f32+0x10>
 8001a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a10 <nl_func_sigmoid_array_f32>:
 8001a10:	b570      	push	{r4, r5, r6, lr}
 8001a12:	460d      	mov	r5, r1
 8001a14:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001a18:	42b5      	cmp	r5, r6
 8001a1a:	4604      	mov	r4, r0
 8001a1c:	f080 8014 	bcs.w	8001a48 <nl_func_sigmoid_array_f32+0x38>
 8001a20:	ed95 0a00 	vldr	s0, [r5]
 8001a24:	eeb1 0a40 	vneg.f32	s0, s0
 8001a28:	f008 f82a 	bl	8009a80 <expf>
 8001a2c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001a30:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001a34:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001a38:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001a3c:	ed84 0a00 	vstr	s0, [r4]
 8001a40:	1d24      	adds	r4, r4, #4
 8001a42:	1d2d      	adds	r5, r5, #4
 8001a44:	42b5      	cmp	r5, r6
 8001a46:	d3eb      	bcc.n	8001a20 <nl_func_sigmoid_array_f32+0x10>
 8001a48:	bd70      	pop	{r4, r5, r6, pc}
	...

08001a4c <nl_func_sign_array_f32>:
 8001a4c:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001a50:	4291      	cmp	r1, r2
 8001a52:	d216      	bcs.n	8001a82 <nl_func_sign_array_f32+0x36>
 8001a54:	f04f 33ff 	mov.w	r3, #4294967295
 8001a58:	ed91 0a00 	vldr	s0, [r1]
 8001a5c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001a60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a64:	bfcc      	ite	gt
 8001a66:	ed9f 0ac6 	vldrgt	s0, [pc, #792]	; 8001d80 <.text_16>
 8001a6a:	ee00 3a10 	vmovle	s0, r3
 8001a6e:	1d09      	adds	r1, r1, #4
 8001a70:	4684      	mov	ip, r0
 8001a72:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001a76:	4291      	cmp	r1, r2
 8001a78:	f10c 0004 	add.w	r0, ip, #4
 8001a7c:	ed8c 0a00 	vstr	s0, [ip]
 8001a80:	d3ea      	bcc.n	8001a58 <nl_func_sign_array_f32+0xc>
 8001a82:	4770      	bx	lr

08001a84 <nl_func_clip_array_f32>:
 8001a84:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001a88:	4291      	cmp	r1, r2
 8001a8a:	d216      	bcs.n	8001aba <nl_func_clip_array_f32+0x36>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	ed91 1a00 	vldr	s2, [r1]
 8001a92:	1d18      	adds	r0, r3, #4
 8001a94:	eeb4 0a41 	vcmp.f32	s0, s2
 8001a98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a9c:	bf58      	it	pl
 8001a9e:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001aa2:	eeb4 1a60 	vcmp.f32	s2, s1
 8001aa6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001aaa:	bf58      	it	pl
 8001aac:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001ab0:	1d09      	adds	r1, r1, #4
 8001ab2:	4291      	cmp	r1, r2
 8001ab4:	ed83 1a00 	vstr	s2, [r3]
 8001ab8:	d3e8      	bcc.n	8001a8c <nl_func_clip_array_f32+0x8>
 8001aba:	4770      	bx	lr

08001abc <nl_func_relu_array_f32>:
 8001abc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001ac0:	4291      	cmp	r1, r2
 8001ac2:	d20f      	bcs.n	8001ae4 <nl_func_relu_array_f32+0x28>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	ed91 0a00 	vldr	s0, [r1]
 8001aca:	1d18      	adds	r0, r3, #4
 8001acc:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001ad0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ad4:	bfd8      	it	le
 8001ad6:	ed9f 0a37 	vldrle	s0, [pc, #220]	; 8001bb4 <.text_11>
 8001ada:	1d09      	adds	r1, r1, #4
 8001adc:	4291      	cmp	r1, r2
 8001ade:	ed83 0a00 	vstr	s0, [r3]
 8001ae2:	d3ef      	bcc.n	8001ac4 <nl_func_relu_array_f32+0x8>
 8001ae4:	4770      	bx	lr
	...

08001ae8 <nl_func_relu6_array_f32>:
 8001ae8:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001aec:	4291      	cmp	r1, r2
 8001aee:	d21a      	bcs.n	8001b26 <nl_func_relu6_array_f32+0x3e>
 8001af0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001af4:	4603      	mov	r3, r0
 8001af6:	edd1 0a00 	vldr	s1, [r1]
 8001afa:	1d18      	adds	r0, r3, #4
 8001afc:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001b00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b04:	dd08      	ble.n	8001b18 <nl_func_relu6_array_f32+0x30>
 8001b06:	eef4 0a40 	vcmp.f32	s1, s0
 8001b0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b0e:	bf58      	it	pl
 8001b10:	eef0 0a40 	vmovpl.f32	s1, s0
 8001b14:	e002      	b.n	8001b1c <nl_func_relu6_array_f32+0x34>
 8001b16:	bf00      	nop
 8001b18:	eddf 0a26 	vldr	s1, [pc, #152]	; 8001bb4 <.text_11>
 8001b1c:	1d09      	adds	r1, r1, #4
 8001b1e:	4291      	cmp	r1, r2
 8001b20:	edc3 0a00 	vstr	s1, [r3]
 8001b24:	d3e6      	bcc.n	8001af4 <nl_func_relu6_array_f32+0xc>
 8001b26:	4770      	bx	lr

08001b28 <nl_func_selu_array_f32>:
 8001b28:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001b2a:	b081      	sub	sp, #4
 8001b2c:	460d      	mov	r5, r1
 8001b2e:	eb05 0682 	add.w	r6, r5, r2, lsl #2
 8001b32:	ed2d 8b04 	vpush	{d8-d9}
 8001b36:	42b5      	cmp	r5, r6
 8001b38:	4604      	mov	r4, r0
 8001b3a:	eef0 8a40 	vmov.f32	s17, s0
 8001b3e:	eeb0 8a60 	vmov.f32	s16, s1
 8001b42:	d232      	bcs.n	8001baa <nl_func_selu_array_f32+0x82>
 8001b44:	4627      	mov	r7, r4
 8001b46:	ed95 9a00 	vldr	s18, [r5]
 8001b4a:	1d3c      	adds	r4, r7, #4
 8001b4c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001b50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b54:	bf4c      	ite	mi
 8001b56:	eddf 9a17 	vldrmi	s19, [pc, #92]	; 8001bb4 <.text_11>
 8001b5a:	eef0 9a49 	vmovpl.f32	s19, s18
 8001b5e:	eeb0 0a49 	vmov.f32	s0, s18
 8001b62:	f007 ff8d 	bl	8009a80 <expf>
 8001b66:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001b6a:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001b6e:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001b72:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001b76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b7a:	dd05      	ble.n	8001b88 <nl_func_selu_array_f32+0x60>
 8001b7c:	ed9f 1a0d 	vldr	s2, [pc, #52]	; 8001bb4 <.text_11>
 8001b80:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001b84:	e00a      	b.n	8001b9c <nl_func_selu_array_f32+0x74>
 8001b86:	bf00      	nop
 8001b88:	eeb0 0a49 	vmov.f32	s0, s18
 8001b8c:	f007 ff78 	bl	8009a80 <expf>
 8001b90:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001b94:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001b98:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001b9c:	1d2d      	adds	r5, r5, #4
 8001b9e:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001ba2:	42b5      	cmp	r5, r6
 8001ba4:	ed87 0a00 	vstr	s0, [r7]
 8001ba8:	d3cc      	bcc.n	8001b44 <nl_func_selu_array_f32+0x1c>
 8001baa:	ecbd 8b04 	vpop	{d8-d9}
 8001bae:	b001      	add	sp, #4
 8001bb0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001bb4 <.text_11>:
 8001bb4:	00000000 	.word	0x00000000

08001bb8 <nl_func_prelu_array_f32>:
 8001bb8:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001bbc:	4299      	cmp	r1, r3
 8001bbe:	d220      	bcs.n	8001c02 <nl_func_prelu_array_f32+0x4a>
 8001bc0:	ed91 0a00 	vldr	s0, [r1]
 8001bc4:	ed92 1a00 	vldr	s2, [r2]
 8001bc8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001bcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001bd0:	bf4c      	ite	mi
 8001bd2:	eddf 0aa5 	vldrmi	s1, [pc, #660]	; 8001e68 <.text_19>
 8001bd6:	eef0 0a40 	vmovpl.f32	s1, s0
 8001bda:	eeb1 0a40 	vneg.f32	s0, s0
 8001bde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001be6:	bf48      	it	mi
 8001be8:	ed9f 0a9f 	vldrmi	s0, [pc, #636]	; 8001e68 <.text_19>
 8001bec:	1d09      	adds	r1, r1, #4
 8001bee:	1d12      	adds	r2, r2, #4
 8001bf0:	4684      	mov	ip, r0
 8001bf2:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001bf6:	4299      	cmp	r1, r3
 8001bf8:	f10c 0004 	add.w	r0, ip, #4
 8001bfc:	edcc 0a00 	vstr	s1, [ip]
 8001c00:	d3de      	bcc.n	8001bc0 <nl_func_prelu_array_f32+0x8>
 8001c02:	4770      	bx	lr

08001c04 <forward_relu>:
 8001c04:	6940      	ldr	r0, [r0, #20]
 8001c06:	6803      	ldr	r3, [r0, #0]
 8001c08:	6819      	ldr	r1, [r3, #0]
 8001c0a:	f8d1 c000 	ldr.w	ip, [r1]
 8001c0e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001c12:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c16:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001c1a:	4342      	muls	r2, r0
 8001c1c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001c20:	f8dc c000 	ldr.w	ip, [ip]
 8001c24:	434a      	muls	r2, r1
 8001c26:	6859      	ldr	r1, [r3, #4]
 8001c28:	680b      	ldr	r3, [r1, #0]
 8001c2a:	4342      	muls	r2, r0
 8001c2c:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c30:	f8d3 c000 	ldr.w	ip, [r3]
 8001c34:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001c38:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001c3c:	4290      	cmp	r0, r2
 8001c3e:	d20f      	bcs.n	8001c60 <forward_relu+0x5c>
 8001c40:	460b      	mov	r3, r1
 8001c42:	ed90 0a00 	vldr	s0, [r0]
 8001c46:	1d19      	adds	r1, r3, #4
 8001c48:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c50:	bfd8      	it	le
 8001c52:	ed9f 0a85 	vldrle	s0, [pc, #532]	; 8001e68 <.text_19>
 8001c56:	1d00      	adds	r0, r0, #4
 8001c58:	4290      	cmp	r0, r2
 8001c5a:	ed83 0a00 	vstr	s0, [r3]
 8001c5e:	d3ef      	bcc.n	8001c40 <forward_relu+0x3c>
 8001c60:	4770      	bx	lr
	...

08001c64 <forward_relu6>:
 8001c64:	6940      	ldr	r0, [r0, #20]
 8001c66:	6803      	ldr	r3, [r0, #0]
 8001c68:	6819      	ldr	r1, [r3, #0]
 8001c6a:	f8d1 c000 	ldr.w	ip, [r1]
 8001c6e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001c72:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c76:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001c7a:	4342      	muls	r2, r0
 8001c7c:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001c80:	f8dc c000 	ldr.w	ip, [ip]
 8001c84:	434a      	muls	r2, r1
 8001c86:	6859      	ldr	r1, [r3, #4]
 8001c88:	680b      	ldr	r3, [r1, #0]
 8001c8a:	4342      	muls	r2, r0
 8001c8c:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001c90:	f8d3 c000 	ldr.w	ip, [r3]
 8001c94:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001c98:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001c9c:	4290      	cmp	r0, r2
 8001c9e:	d21a      	bcs.n	8001cd6 <forward_relu6+0x72>
 8001ca0:	eeb1 0a08 	vmov.f32	s0, #24	; 0x40c00000  6.0
 8001ca4:	460b      	mov	r3, r1
 8001ca6:	edd0 0a00 	vldr	s1, [r0]
 8001caa:	1d19      	adds	r1, r3, #4
 8001cac:	eef5 0a40 	vcmp.f32	s1, #0.0
 8001cb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cb4:	dd08      	ble.n	8001cc8 <forward_relu6+0x64>
 8001cb6:	eef4 0a40 	vcmp.f32	s1, s0
 8001cba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cbe:	bf58      	it	pl
 8001cc0:	eef0 0a40 	vmovpl.f32	s1, s0
 8001cc4:	e002      	b.n	8001ccc <forward_relu6+0x68>
 8001cc6:	bf00      	nop
 8001cc8:	eddf 0a67 	vldr	s1, [pc, #412]	; 8001e68 <.text_19>
 8001ccc:	1d00      	adds	r0, r0, #4
 8001cce:	4290      	cmp	r0, r2
 8001cd0:	edc3 0a00 	vstr	s1, [r3]
 8001cd4:	d3e6      	bcc.n	8001ca4 <forward_relu6+0x40>
 8001cd6:	4770      	bx	lr

08001cd8 <forward_selu>:
 8001cd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001cda:	b081      	sub	sp, #4
 8001cdc:	ed2d 8b04 	vpush	{d8-d9}
 8001ce0:	6941      	ldr	r1, [r0, #20]
 8001ce2:	ed90 8a07 	vldr	s16, [r0, #28]
 8001ce6:	680d      	ldr	r5, [r1, #0]
 8001ce8:	edd0 8a06 	vldr	s17, [r0, #24]
 8001cec:	682a      	ldr	r2, [r5, #0]
 8001cee:	6814      	ldr	r4, [r2, #0]
 8001cf0:	6820      	ldr	r0, [r4, #0]
 8001cf2:	6863      	ldr	r3, [r4, #4]
 8001cf4:	68a1      	ldr	r1, [r4, #8]
 8001cf6:	68e2      	ldr	r2, [r4, #12]
 8001cf8:	434b      	muls	r3, r1
 8001cfa:	6921      	ldr	r1, [r4, #16]
 8001cfc:	6884      	ldr	r4, [r0, #8]
 8001cfe:	6868      	ldr	r0, [r5, #4]
 8001d00:	4353      	muls	r3, r2
 8001d02:	434b      	muls	r3, r1
 8001d04:	6801      	ldr	r1, [r0, #0]
 8001d06:	680a      	ldr	r2, [r1, #0]
 8001d08:	6895      	ldr	r5, [r2, #8]
 8001d0a:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8001d0e:	42b4      	cmp	r4, r6
 8001d10:	d231      	bcs.n	8001d76 <forward_selu+0x9e>
 8001d12:	462f      	mov	r7, r5
 8001d14:	ed94 9a00 	vldr	s18, [r4]
 8001d18:	1d3d      	adds	r5, r7, #4
 8001d1a:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8001d1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d22:	bf4c      	ite	mi
 8001d24:	eddf 9a50 	vldrmi	s19, [pc, #320]	; 8001e68 <.text_19>
 8001d28:	eef0 9a49 	vmovpl.f32	s19, s18
 8001d2c:	eeb0 0a49 	vmov.f32	s0, s18
 8001d30:	f007 fea6 	bl	8009a80 <expf>
 8001d34:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001d38:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001d3c:	ee20 0a28 	vmul.f32	s0, s0, s17
 8001d40:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001d44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d48:	dd04      	ble.n	8001d54 <forward_selu+0x7c>
 8001d4a:	ed9f 1a47 	vldr	s2, [pc, #284]	; 8001e68 <.text_19>
 8001d4e:	ee79 9a81 	vadd.f32	s19, s19, s2
 8001d52:	e009      	b.n	8001d68 <forward_selu+0x90>
 8001d54:	eeb0 0a49 	vmov.f32	s0, s18
 8001d58:	f007 fe92 	bl	8009a80 <expf>
 8001d5c:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8001d60:	ee30 0a20 	vadd.f32	s0, s0, s1
 8001d64:	ee40 9a28 	vmla.f32	s19, s0, s17
 8001d68:	1d24      	adds	r4, r4, #4
 8001d6a:	ee28 0a29 	vmul.f32	s0, s16, s19
 8001d6e:	42b4      	cmp	r4, r6
 8001d70:	ed87 0a00 	vstr	s0, [r7]
 8001d74:	d3cd      	bcc.n	8001d12 <forward_selu+0x3a>
 8001d76:	ecbd 8b04 	vpop	{d8-d9}
 8001d7a:	b001      	add	sp, #4
 8001d7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001d80 <.text_16>:
 8001d80:	00000001 	.word	0x00000001

08001d84 <forward_prelu>:
 8001d84:	b430      	push	{r4, r5}
 8001d86:	6941      	ldr	r1, [r0, #20]
 8001d88:	680c      	ldr	r4, [r1, #0]
 8001d8a:	6822      	ldr	r2, [r4, #0]
 8001d8c:	6815      	ldr	r5, [r2, #0]
 8001d8e:	686b      	ldr	r3, [r5, #4]
 8001d90:	68a9      	ldr	r1, [r5, #8]
 8001d92:	68ea      	ldr	r2, [r5, #12]
 8001d94:	6980      	ldr	r0, [r0, #24]
 8001d96:	434b      	muls	r3, r1
 8001d98:	6929      	ldr	r1, [r5, #16]
 8001d9a:	682d      	ldr	r5, [r5, #0]
 8001d9c:	4353      	muls	r3, r2
 8001d9e:	6862      	ldr	r2, [r4, #4]
 8001da0:	6814      	ldr	r4, [r2, #0]
 8001da2:	434b      	muls	r3, r1
 8001da4:	68a9      	ldr	r1, [r5, #8]
 8001da6:	6825      	ldr	r5, [r4, #0]
 8001da8:	6804      	ldr	r4, [r0, #0]
 8001daa:	68aa      	ldr	r2, [r5, #8]
 8001dac:	68a0      	ldr	r0, [r4, #8]
 8001dae:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001db2:	4299      	cmp	r1, r3
 8001db4:	d21f      	bcs.n	8001df6 <forward_prelu+0x72>
 8001db6:	4614      	mov	r4, r2
 8001db8:	ed91 0a00 	vldr	s0, [r1]
 8001dbc:	1d22      	adds	r2, r4, #4
 8001dbe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dc6:	bf4c      	ite	mi
 8001dc8:	eddf 0a27 	vldrmi	s1, [pc, #156]	; 8001e68 <.text_19>
 8001dcc:	eef0 0a40 	vmovpl.f32	s1, s0
 8001dd0:	eeb1 0a40 	vneg.f32	s0, s0
 8001dd4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001dd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ddc:	bf48      	it	mi
 8001dde:	ed9f 0a22 	vldrmi	s0, [pc, #136]	; 8001e68 <.text_19>
 8001de2:	ed90 1a00 	vldr	s2, [r0]
 8001de6:	1d09      	adds	r1, r1, #4
 8001de8:	1d00      	adds	r0, r0, #4
 8001dea:	ee41 0a40 	vmls.f32	s1, s2, s0
 8001dee:	4299      	cmp	r1, r3
 8001df0:	edc4 0a00 	vstr	s1, [r4]
 8001df4:	d3df      	bcc.n	8001db6 <forward_prelu+0x32>
 8001df6:	bc30      	pop	{r4, r5}
 8001df8:	4770      	bx	lr
	...

08001dfc <forward_sign>:
 8001dfc:	6940      	ldr	r0, [r0, #20]
 8001dfe:	6803      	ldr	r3, [r0, #0]
 8001e00:	6819      	ldr	r1, [r3, #0]
 8001e02:	f8d1 c000 	ldr.w	ip, [r1]
 8001e06:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8001e0a:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001e0e:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8001e12:	4342      	muls	r2, r0
 8001e14:	f8dc 0010 	ldr.w	r0, [ip, #16]
 8001e18:	f8dc c000 	ldr.w	ip, [ip]
 8001e1c:	434a      	muls	r2, r1
 8001e1e:	6859      	ldr	r1, [r3, #4]
 8001e20:	680b      	ldr	r3, [r1, #0]
 8001e22:	4342      	muls	r2, r0
 8001e24:	f8dc 0008 	ldr.w	r0, [ip, #8]
 8001e28:	f8d3 c000 	ldr.w	ip, [r3]
 8001e2c:	f8dc 1008 	ldr.w	r1, [ip, #8]
 8001e30:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8001e34:	4290      	cmp	r0, r2
 8001e36:	d216      	bcs.n	8001e66 <forward_sign+0x6a>
 8001e38:	f04f 33ff 	mov.w	r3, #4294967295
 8001e3c:	ed90 0a00 	vldr	s0, [r0]
 8001e40:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8001e44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e48:	bfcc      	ite	gt
 8001e4a:	ed9f 0a08 	vldrgt	s0, [pc, #32]	; 8001e6c <.text_20>
 8001e4e:	ee00 3a10 	vmovle	s0, r3
 8001e52:	1d00      	adds	r0, r0, #4
 8001e54:	468c      	mov	ip, r1
 8001e56:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8001e5a:	4290      	cmp	r0, r2
 8001e5c:	f10c 0104 	add.w	r1, ip, #4
 8001e60:	ed8c 0a00 	vstr	s0, [ip]
 8001e64:	d3ea      	bcc.n	8001e3c <forward_sign+0x40>
 8001e66:	4770      	bx	lr

08001e68 <.text_19>:
 8001e68:	00000000 	.word	0x00000000

08001e6c <.text_20>:
 8001e6c:	00000001 	.word	0x00000001

08001e70 <forward_clip>:
 8001e70:	b430      	push	{r4, r5}
 8001e72:	6941      	ldr	r1, [r0, #20]
 8001e74:	ed90 0a07 	vldr	s0, [r0, #28]
 8001e78:	680c      	ldr	r4, [r1, #0]
 8001e7a:	edd0 0a06 	vldr	s1, [r0, #24]
 8001e7e:	6822      	ldr	r2, [r4, #0]
 8001e80:	6815      	ldr	r5, [r2, #0]
 8001e82:	686b      	ldr	r3, [r5, #4]
 8001e84:	68a9      	ldr	r1, [r5, #8]
 8001e86:	68ea      	ldr	r2, [r5, #12]
 8001e88:	6828      	ldr	r0, [r5, #0]
 8001e8a:	6880      	ldr	r0, [r0, #8]
 8001e8c:	434b      	muls	r3, r1
 8001e8e:	6929      	ldr	r1, [r5, #16]
 8001e90:	4353      	muls	r3, r2
 8001e92:	434b      	muls	r3, r1
 8001e94:	6861      	ldr	r1, [r4, #4]
 8001e96:	680a      	ldr	r2, [r1, #0]
 8001e98:	6814      	ldr	r4, [r2, #0]
 8001e9a:	68a1      	ldr	r1, [r4, #8]
 8001e9c:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8001ea0:	4290      	cmp	r0, r2
 8001ea2:	d216      	bcs.n	8001ed2 <forward_clip+0x62>
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	ed90 1a00 	vldr	s2, [r0]
 8001eaa:	1d19      	adds	r1, r3, #4
 8001eac:	eef4 0a41 	vcmp.f32	s1, s2
 8001eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb4:	bf58      	it	pl
 8001eb6:	eeb0 1a60 	vmovpl.f32	s2, s1
 8001eba:	eeb4 1a40 	vcmp.f32	s2, s0
 8001ebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec2:	bf58      	it	pl
 8001ec4:	eeb0 1a40 	vmovpl.f32	s2, s0
 8001ec8:	1d00      	adds	r0, r0, #4
 8001eca:	4290      	cmp	r0, r2
 8001ecc:	ed83 1a00 	vstr	s2, [r3]
 8001ed0:	d3e8      	bcc.n	8001ea4 <forward_clip+0x34>
 8001ed2:	bc30      	pop	{r4, r5}
 8001ed4:	4770      	bx	lr
	...

08001ed8 <forward_sigmoid>:
 8001ed8:	b570      	push	{r4, r5, r6, lr}
 8001eda:	6940      	ldr	r0, [r0, #20]
 8001edc:	6803      	ldr	r3, [r0, #0]
 8001ede:	6819      	ldr	r1, [r3, #0]
 8001ee0:	680c      	ldr	r4, [r1, #0]
 8001ee2:	6862      	ldr	r2, [r4, #4]
 8001ee4:	68a0      	ldr	r0, [r4, #8]
 8001ee6:	68e1      	ldr	r1, [r4, #12]
 8001ee8:	4342      	muls	r2, r0
 8001eea:	6920      	ldr	r0, [r4, #16]
 8001eec:	6824      	ldr	r4, [r4, #0]
 8001eee:	68a4      	ldr	r4, [r4, #8]
 8001ef0:	434a      	muls	r2, r1
 8001ef2:	4342      	muls	r2, r0
 8001ef4:	6858      	ldr	r0, [r3, #4]
 8001ef6:	6801      	ldr	r1, [r0, #0]
 8001ef8:	680b      	ldr	r3, [r1, #0]
 8001efa:	689d      	ldr	r5, [r3, #8]
 8001efc:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001f00:	42b4      	cmp	r4, r6
 8001f02:	d213      	bcs.n	8001f2c <forward_sigmoid+0x54>
 8001f04:	ed94 0a00 	vldr	s0, [r4]
 8001f08:	eeb1 0a40 	vneg.f32	s0, s0
 8001f0c:	f007 fdb8 	bl	8009a80 <expf>
 8001f10:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8001f14:	ee70 0a20 	vadd.f32	s1, s0, s1
 8001f18:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001f1c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8001f20:	ed85 0a00 	vstr	s0, [r5]
 8001f24:	1d2d      	adds	r5, r5, #4
 8001f26:	1d24      	adds	r4, r4, #4
 8001f28:	42b4      	cmp	r4, r6
 8001f2a:	d3eb      	bcc.n	8001f04 <forward_sigmoid+0x2c>
 8001f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08001f30 <forward_tanh>:
 8001f30:	b570      	push	{r4, r5, r6, lr}
 8001f32:	6940      	ldr	r0, [r0, #20]
 8001f34:	6803      	ldr	r3, [r0, #0]
 8001f36:	6819      	ldr	r1, [r3, #0]
 8001f38:	680c      	ldr	r4, [r1, #0]
 8001f3a:	6862      	ldr	r2, [r4, #4]
 8001f3c:	68a0      	ldr	r0, [r4, #8]
 8001f3e:	68e1      	ldr	r1, [r4, #12]
 8001f40:	4342      	muls	r2, r0
 8001f42:	6920      	ldr	r0, [r4, #16]
 8001f44:	6824      	ldr	r4, [r4, #0]
 8001f46:	68a4      	ldr	r4, [r4, #8]
 8001f48:	434a      	muls	r2, r1
 8001f4a:	4342      	muls	r2, r0
 8001f4c:	6858      	ldr	r0, [r3, #4]
 8001f4e:	6801      	ldr	r1, [r0, #0]
 8001f50:	680b      	ldr	r3, [r1, #0]
 8001f52:	689d      	ldr	r5, [r3, #8]
 8001f54:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8001f58:	42b4      	cmp	r4, r6
 8001f5a:	d209      	bcs.n	8001f70 <forward_tanh+0x40>
 8001f5c:	ed94 0a00 	vldr	s0, [r4]
 8001f60:	f007 fd3c 	bl	80099dc <tanhf>
 8001f64:	ed85 0a00 	vstr	s0, [r5]
 8001f68:	1d2d      	adds	r5, r5, #4
 8001f6a:	1d24      	adds	r4, r4, #4
 8001f6c:	42b4      	cmp	r4, r6
 8001f6e:	d3f5      	bcc.n	8001f5c <forward_tanh+0x2c>
 8001f70:	bd70      	pop	{r4, r5, r6, pc}

08001f72 <forward_sm>:
 8001f72:	b530      	push	{r4, r5, lr}
 8001f74:	b083      	sub	sp, #12
 8001f76:	6940      	ldr	r0, [r0, #20]
 8001f78:	6804      	ldr	r4, [r0, #0]
 8001f7a:	6821      	ldr	r1, [r4, #0]
 8001f7c:	680d      	ldr	r5, [r1, #0]
 8001f7e:	68aa      	ldr	r2, [r5, #8]
 8001f80:	9201      	str	r2, [sp, #4]
 8001f82:	9200      	str	r2, [sp, #0]
 8001f84:	4613      	mov	r3, r2
 8001f86:	6868      	ldr	r0, [r5, #4]
 8001f88:	68e9      	ldr	r1, [r5, #12]
 8001f8a:	4342      	muls	r2, r0
 8001f8c:	6928      	ldr	r0, [r5, #16]
 8001f8e:	682d      	ldr	r5, [r5, #0]
 8001f90:	434a      	muls	r2, r1
 8001f92:	4342      	muls	r2, r0
 8001f94:	6860      	ldr	r0, [r4, #4]
 8001f96:	6804      	ldr	r4, [r0, #0]
 8001f98:	68a9      	ldr	r1, [r5, #8]
 8001f9a:	6825      	ldr	r5, [r4, #0]
 8001f9c:	68a8      	ldr	r0, [r5, #8]
 8001f9e:	f7ff fd09 	bl	80019b4 <nl_func_sm_array_f32>
 8001fa2:	b003      	add	sp, #12
 8001fa4:	bd30      	pop	{r4, r5, pc}
	...

08001fa8 <pool_func_mp_array_f32>:
 8001fa8:	b470      	push	{r4, r5, r6}
 8001faa:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8001fae:	42a1      	cmp	r1, r4
 8001fb0:	d257      	bcs.n	8002062 <pool_func_mp_array_f32+0xba>
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d051      	beq.n	800205a <pool_func_mp_array_f32+0xb2>
 8001fb6:	f013 0203 	ands.w	r2, r3, #3
 8001fba:	460d      	mov	r5, r1
 8001fbc:	4606      	mov	r6, r0
 8001fbe:	d011      	beq.n	8001fe4 <pool_func_mp_array_f32+0x3c>
 8001fc0:	ed96 0a00 	vldr	s0, [r6]
 8001fc4:	edd5 0a00 	vldr	s1, [r5]
 8001fc8:	eef4 0a40 	vcmp.f32	s1, s0
 8001fcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd0:	bf58      	it	pl
 8001fd2:	eeb0 0a60 	vmovpl.f32	s0, s1
 8001fd6:	ed86 0a00 	vstr	s0, [r6]
 8001fda:	1e52      	subs	r2, r2, #1
 8001fdc:	1d36      	adds	r6, r6, #4
 8001fde:	1d2d      	adds	r5, r5, #4
 8001fe0:	2a00      	cmp	r2, #0
 8001fe2:	d1ed      	bne.n	8001fc0 <pool_func_mp_array_f32+0x18>
 8001fe4:	089a      	lsrs	r2, r3, #2
 8001fe6:	d038      	beq.n	800205a <pool_func_mp_array_f32+0xb2>
 8001fe8:	edd5 0a00 	vldr	s1, [r5]
 8001fec:	edd6 1a00 	vldr	s3, [r6]
 8001ff0:	eef4 0a61 	vcmp.f32	s1, s3
 8001ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff8:	bf48      	it	mi
 8001ffa:	eef0 0a61 	vmovmi.f32	s1, s3
 8001ffe:	edc6 0a00 	vstr	s1, [r6]
 8002002:	edd5 0a01 	vldr	s1, [r5, #4]
 8002006:	edd6 1a01 	vldr	s3, [r6, #4]
 800200a:	ed96 0a02 	vldr	s0, [r6, #8]
 800200e:	eef4 0a61 	vcmp.f32	s1, s3
 8002012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002016:	bf48      	it	mi
 8002018:	eef0 0a61 	vmovmi.f32	s1, s3
 800201c:	edc6 0a01 	vstr	s1, [r6, #4]
 8002020:	ed95 1a02 	vldr	s2, [r5, #8]
 8002024:	edd6 1a03 	vldr	s3, [r6, #12]
 8002028:	eeb4 1a40 	vcmp.f32	s2, s0
 800202c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002030:	bf48      	it	mi
 8002032:	eeb0 1a40 	vmovmi.f32	s2, s0
 8002036:	ed86 1a02 	vstr	s2, [r6, #8]
 800203a:	edd5 0a03 	vldr	s1, [r5, #12]
 800203e:	eef4 0a61 	vcmp.f32	s1, s3
 8002042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002046:	bf58      	it	pl
 8002048:	eef0 1a60 	vmovpl.f32	s3, s1
 800204c:	edc6 1a03 	vstr	s3, [r6, #12]
 8002050:	1e52      	subs	r2, r2, #1
 8002052:	3610      	adds	r6, #16
 8002054:	3510      	adds	r5, #16
 8002056:	2a00      	cmp	r2, #0
 8002058:	d1c6      	bne.n	8001fe8 <pool_func_mp_array_f32+0x40>
 800205a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800205e:	42a1      	cmp	r1, r4
 8002060:	d3a7      	bcc.n	8001fb2 <pool_func_mp_array_f32+0xa>
 8002062:	bc70      	pop	{r4, r5, r6}
 8002064:	4770      	bx	lr
	...

08002068 <pool_func_ap_array_f32>:
 8002068:	b470      	push	{r4, r5, r6}
 800206a:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800206e:	42a1      	cmp	r1, r4
 8002070:	d24f      	bcs.n	8002112 <pool_func_ap_array_f32+0xaa>
 8002072:	2b00      	cmp	r3, #0
 8002074:	d049      	beq.n	800210a <pool_func_ap_array_f32+0xa2>
 8002076:	f013 0203 	ands.w	r2, r3, #3
 800207a:	460d      	mov	r5, r1
 800207c:	4606      	mov	r6, r0
 800207e:	d00e      	beq.n	800209e <pool_func_ap_array_f32+0x36>
 8002080:	ed95 0a00 	vldr	s0, [r5]
 8002084:	4288      	cmp	r0, r1
 8002086:	bf1c      	itt	ne
 8002088:	edd6 0a00 	vldrne	s1, [r6]
 800208c:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8002090:	ed86 0a00 	vstr	s0, [r6]
 8002094:	1e52      	subs	r2, r2, #1
 8002096:	1d36      	adds	r6, r6, #4
 8002098:	1d2d      	adds	r5, r5, #4
 800209a:	2a00      	cmp	r2, #0
 800209c:	d1f0      	bne.n	8002080 <pool_func_ap_array_f32+0x18>
 800209e:	089a      	lsrs	r2, r3, #2
 80020a0:	d033      	beq.n	800210a <pool_func_ap_array_f32+0xa2>
 80020a2:	4288      	cmp	r0, r1
 80020a4:	edd5 1a00 	vldr	s3, [r5]
 80020a8:	d10c      	bne.n	80020c4 <pool_func_ap_array_f32+0x5c>
 80020aa:	edc6 1a00 	vstr	s3, [r6]
 80020ae:	ed95 0a01 	vldr	s0, [r5, #4]
 80020b2:	ed86 0a01 	vstr	s0, [r6, #4]
 80020b6:	edd5 1a02 	vldr	s3, [r5, #8]
 80020ba:	edc6 1a02 	vstr	s3, [r6, #8]
 80020be:	edd5 1a03 	vldr	s3, [r5, #12]
 80020c2:	e01b      	b.n	80020fc <pool_func_ap_array_f32+0x94>
 80020c4:	edd6 0a00 	vldr	s1, [r6]
 80020c8:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80020cc:	ed86 0a00 	vstr	s0, [r6]
 80020d0:	ed96 1a01 	vldr	s2, [r6, #4]
 80020d4:	ed95 0a01 	vldr	s0, [r5, #4]
 80020d8:	edd6 1a02 	vldr	s3, [r6, #8]
 80020dc:	ee31 0a00 	vadd.f32	s0, s2, s0
 80020e0:	ed86 0a01 	vstr	s0, [r6, #4]
 80020e4:	edd5 0a02 	vldr	s1, [r5, #8]
 80020e8:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80020ec:	ed86 0a02 	vstr	s0, [r6, #8]
 80020f0:	ed96 0a03 	vldr	s0, [r6, #12]
 80020f4:	ed95 1a03 	vldr	s2, [r5, #12]
 80020f8:	ee70 1a01 	vadd.f32	s3, s0, s2
 80020fc:	edc6 1a03 	vstr	s3, [r6, #12]
 8002100:	1e52      	subs	r2, r2, #1
 8002102:	3610      	adds	r6, #16
 8002104:	3510      	adds	r5, #16
 8002106:	2a00      	cmp	r2, #0
 8002108:	d1cb      	bne.n	80020a2 <pool_func_ap_array_f32+0x3a>
 800210a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800210e:	42a1      	cmp	r1, r4
 8002110:	d3af      	bcc.n	8002072 <pool_func_ap_array_f32+0xa>
 8002112:	9903      	ldr	r1, [sp, #12]
 8002114:	b3a1      	cbz	r1, 8002180 <pool_func_ap_array_f32+0x118>
 8002116:	ee00 1a10 	vmov	s0, r1
 800211a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800211e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002122:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8002126:	b35b      	cbz	r3, 8002180 <pool_func_ap_array_f32+0x118>
 8002128:	f013 0103 	ands.w	r1, r3, #3
 800212c:	f000 800a 	beq.w	8002144 <pool_func_ap_array_f32+0xdc>
 8002130:	edd0 0a00 	vldr	s1, [r0]
 8002134:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002138:	edc0 0a00 	vstr	s1, [r0]
 800213c:	1e49      	subs	r1, r1, #1
 800213e:	f100 0004 	add.w	r0, r0, #4
 8002142:	d1f5      	bne.n	8002130 <pool_func_ap_array_f32+0xc8>
 8002144:	089b      	lsrs	r3, r3, #2
 8002146:	d01b      	beq.n	8002180 <pool_func_ap_array_f32+0x118>
 8002148:	edd0 0a00 	vldr	s1, [r0]
 800214c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8002150:	edc0 0a00 	vstr	s1, [r0]
 8002154:	1e5b      	subs	r3, r3, #1
 8002156:	ed90 1a01 	vldr	s2, [r0, #4]
 800215a:	edd0 0a02 	vldr	s1, [r0, #8]
 800215e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002162:	ed80 1a01 	vstr	s2, [r0, #4]
 8002166:	ee60 0a80 	vmul.f32	s1, s1, s0
 800216a:	ed90 1a03 	vldr	s2, [r0, #12]
 800216e:	edc0 0a02 	vstr	s1, [r0, #8]
 8002172:	ee21 1a00 	vmul.f32	s2, s2, s0
 8002176:	ed80 1a03 	vstr	s2, [r0, #12]
 800217a:	f100 0010 	add.w	r0, r0, #16
 800217e:	d1e3      	bne.n	8002148 <pool_func_ap_array_f32+0xe0>
 8002180:	bc70      	pop	{r4, r5, r6}
 8002182:	4770      	bx	lr

08002184 <forward_mp>:
 8002184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002188:	4603      	mov	r3, r0
 800218a:	b08e      	sub	sp, #56	; 0x38
 800218c:	6958      	ldr	r0, [r3, #20]
 800218e:	6800      	ldr	r0, [r0, #0]
 8002190:	6801      	ldr	r1, [r0, #0]
 8002192:	6840      	ldr	r0, [r0, #4]
 8002194:	680c      	ldr	r4, [r1, #0]
 8002196:	6807      	ldr	r7, [r0, #0]
 8002198:	6921      	ldr	r1, [r4, #16]
 800219a:	693d      	ldr	r5, [r7, #16]
 800219c:	9109      	str	r1, [sp, #36]	; 0x24
 800219e:	68fa      	ldr	r2, [r7, #12]
 80021a0:	9208      	str	r2, [sp, #32]
 80021a2:	f8d4 800c 	ldr.w	r8, [r4, #12]
 80021a6:	68a1      	ldr	r1, [r4, #8]
 80021a8:	699a      	ldr	r2, [r3, #24]
 80021aa:	69d8      	ldr	r0, [r3, #28]
 80021ac:	9007      	str	r0, [sp, #28]
 80021ae:	6a5e      	ldr	r6, [r3, #36]	; 0x24
 80021b0:	6a18      	ldr	r0, [r3, #32]
 80021b2:	960d      	str	r6, [sp, #52]	; 0x34
 80021b4:	683f      	ldr	r7, [r7, #0]
 80021b6:	6824      	ldr	r4, [r4, #0]
 80021b8:	f8d7 e008 	ldr.w	lr, [r7, #8]
 80021bc:	6adf      	ldr	r7, [r3, #44]	; 0x2c
 80021be:	6a9e      	ldr	r6, [r3, #40]	; 0x28
 80021c0:	68a4      	ldr	r4, [r4, #8]
 80021c2:	427f      	negs	r7, r7
 80021c4:	2d00      	cmp	r5, #0
 80021c6:	9700      	str	r7, [sp, #0]
 80021c8:	f000 80d9 	beq.w	800237e <forward_mp+0x1fa>
 80021cc:	9501      	str	r5, [sp, #4]
 80021ce:	4276      	negs	r6, r6
 80021d0:	960c      	str	r6, [sp, #48]	; 0x30
 80021d2:	fb01 f508 	mul.w	r5, r1, r8
 80021d6:	950b      	str	r5, [sp, #44]	; 0x2c
 80021d8:	9d00      	ldr	r5, [sp, #0]
 80021da:	9b00      	ldr	r3, [sp, #0]
 80021dc:	9f00      	ldr	r7, [sp, #0]
 80021de:	426d      	negs	r5, r5
 80021e0:	9d09      	ldr	r5, [sp, #36]	; 0x24
 80021e2:	bfcc      	ite	gt
 80021e4:	2600      	movgt	r6, #0
 80021e6:	9e00      	ldrle	r6, [sp, #0]
 80021e8:	1aeb      	subs	r3, r5, r3
 80021ea:	9d07      	ldr	r5, [sp, #28]
 80021ec:	42ab      	cmp	r3, r5
 80021ee:	bf88      	it	hi
 80021f0:	462b      	movhi	r3, r5
 80021f2:	19df      	adds	r7, r3, r7
 80021f4:	9b08      	ldr	r3, [sp, #32]
 80021f6:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	f000 80b7 	beq.w	800236c <forward_mp+0x1e8>
 80021fe:	fb08 fa06 	mul.w	sl, r8, r6
 8002202:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8002206:	f8cd 800c 	str.w	r8, [sp, #12]
 800220a:	9202      	str	r2, [sp, #8]
 800220c:	9006      	str	r0, [sp, #24]
 800220e:	9605      	str	r6, [sp, #20]
 8002210:	9704      	str	r7, [sp, #16]
 8002212:	4268      	negs	r0, r5
 8002214:	9f03      	ldr	r7, [sp, #12]
 8002216:	9a02      	ldr	r2, [sp, #8]
 8002218:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 800221c:	bfcc      	ite	gt
 800221e:	2000      	movgt	r0, #0
 8002220:	4628      	movle	r0, r5
 8002222:	1b7f      	subs	r7, r7, r5
 8002224:	4297      	cmp	r7, r2
 8002226:	bf88      	it	hi
 8002228:	4617      	movhi	r7, r2
 800222a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800222c:	197f      	adds	r7, r7, r5
 800222e:	1a3f      	subs	r7, r7, r0
 8002230:	1880      	adds	r0, r0, r2
 8002232:	4348      	muls	r0, r1
 8002234:	434f      	muls	r7, r1
 8002236:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 800223a:	b311      	cbz	r1, 8002282 <forward_mp+0xfe>
 800223c:	f011 0003 	ands.w	r0, r1, #3
 8002240:	4672      	mov	r2, lr
 8002242:	4666      	mov	r6, ip
 8002244:	f000 8006 	beq.w	8002254 <forward_mp+0xd0>
 8002248:	f856 9b04 	ldr.w	r9, [r6], #4
 800224c:	f842 9b04 	str.w	r9, [r2], #4
 8002250:	1e40      	subs	r0, r0, #1
 8002252:	d1f9      	bne.n	8002248 <forward_mp+0xc4>
 8002254:	0888      	lsrs	r0, r1, #2
 8002256:	d014      	beq.n	8002282 <forward_mp+0xfe>
 8002258:	ed96 0a00 	vldr	s0, [r6]
 800225c:	ed82 0a00 	vstr	s0, [r2]
 8002260:	1e40      	subs	r0, r0, #1
 8002262:	edd6 0a01 	vldr	s1, [r6, #4]
 8002266:	edc2 0a01 	vstr	s1, [r2, #4]
 800226a:	ed96 0a02 	vldr	s0, [r6, #8]
 800226e:	ed82 0a02 	vstr	s0, [r2, #8]
 8002272:	edd6 0a03 	vldr	s1, [r6, #12]
 8002276:	edc2 0a03 	vstr	s1, [r2, #12]
 800227a:	3210      	adds	r2, #16
 800227c:	3610      	adds	r6, #16
 800227e:	2800      	cmp	r0, #0
 8002280:	d1ea      	bne.n	8002258 <forward_mp+0xd4>
 8002282:	9805      	ldr	r0, [sp, #20]
 8002284:	9a04      	ldr	r2, [sp, #16]
 8002286:	4290      	cmp	r0, r2
 8002288:	da66      	bge.n	8002358 <forward_mp+0x1d4>
 800228a:	4610      	mov	r0, r2
 800228c:	9a05      	ldr	r2, [sp, #20]
 800228e:	1a82      	subs	r2, r0, r2
 8002290:	46e2      	mov	sl, ip
 8002292:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8002296:	45da      	cmp	sl, fp
 8002298:	d25a      	bcs.n	8002350 <forward_mp+0x1cc>
 800229a:	2900      	cmp	r1, #0
 800229c:	d054      	beq.n	8002348 <forward_mp+0x1c4>
 800229e:	f011 0003 	ands.w	r0, r1, #3
 80022a2:	4656      	mov	r6, sl
 80022a4:	46f1      	mov	r9, lr
 80022a6:	d012      	beq.n	80022ce <forward_mp+0x14a>
 80022a8:	ed99 0a00 	vldr	s0, [r9]
 80022ac:	edd6 0a00 	vldr	s1, [r6]
 80022b0:	eef4 0a40 	vcmp.f32	s1, s0
 80022b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022b8:	bf58      	it	pl
 80022ba:	eeb0 0a60 	vmovpl.f32	s0, s1
 80022be:	1e40      	subs	r0, r0, #1
 80022c0:	1d36      	adds	r6, r6, #4
 80022c2:	ed89 0a00 	vstr	s0, [r9]
 80022c6:	2800      	cmp	r0, #0
 80022c8:	f109 0904 	add.w	r9, r9, #4
 80022cc:	d1ec      	bne.n	80022a8 <forward_mp+0x124>
 80022ce:	0888      	lsrs	r0, r1, #2
 80022d0:	f000 803a 	beq.w	8002348 <forward_mp+0x1c4>
 80022d4:	edd6 0a00 	vldr	s1, [r6]
 80022d8:	edd9 1a00 	vldr	s3, [r9]
 80022dc:	eef4 0a61 	vcmp.f32	s1, s3
 80022e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022e4:	bf48      	it	mi
 80022e6:	eef0 0a61 	vmovmi.f32	s1, s3
 80022ea:	edc9 0a00 	vstr	s1, [r9]
 80022ee:	edd6 0a01 	vldr	s1, [r6, #4]
 80022f2:	edd9 1a01 	vldr	s3, [r9, #4]
 80022f6:	ed99 0a02 	vldr	s0, [r9, #8]
 80022fa:	eef4 0a61 	vcmp.f32	s1, s3
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	bf48      	it	mi
 8002304:	eef0 0a61 	vmovmi.f32	s1, s3
 8002308:	edc9 0a01 	vstr	s1, [r9, #4]
 800230c:	ed96 1a02 	vldr	s2, [r6, #8]
 8002310:	edd9 1a03 	vldr	s3, [r9, #12]
 8002314:	eeb4 1a40 	vcmp.f32	s2, s0
 8002318:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800231c:	bf48      	it	mi
 800231e:	eeb0 1a40 	vmovmi.f32	s2, s0
 8002322:	ed89 1a02 	vstr	s2, [r9, #8]
 8002326:	edd6 0a03 	vldr	s1, [r6, #12]
 800232a:	eef4 0a61 	vcmp.f32	s1, s3
 800232e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002332:	bf58      	it	pl
 8002334:	eef0 1a60 	vmovpl.f32	s3, s1
 8002338:	1e40      	subs	r0, r0, #1
 800233a:	3610      	adds	r6, #16
 800233c:	edc9 1a03 	vstr	s3, [r9, #12]
 8002340:	2800      	cmp	r0, #0
 8002342:	f109 0910 	add.w	r9, r9, #16
 8002346:	d1c5      	bne.n	80022d4 <forward_mp+0x150>
 8002348:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 800234c:	45da      	cmp	sl, fp
 800234e:	d3a4      	bcc.n	800229a <forward_mp+0x116>
 8002350:	1e52      	subs	r2, r2, #1
 8002352:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8002356:	d19b      	bne.n	8002290 <forward_mp+0x10c>
 8002358:	9806      	ldr	r0, [sp, #24]
 800235a:	1945      	adds	r5, r0, r5
 800235c:	1e5b      	subs	r3, r3, #1
 800235e:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8002362:	f47f af56 	bne.w	8002212 <forward_mp+0x8e>
 8002366:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800236a:	9a02      	ldr	r2, [sp, #8]
 800236c:	9d00      	ldr	r5, [sp, #0]
 800236e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8002370:	195d      	adds	r5, r3, r5
 8002372:	9500      	str	r5, [sp, #0]
 8002374:	9d01      	ldr	r5, [sp, #4]
 8002376:	1e6d      	subs	r5, r5, #1
 8002378:	9501      	str	r5, [sp, #4]
 800237a:	f47f af2d 	bne.w	80021d8 <forward_mp+0x54>
 800237e:	b00e      	add	sp, #56	; 0x38
 8002380:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002384 <forward_ap>:
 8002384:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002388:	b094      	sub	sp, #80	; 0x50
 800238a:	6941      	ldr	r1, [r0, #20]
 800238c:	6809      	ldr	r1, [r1, #0]
 800238e:	680a      	ldr	r2, [r1, #0]
 8002390:	6849      	ldr	r1, [r1, #4]
 8002392:	6815      	ldr	r5, [r2, #0]
 8002394:	680e      	ldr	r6, [r1, #0]
 8002396:	692a      	ldr	r2, [r5, #16]
 8002398:	6933      	ldr	r3, [r6, #16]
 800239a:	920c      	str	r2, [sp, #48]	; 0x30
 800239c:	68f4      	ldr	r4, [r6, #12]
 800239e:	940b      	str	r4, [sp, #44]	; 0x2c
 80023a0:	68ea      	ldr	r2, [r5, #12]
 80023a2:	68a9      	ldr	r1, [r5, #8]
 80023a4:	f8d0 8018 	ldr.w	r8, [r0, #24]
 80023a8:	69c4      	ldr	r4, [r0, #28]
 80023aa:	940a      	str	r4, [sp, #40]	; 0x28
 80023ac:	f8d0 c020 	ldr.w	ip, [r0, #32]
 80023b0:	6a47      	ldr	r7, [r0, #36]	; 0x24
 80023b2:	9713      	str	r7, [sp, #76]	; 0x4c
 80023b4:	682d      	ldr	r5, [r5, #0]
 80023b6:	6a87      	ldr	r7, [r0, #40]	; 0x28
 80023b8:	6834      	ldr	r4, [r6, #0]
 80023ba:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
 80023bc:	f8d5 e008 	ldr.w	lr, [r5, #8]
 80023c0:	f8d4 9008 	ldr.w	r9, [r4, #8]
 80023c4:	4240      	negs	r0, r0
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	9001      	str	r0, [sp, #4]
 80023ca:	f000 8120 	beq.w	800260e <forward_ap+0x28a>
 80023ce:	427f      	negs	r7, r7
 80023d0:	fb01 f402 	mul.w	r4, r1, r2
 80023d4:	9303      	str	r3, [sp, #12]
 80023d6:	9712      	str	r7, [sp, #72]	; 0x48
 80023d8:	9411      	str	r4, [sp, #68]	; 0x44
 80023da:	9801      	ldr	r0, [sp, #4]
 80023dc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80023de:	9e01      	ldr	r6, [sp, #4]
 80023e0:	9c12      	ldr	r4, [sp, #72]	; 0x48
 80023e2:	4240      	negs	r0, r0
 80023e4:	9801      	ldr	r0, [sp, #4]
 80023e6:	bfcc      	ite	gt
 80023e8:	2700      	movgt	r7, #0
 80023ea:	9f01      	ldrle	r7, [sp, #4]
 80023ec:	1a18      	subs	r0, r3, r0
 80023ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80023f0:	4298      	cmp	r0, r3
 80023f2:	bf88      	it	hi
 80023f4:	4618      	movhi	r0, r3
 80023f6:	1986      	adds	r6, r0, r6
 80023f8:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80023fa:	2800      	cmp	r0, #0
 80023fc:	f000 80fe 	beq.w	80025fc <forward_ap+0x278>
 8002400:	4605      	mov	r5, r0
 8002402:	fb02 f007 	mul.w	r0, r2, r7
 8002406:	9010      	str	r0, [sp, #64]	; 0x40
 8002408:	9205      	str	r2, [sp, #20]
 800240a:	1bb8      	subs	r0, r7, r6
 800240c:	900f      	str	r0, [sp, #60]	; 0x3c
 800240e:	f8cd 8010 	str.w	r8, [sp, #16]
 8002412:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8002416:	f8cd e020 	str.w	lr, [sp, #32]
 800241a:	9707      	str	r7, [sp, #28]
 800241c:	9606      	str	r6, [sp, #24]
 800241e:	9400      	str	r4, [sp, #0]
 8002420:	9502      	str	r5, [sp, #8]
 8002422:	9800      	ldr	r0, [sp, #0]
 8002424:	9a05      	ldr	r2, [sp, #20]
 8002426:	f8dd e000 	ldr.w	lr, [sp]
 800242a:	9c11      	ldr	r4, [sp, #68]	; 0x44
 800242c:	4240      	negs	r0, r0
 800242e:	9800      	ldr	r0, [sp, #0]
 8002430:	bfcc      	ite	gt
 8002432:	f04f 0c00 	movgt.w	ip, #0
 8002436:	f8dd c000 	ldrle.w	ip, [sp]
 800243a:	1a10      	subs	r0, r2, r0
 800243c:	9a04      	ldr	r2, [sp, #16]
 800243e:	4290      	cmp	r0, r2
 8002440:	bf88      	it	hi
 8002442:	4610      	movhi	r0, r2
 8002444:	4486      	add	lr, r0
 8002446:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8002448:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800244a:	ebac 050e 	sub.w	r5, ip, lr
 800244e:	4345      	muls	r5, r0
 8002450:	9808      	ldr	r0, [sp, #32]
 8002452:	4462      	add	r2, ip
 8002454:	434a      	muls	r2, r1
 8002456:	ebae 060c 	sub.w	r6, lr, ip
 800245a:	eb00 0782 	add.w	r7, r0, r2, lsl #2
 800245e:	434e      	muls	r6, r1
 8002460:	2200      	movs	r2, #0
 8002462:	b189      	cbz	r1, 8002488 <forward_ap+0x104>
 8002464:	f011 0003 	ands.w	r0, r1, #3
 8002468:	464b      	mov	r3, r9
 800246a:	d003      	beq.n	8002474 <forward_ap+0xf0>
 800246c:	1e40      	subs	r0, r0, #1
 800246e:	f843 2b04 	str.w	r2, [r3], #4
 8002472:	d1fb      	bne.n	800246c <forward_ap+0xe8>
 8002474:	0888      	lsrs	r0, r1, #2
 8002476:	d007      	beq.n	8002488 <forward_ap+0x104>
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]
 8002480:	1e40      	subs	r0, r0, #1
 8002482:	f103 0310 	add.w	r3, r3, #16
 8002486:	d1f7      	bne.n	8002478 <forward_ap+0xf4>
 8002488:	9807      	ldr	r0, [sp, #28]
 800248a:	9b06      	ldr	r3, [sp, #24]
 800248c:	4298      	cmp	r0, r3
 800248e:	f280 80a3 	bge.w	80025d8 <forward_ap+0x254>
 8002492:	1a1b      	subs	r3, r3, r0
 8002494:	ebae 000c 	sub.w	r0, lr, ip
 8002498:	900d      	str	r0, [sp, #52]	; 0x34
 800249a:	940e      	str	r4, [sp, #56]	; 0x38
 800249c:	4694      	mov	ip, r2
 800249e:	980d      	ldr	r0, [sp, #52]	; 0x34
 80024a0:	4484      	add	ip, r0
 80024a2:	4565      	cmp	r5, ip
 80024a4:	46be      	mov	lr, r7
 80024a6:	bf0c      	ite	eq
 80024a8:	462c      	moveq	r4, r5
 80024aa:	2400      	movne	r4, #0
 80024ac:	eb0e 0886 	add.w	r8, lr, r6, lsl #2
 80024b0:	45c6      	cmp	lr, r8
 80024b2:	d24e      	bcs.n	8002552 <forward_ap+0x1ce>
 80024b4:	2200      	movs	r2, #0
 80024b6:	2900      	cmp	r1, #0
 80024b8:	d047      	beq.n	800254a <forward_ap+0x1c6>
 80024ba:	f011 0003 	ands.w	r0, r1, #3
 80024be:	46f2      	mov	sl, lr
 80024c0:	46cb      	mov	fp, r9
 80024c2:	d010      	beq.n	80024e6 <forward_ap+0x162>
 80024c4:	ed9a 0a00 	vldr	s0, [sl]
 80024c8:	45f1      	cmp	r9, lr
 80024ca:	bf1c      	itt	ne
 80024cc:	eddb 0a00 	vldrne	s1, [fp]
 80024d0:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80024d4:	1c52      	adds	r2, r2, #1
 80024d6:	ed8b 0a00 	vstr	s0, [fp]
 80024da:	1e40      	subs	r0, r0, #1
 80024dc:	f10b 0b04 	add.w	fp, fp, #4
 80024e0:	f10a 0a04 	add.w	sl, sl, #4
 80024e4:	d1ee      	bne.n	80024c4 <forward_ap+0x140>
 80024e6:	0888      	lsrs	r0, r1, #2
 80024e8:	f000 802f 	beq.w	800254a <forward_ap+0x1c6>
 80024ec:	eb0e 0a82 	add.w	sl, lr, r2, lsl #2
 80024f0:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80024f4:	edda 1a00 	vldr	s3, [sl]
 80024f8:	45f1      	cmp	r9, lr
 80024fa:	bf1c      	itt	ne
 80024fc:	ed92 0a00 	vldrne	s0, [r2]
 8002500:	ee70 1a21 	vaddne.f32	s3, s0, s3
 8002504:	edc2 1a00 	vstr	s3, [r2]
 8002508:	edda 1a01 	vldr	s3, [sl, #4]
 800250c:	bf1c      	itt	ne
 800250e:	edd2 0a01 	vldrne	s1, [r2, #4]
 8002512:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 8002516:	edc2 1a01 	vstr	s3, [r2, #4]
 800251a:	ed9a 1a02 	vldr	s2, [sl, #8]
 800251e:	bf1c      	itt	ne
 8002520:	ed92 0a02 	vldrne	s0, [r2, #8]
 8002524:	ee30 1a01 	vaddne.f32	s2, s0, s2
 8002528:	ed82 1a02 	vstr	s2, [r2, #8]
 800252c:	edda 1a03 	vldr	s3, [sl, #12]
 8002530:	bf1c      	itt	ne
 8002532:	edd2 0a03 	vldrne	s1, [r2, #12]
 8002536:	ee70 1aa1 	vaddne.f32	s3, s1, s3
 800253a:	edc2 1a03 	vstr	s3, [r2, #12]
 800253e:	1e40      	subs	r0, r0, #1
 8002540:	3210      	adds	r2, #16
 8002542:	2800      	cmp	r0, #0
 8002544:	f10a 0a10 	add.w	sl, sl, #16
 8002548:	d1d4      	bne.n	80024f4 <forward_ap+0x170>
 800254a:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800254e:	45c6      	cmp	lr, r8
 8002550:	d3b0      	bcc.n	80024b4 <forward_ap+0x130>
 8002552:	2c00      	cmp	r4, #0
 8002554:	d03a      	beq.n	80025cc <forward_ap+0x248>
 8002556:	ee00 4a10 	vmov	s0, r4
 800255a:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800255e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002562:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8002566:	2200      	movs	r2, #0
 8002568:	b381      	cbz	r1, 80025cc <forward_ap+0x248>
 800256a:	f011 0003 	ands.w	r0, r1, #3
 800256e:	464c      	mov	r4, r9
 8002570:	f000 800b 	beq.w	800258a <forward_ap+0x206>
 8002574:	edd4 0a00 	vldr	s1, [r4]
 8002578:	ee60 0a80 	vmul.f32	s1, s1, s0
 800257c:	1c52      	adds	r2, r2, #1
 800257e:	edc4 0a00 	vstr	s1, [r4]
 8002582:	1e40      	subs	r0, r0, #1
 8002584:	f104 0404 	add.w	r4, r4, #4
 8002588:	d1f4      	bne.n	8002574 <forward_ap+0x1f0>
 800258a:	0888      	lsrs	r0, r1, #2
 800258c:	f000 801e 	beq.w	80025cc <forward_ap+0x248>
 8002590:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8002594:	edd2 0a00 	vldr	s1, [r2]
 8002598:	ee60 0a80 	vmul.f32	s1, s1, s0
 800259c:	edc2 0a00 	vstr	s1, [r2]
 80025a0:	1e40      	subs	r0, r0, #1
 80025a2:	ed92 1a01 	vldr	s2, [r2, #4]
 80025a6:	edd2 0a02 	vldr	s1, [r2, #8]
 80025aa:	ee21 1a00 	vmul.f32	s2, s2, s0
 80025ae:	ed82 1a01 	vstr	s2, [r2, #4]
 80025b2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80025b6:	ed92 1a03 	vldr	s2, [r2, #12]
 80025ba:	edc2 0a02 	vstr	s1, [r2, #8]
 80025be:	ee21 1a00 	vmul.f32	s2, s2, s0
 80025c2:	ed82 1a03 	vstr	s2, [r2, #12]
 80025c6:	f102 0210 	add.w	r2, r2, #16
 80025ca:	d1e3      	bne.n	8002594 <forward_ap+0x210>
 80025cc:	980e      	ldr	r0, [sp, #56]	; 0x38
 80025ce:	1e5b      	subs	r3, r3, #1
 80025d0:	eb07 0780 	add.w	r7, r7, r0, lsl #2
 80025d4:	f47f af63 	bne.w	800249e <forward_ap+0x11a>
 80025d8:	9800      	ldr	r0, [sp, #0]
 80025da:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80025dc:	1810      	adds	r0, r2, r0
 80025de:	9000      	str	r0, [sp, #0]
 80025e0:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 80025e4:	9802      	ldr	r0, [sp, #8]
 80025e6:	1e40      	subs	r0, r0, #1
 80025e8:	9002      	str	r0, [sp, #8]
 80025ea:	f47f af1a 	bne.w	8002422 <forward_ap+0x9e>
 80025ee:	9a05      	ldr	r2, [sp, #20]
 80025f0:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80025f4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 80025f8:	f8dd e020 	ldr.w	lr, [sp, #32]
 80025fc:	9c01      	ldr	r4, [sp, #4]
 80025fe:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8002600:	191c      	adds	r4, r3, r4
 8002602:	9401      	str	r4, [sp, #4]
 8002604:	9c03      	ldr	r4, [sp, #12]
 8002606:	1e64      	subs	r4, r4, #1
 8002608:	9403      	str	r4, [sp, #12]
 800260a:	f47f aee6 	bne.w	80023da <forward_ap+0x56>
 800260e:	b014      	add	sp, #80	; 0x50
 8002610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002614 <ai_math_dot_array>:
 8002614:	b530      	push	{r4, r5, lr}
 8002616:	4604      	mov	r4, r0
 8002618:	4608      	mov	r0, r1
 800261a:	b081      	sub	sp, #4
 800261c:	4611      	mov	r1, r2
 800261e:	461a      	mov	r2, r3
 8002620:	2500      	movs	r5, #0
 8002622:	9500      	str	r5, [sp, #0]
 8002624:	466b      	mov	r3, sp
 8002626:	f002 fa5d 	bl	8004ae4 <arm_dot_prod_f32>
 800262a:	ed94 0a00 	vldr	s0, [r4]
 800262e:	eddd 0a00 	vldr	s1, [sp]
 8002632:	ee70 0a20 	vadd.f32	s1, s0, s1
 8002636:	edc4 0a00 	vstr	s1, [r4]
 800263a:	b001      	add	sp, #4
 800263c:	bd30      	pop	{r4, r5, pc}
	...

08002640 <ai_math_sqrt>:
 8002640:	eef0 0a40 	vmov.f32	s1, s0
 8002644:	eef5 0a40 	vcmp.f32	s1, #0.0
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	ed9f 0a28 	vldr	s0, [pc, #160]	; 80026f0 <.text_12>
 8002650:	db01      	blt.n	8002656 <ai_math_sqrt+0x16>
 8002652:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8002656:	4770      	bx	lr

08002658 <ai_math_exp>:
 8002658:	f007 ba12 	b.w	8009a80 <expf>

0800265c <ai_math_pow>:
 800265c:	f007 ba8a 	b.w	8009b74 <powf>

08002660 <ai_math_tanh>:
 8002660:	f007 b9bc 	b.w	80099dc <tanhf>

08002664 <ai_math_relu>:
 8002664:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002668:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800266c:	bfd8      	it	le
 800266e:	ed9f 0a20 	vldrle	s0, [pc, #128]	; 80026f0 <.text_12>
 8002672:	4770      	bx	lr

08002674 <ai_math_prelu>:
 8002674:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8002678:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800267c:	bfd8      	it	le
 800267e:	ee20 0a20 	vmulle.f32	s0, s0, s1
 8002682:	4770      	bx	lr

08002684 <ai_math_sigmoid>:
 8002684:	b500      	push	{lr}
 8002686:	b081      	sub	sp, #4
 8002688:	eeb1 0a40 	vneg.f32	s0, s0
 800268c:	f007 f9f8 	bl	8009a80 <expf>
 8002690:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002694:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002698:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800269c:	ee81 0a00 	vdiv.f32	s0, s2, s0
 80026a0:	b001      	add	sp, #4
 80026a2:	bd00      	pop	{pc}

080026a4 <ai_math_hard_sigmoid>:
 80026a4:	eef0 0a40 	vmov.f32	s1, s0
 80026a8:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80026f4 <.text_13>
 80026ac:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 80026b0:	ee00 0a81 	vmla.f32	s0, s1, s2
 80026b4:	eddf 0a10 	vldr	s1, [pc, #64]	; 80026f8 <.text_14>
 80026b8:	eeb4 0a60 	vcmp.f32	s0, s1
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	da07      	bge.n	80026d2 <ai_math_hard_sigmoid+0x2e>
 80026c2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ca:	d504      	bpl.n	80026d6 <ai_math_hard_sigmoid+0x32>
 80026cc:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80026f0 <.text_12>
 80026d0:	4770      	bx	lr
 80026d2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80026d6:	4770      	bx	lr

080026d8 <ai_math_sign>:
 80026d8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	bfcc      	ite	gt
 80026e2:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80026fc <.text_15>
 80026e6:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 8002700 <.text_16>
 80026ea:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80026ee:	4770      	bx	lr

080026f0 <.text_12>:
 80026f0:	00000000 	.word	0x00000000

080026f4 <.text_13>:
 80026f4:	3e4ccccd 	.word	0x3e4ccccd

080026f8 <.text_14>:
 80026f8:	3f800001 	.word	0x3f800001

080026fc <.text_15>:
 80026fc:	00000001 	.word	0x00000001

08002700 <.text_16>:
 8002700:	ffffffff 	.word	0xffffffff
	...

08002710 <memchr>:
 8002710:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002714:	2a10      	cmp	r2, #16
 8002716:	db2b      	blt.n	8002770 <memchr+0x60>
 8002718:	f010 0f07 	tst.w	r0, #7
 800271c:	d008      	beq.n	8002730 <memchr+0x20>
 800271e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002722:	3a01      	subs	r2, #1
 8002724:	428b      	cmp	r3, r1
 8002726:	d02d      	beq.n	8002784 <memchr+0x74>
 8002728:	f010 0f07 	tst.w	r0, #7
 800272c:	b342      	cbz	r2, 8002780 <memchr+0x70>
 800272e:	d1f6      	bne.n	800271e <memchr+0xe>
 8002730:	b4f0      	push	{r4, r5, r6, r7}
 8002732:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002736:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800273a:	f022 0407 	bic.w	r4, r2, #7
 800273e:	f07f 0700 	mvns.w	r7, #0
 8002742:	2300      	movs	r3, #0
 8002744:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002748:	3c08      	subs	r4, #8
 800274a:	ea85 0501 	eor.w	r5, r5, r1
 800274e:	ea86 0601 	eor.w	r6, r6, r1
 8002752:	fa85 f547 	uadd8	r5, r5, r7
 8002756:	faa3 f587 	sel	r5, r3, r7
 800275a:	fa86 f647 	uadd8	r6, r6, r7
 800275e:	faa5 f687 	sel	r6, r5, r7
 8002762:	b98e      	cbnz	r6, 8002788 <memchr+0x78>
 8002764:	d1ee      	bne.n	8002744 <memchr+0x34>
 8002766:	bcf0      	pop	{r4, r5, r6, r7}
 8002768:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800276c:	f002 0207 	and.w	r2, r2, #7
 8002770:	b132      	cbz	r2, 8002780 <memchr+0x70>
 8002772:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002776:	3a01      	subs	r2, #1
 8002778:	ea83 0301 	eor.w	r3, r3, r1
 800277c:	b113      	cbz	r3, 8002784 <memchr+0x74>
 800277e:	d1f8      	bne.n	8002772 <memchr+0x62>
 8002780:	2000      	movs	r0, #0
 8002782:	4770      	bx	lr
 8002784:	3801      	subs	r0, #1
 8002786:	4770      	bx	lr
 8002788:	2d00      	cmp	r5, #0
 800278a:	bf06      	itte	eq
 800278c:	4635      	moveq	r5, r6
 800278e:	3803      	subeq	r0, #3
 8002790:	3807      	subne	r0, #7
 8002792:	f015 0f01 	tst.w	r5, #1
 8002796:	d107      	bne.n	80027a8 <memchr+0x98>
 8002798:	3001      	adds	r0, #1
 800279a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800279e:	bf02      	ittt	eq
 80027a0:	3001      	addeq	r0, #1
 80027a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80027a6:	3001      	addeq	r0, #1
 80027a8:	bcf0      	pop	{r4, r5, r6, r7}
 80027aa:	3801      	subs	r0, #1
 80027ac:	4770      	bx	lr
 80027ae:	bf00      	nop

080027b0 <__aeabi_drsub>:
 80027b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80027b4:	e002      	b.n	80027bc <__adddf3>
 80027b6:	bf00      	nop

080027b8 <__aeabi_dsub>:
 80027b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080027bc <__adddf3>:
 80027bc:	b530      	push	{r4, r5, lr}
 80027be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80027c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80027c6:	ea94 0f05 	teq	r4, r5
 80027ca:	bf08      	it	eq
 80027cc:	ea90 0f02 	teqeq	r0, r2
 80027d0:	bf1f      	itttt	ne
 80027d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80027d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80027da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80027de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80027e2:	f000 80e2 	beq.w	80029aa <__adddf3+0x1ee>
 80027e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80027ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80027ee:	bfb8      	it	lt
 80027f0:	426d      	neglt	r5, r5
 80027f2:	dd0c      	ble.n	800280e <__adddf3+0x52>
 80027f4:	442c      	add	r4, r5
 80027f6:	ea80 0202 	eor.w	r2, r0, r2
 80027fa:	ea81 0303 	eor.w	r3, r1, r3
 80027fe:	ea82 0000 	eor.w	r0, r2, r0
 8002802:	ea83 0101 	eor.w	r1, r3, r1
 8002806:	ea80 0202 	eor.w	r2, r0, r2
 800280a:	ea81 0303 	eor.w	r3, r1, r3
 800280e:	2d36      	cmp	r5, #54	; 0x36
 8002810:	bf88      	it	hi
 8002812:	bd30      	pophi	{r4, r5, pc}
 8002814:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800281c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002820:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002824:	d002      	beq.n	800282c <__adddf3+0x70>
 8002826:	4240      	negs	r0, r0
 8002828:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800282c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002830:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002834:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002838:	d002      	beq.n	8002840 <__adddf3+0x84>
 800283a:	4252      	negs	r2, r2
 800283c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002840:	ea94 0f05 	teq	r4, r5
 8002844:	f000 80a7 	beq.w	8002996 <__adddf3+0x1da>
 8002848:	f1a4 0401 	sub.w	r4, r4, #1
 800284c:	f1d5 0e20 	rsbs	lr, r5, #32
 8002850:	db0d      	blt.n	800286e <__adddf3+0xb2>
 8002852:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002856:	fa22 f205 	lsr.w	r2, r2, r5
 800285a:	1880      	adds	r0, r0, r2
 800285c:	f141 0100 	adc.w	r1, r1, #0
 8002860:	fa03 f20e 	lsl.w	r2, r3, lr
 8002864:	1880      	adds	r0, r0, r2
 8002866:	fa43 f305 	asr.w	r3, r3, r5
 800286a:	4159      	adcs	r1, r3
 800286c:	e00e      	b.n	800288c <__adddf3+0xd0>
 800286e:	f1a5 0520 	sub.w	r5, r5, #32
 8002872:	f10e 0e20 	add.w	lr, lr, #32
 8002876:	2a01      	cmp	r2, #1
 8002878:	fa03 fc0e 	lsl.w	ip, r3, lr
 800287c:	bf28      	it	cs
 800287e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002882:	fa43 f305 	asr.w	r3, r3, r5
 8002886:	18c0      	adds	r0, r0, r3
 8002888:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800288c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002890:	d507      	bpl.n	80028a2 <__adddf3+0xe6>
 8002892:	f04f 0e00 	mov.w	lr, #0
 8002896:	f1dc 0c00 	rsbs	ip, ip, #0
 800289a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800289e:	eb6e 0101 	sbc.w	r1, lr, r1
 80028a2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80028a6:	d31b      	bcc.n	80028e0 <__adddf3+0x124>
 80028a8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80028ac:	d30c      	bcc.n	80028c8 <__adddf3+0x10c>
 80028ae:	0849      	lsrs	r1, r1, #1
 80028b0:	ea5f 0030 	movs.w	r0, r0, rrx
 80028b4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80028b8:	f104 0401 	add.w	r4, r4, #1
 80028bc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80028c0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80028c4:	f080 809a 	bcs.w	80029fc <__adddf3+0x240>
 80028c8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80028cc:	bf08      	it	eq
 80028ce:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80028d2:	f150 0000 	adcs.w	r0, r0, #0
 80028d6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80028da:	ea41 0105 	orr.w	r1, r1, r5
 80028de:	bd30      	pop	{r4, r5, pc}
 80028e0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80028e4:	4140      	adcs	r0, r0
 80028e6:	eb41 0101 	adc.w	r1, r1, r1
 80028ea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80028ee:	f1a4 0401 	sub.w	r4, r4, #1
 80028f2:	d1e9      	bne.n	80028c8 <__adddf3+0x10c>
 80028f4:	f091 0f00 	teq	r1, #0
 80028f8:	bf04      	itt	eq
 80028fa:	4601      	moveq	r1, r0
 80028fc:	2000      	moveq	r0, #0
 80028fe:	fab1 f381 	clz	r3, r1
 8002902:	bf08      	it	eq
 8002904:	3320      	addeq	r3, #32
 8002906:	f1a3 030b 	sub.w	r3, r3, #11
 800290a:	f1b3 0220 	subs.w	r2, r3, #32
 800290e:	da0c      	bge.n	800292a <__adddf3+0x16e>
 8002910:	320c      	adds	r2, #12
 8002912:	dd08      	ble.n	8002926 <__adddf3+0x16a>
 8002914:	f102 0c14 	add.w	ip, r2, #20
 8002918:	f1c2 020c 	rsb	r2, r2, #12
 800291c:	fa01 f00c 	lsl.w	r0, r1, ip
 8002920:	fa21 f102 	lsr.w	r1, r1, r2
 8002924:	e00c      	b.n	8002940 <__adddf3+0x184>
 8002926:	f102 0214 	add.w	r2, r2, #20
 800292a:	bfd8      	it	le
 800292c:	f1c2 0c20 	rsble	ip, r2, #32
 8002930:	fa01 f102 	lsl.w	r1, r1, r2
 8002934:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002938:	bfdc      	itt	le
 800293a:	ea41 010c 	orrle.w	r1, r1, ip
 800293e:	4090      	lslle	r0, r2
 8002940:	1ae4      	subs	r4, r4, r3
 8002942:	bfa2      	ittt	ge
 8002944:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002948:	4329      	orrge	r1, r5
 800294a:	bd30      	popge	{r4, r5, pc}
 800294c:	ea6f 0404 	mvn.w	r4, r4
 8002950:	3c1f      	subs	r4, #31
 8002952:	da1c      	bge.n	800298e <__adddf3+0x1d2>
 8002954:	340c      	adds	r4, #12
 8002956:	dc0e      	bgt.n	8002976 <__adddf3+0x1ba>
 8002958:	f104 0414 	add.w	r4, r4, #20
 800295c:	f1c4 0220 	rsb	r2, r4, #32
 8002960:	fa20 f004 	lsr.w	r0, r0, r4
 8002964:	fa01 f302 	lsl.w	r3, r1, r2
 8002968:	ea40 0003 	orr.w	r0, r0, r3
 800296c:	fa21 f304 	lsr.w	r3, r1, r4
 8002970:	ea45 0103 	orr.w	r1, r5, r3
 8002974:	bd30      	pop	{r4, r5, pc}
 8002976:	f1c4 040c 	rsb	r4, r4, #12
 800297a:	f1c4 0220 	rsb	r2, r4, #32
 800297e:	fa20 f002 	lsr.w	r0, r0, r2
 8002982:	fa01 f304 	lsl.w	r3, r1, r4
 8002986:	ea40 0003 	orr.w	r0, r0, r3
 800298a:	4629      	mov	r1, r5
 800298c:	bd30      	pop	{r4, r5, pc}
 800298e:	fa21 f004 	lsr.w	r0, r1, r4
 8002992:	4629      	mov	r1, r5
 8002994:	bd30      	pop	{r4, r5, pc}
 8002996:	f094 0f00 	teq	r4, #0
 800299a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800299e:	bf06      	itte	eq
 80029a0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80029a4:	3401      	addeq	r4, #1
 80029a6:	3d01      	subne	r5, #1
 80029a8:	e74e      	b.n	8002848 <__adddf3+0x8c>
 80029aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80029ae:	bf18      	it	ne
 80029b0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80029b4:	d029      	beq.n	8002a0a <__adddf3+0x24e>
 80029b6:	ea94 0f05 	teq	r4, r5
 80029ba:	bf08      	it	eq
 80029bc:	ea90 0f02 	teqeq	r0, r2
 80029c0:	d005      	beq.n	80029ce <__adddf3+0x212>
 80029c2:	ea54 0c00 	orrs.w	ip, r4, r0
 80029c6:	bf04      	itt	eq
 80029c8:	4619      	moveq	r1, r3
 80029ca:	4610      	moveq	r0, r2
 80029cc:	bd30      	pop	{r4, r5, pc}
 80029ce:	ea91 0f03 	teq	r1, r3
 80029d2:	bf1e      	ittt	ne
 80029d4:	2100      	movne	r1, #0
 80029d6:	2000      	movne	r0, #0
 80029d8:	bd30      	popne	{r4, r5, pc}
 80029da:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80029de:	d105      	bne.n	80029ec <__adddf3+0x230>
 80029e0:	0040      	lsls	r0, r0, #1
 80029e2:	4149      	adcs	r1, r1
 80029e4:	bf28      	it	cs
 80029e6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80029ea:	bd30      	pop	{r4, r5, pc}
 80029ec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80029f0:	bf3c      	itt	cc
 80029f2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80029f6:	bd30      	popcc	{r4, r5, pc}
 80029f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80029fc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002a00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	bd30      	pop	{r4, r5, pc}
 8002a0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002a0e:	bf1a      	itte	ne
 8002a10:	4619      	movne	r1, r3
 8002a12:	4610      	movne	r0, r2
 8002a14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002a18:	bf1c      	itt	ne
 8002a1a:	460b      	movne	r3, r1
 8002a1c:	4602      	movne	r2, r0
 8002a1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002a22:	bf06      	itte	eq
 8002a24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002a28:	ea91 0f03 	teqeq	r1, r3
 8002a2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002a30:	bd30      	pop	{r4, r5, pc}
 8002a32:	bf00      	nop

08002a34 <__aeabi_ui2d>:
 8002a34:	f090 0f00 	teq	r0, #0
 8002a38:	bf04      	itt	eq
 8002a3a:	2100      	moveq	r1, #0
 8002a3c:	4770      	bxeq	lr
 8002a3e:	b530      	push	{r4, r5, lr}
 8002a40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002a44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002a48:	f04f 0500 	mov.w	r5, #0
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	e750      	b.n	80028f4 <__adddf3+0x138>
 8002a52:	bf00      	nop

08002a54 <__aeabi_i2d>:
 8002a54:	f090 0f00 	teq	r0, #0
 8002a58:	bf04      	itt	eq
 8002a5a:	2100      	moveq	r1, #0
 8002a5c:	4770      	bxeq	lr
 8002a5e:	b530      	push	{r4, r5, lr}
 8002a60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002a64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002a68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002a6c:	bf48      	it	mi
 8002a6e:	4240      	negmi	r0, r0
 8002a70:	f04f 0100 	mov.w	r1, #0
 8002a74:	e73e      	b.n	80028f4 <__adddf3+0x138>
 8002a76:	bf00      	nop

08002a78 <__aeabi_f2d>:
 8002a78:	0042      	lsls	r2, r0, #1
 8002a7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002a7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002a82:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002a86:	bf1f      	itttt	ne
 8002a88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002a8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002a90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002a94:	4770      	bxne	lr
 8002a96:	f092 0f00 	teq	r2, #0
 8002a9a:	bf14      	ite	ne
 8002a9c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002aa0:	4770      	bxeq	lr
 8002aa2:	b530      	push	{r4, r5, lr}
 8002aa4:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002aa8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002aac:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002ab0:	e720      	b.n	80028f4 <__adddf3+0x138>
 8002ab2:	bf00      	nop

08002ab4 <__aeabi_ul2d>:
 8002ab4:	ea50 0201 	orrs.w	r2, r0, r1
 8002ab8:	bf08      	it	eq
 8002aba:	4770      	bxeq	lr
 8002abc:	b530      	push	{r4, r5, lr}
 8002abe:	f04f 0500 	mov.w	r5, #0
 8002ac2:	e00a      	b.n	8002ada <__aeabi_l2d+0x16>

08002ac4 <__aeabi_l2d>:
 8002ac4:	ea50 0201 	orrs.w	r2, r0, r1
 8002ac8:	bf08      	it	eq
 8002aca:	4770      	bxeq	lr
 8002acc:	b530      	push	{r4, r5, lr}
 8002ace:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002ad2:	d502      	bpl.n	8002ada <__aeabi_l2d+0x16>
 8002ad4:	4240      	negs	r0, r0
 8002ad6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002ada:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002ade:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002ae2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002ae6:	f43f aedc 	beq.w	80028a2 <__adddf3+0xe6>
 8002aea:	f04f 0203 	mov.w	r2, #3
 8002aee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002af2:	bf18      	it	ne
 8002af4:	3203      	addne	r2, #3
 8002af6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002afa:	bf18      	it	ne
 8002afc:	3203      	addne	r2, #3
 8002afe:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002b02:	f1c2 0320 	rsb	r3, r2, #32
 8002b06:	fa00 fc03 	lsl.w	ip, r0, r3
 8002b0a:	fa20 f002 	lsr.w	r0, r0, r2
 8002b0e:	fa01 fe03 	lsl.w	lr, r1, r3
 8002b12:	ea40 000e 	orr.w	r0, r0, lr
 8002b16:	fa21 f102 	lsr.w	r1, r1, r2
 8002b1a:	4414      	add	r4, r2
 8002b1c:	e6c1      	b.n	80028a2 <__adddf3+0xe6>
 8002b1e:	bf00      	nop

08002b20 <__aeabi_dmul>:
 8002b20:	b570      	push	{r4, r5, r6, lr}
 8002b22:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002b26:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002b2a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002b2e:	bf1d      	ittte	ne
 8002b30:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002b34:	ea94 0f0c 	teqne	r4, ip
 8002b38:	ea95 0f0c 	teqne	r5, ip
 8002b3c:	f000 f8de 	bleq	8002cfc <__aeabi_dmul+0x1dc>
 8002b40:	442c      	add	r4, r5
 8002b42:	ea81 0603 	eor.w	r6, r1, r3
 8002b46:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002b4a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002b4e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002b52:	bf18      	it	ne
 8002b54:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002b58:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002b5c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002b60:	d038      	beq.n	8002bd4 <__aeabi_dmul+0xb4>
 8002b62:	fba0 ce02 	umull	ip, lr, r0, r2
 8002b66:	f04f 0500 	mov.w	r5, #0
 8002b6a:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002b6e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002b72:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002b76:	f04f 0600 	mov.w	r6, #0
 8002b7a:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002b7e:	f09c 0f00 	teq	ip, #0
 8002b82:	bf18      	it	ne
 8002b84:	f04e 0e01 	orrne.w	lr, lr, #1
 8002b88:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002b8c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002b90:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002b94:	d204      	bcs.n	8002ba0 <__aeabi_dmul+0x80>
 8002b96:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002b9a:	416d      	adcs	r5, r5
 8002b9c:	eb46 0606 	adc.w	r6, r6, r6
 8002ba0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002ba4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002ba8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002bac:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002bb0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002bb4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002bb8:	bf88      	it	hi
 8002bba:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002bbe:	d81e      	bhi.n	8002bfe <__aeabi_dmul+0xde>
 8002bc0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002bc4:	bf08      	it	eq
 8002bc6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002bca:	f150 0000 	adcs.w	r0, r0, #0
 8002bce:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002bd2:	bd70      	pop	{r4, r5, r6, pc}
 8002bd4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002bd8:	ea46 0101 	orr.w	r1, r6, r1
 8002bdc:	ea40 0002 	orr.w	r0, r0, r2
 8002be0:	ea81 0103 	eor.w	r1, r1, r3
 8002be4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002be8:	bfc2      	ittt	gt
 8002bea:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002bee:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002bf2:	bd70      	popgt	{r4, r5, r6, pc}
 8002bf4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002bf8:	f04f 0e00 	mov.w	lr, #0
 8002bfc:	3c01      	subs	r4, #1
 8002bfe:	f300 80ab 	bgt.w	8002d58 <__aeabi_dmul+0x238>
 8002c02:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002c06:	bfde      	ittt	le
 8002c08:	2000      	movle	r0, #0
 8002c0a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002c0e:	bd70      	pople	{r4, r5, r6, pc}
 8002c10:	f1c4 0400 	rsb	r4, r4, #0
 8002c14:	3c20      	subs	r4, #32
 8002c16:	da35      	bge.n	8002c84 <__aeabi_dmul+0x164>
 8002c18:	340c      	adds	r4, #12
 8002c1a:	dc1b      	bgt.n	8002c54 <__aeabi_dmul+0x134>
 8002c1c:	f104 0414 	add.w	r4, r4, #20
 8002c20:	f1c4 0520 	rsb	r5, r4, #32
 8002c24:	fa00 f305 	lsl.w	r3, r0, r5
 8002c28:	fa20 f004 	lsr.w	r0, r0, r4
 8002c2c:	fa01 f205 	lsl.w	r2, r1, r5
 8002c30:	ea40 0002 	orr.w	r0, r0, r2
 8002c34:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002c38:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002c3c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002c40:	fa21 f604 	lsr.w	r6, r1, r4
 8002c44:	eb42 0106 	adc.w	r1, r2, r6
 8002c48:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002c4c:	bf08      	it	eq
 8002c4e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002c52:	bd70      	pop	{r4, r5, r6, pc}
 8002c54:	f1c4 040c 	rsb	r4, r4, #12
 8002c58:	f1c4 0520 	rsb	r5, r4, #32
 8002c5c:	fa00 f304 	lsl.w	r3, r0, r4
 8002c60:	fa20 f005 	lsr.w	r0, r0, r5
 8002c64:	fa01 f204 	lsl.w	r2, r1, r4
 8002c68:	ea40 0002 	orr.w	r0, r0, r2
 8002c6c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002c70:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002c74:	f141 0100 	adc.w	r1, r1, #0
 8002c78:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002c7c:	bf08      	it	eq
 8002c7e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002c82:	bd70      	pop	{r4, r5, r6, pc}
 8002c84:	f1c4 0520 	rsb	r5, r4, #32
 8002c88:	fa00 f205 	lsl.w	r2, r0, r5
 8002c8c:	ea4e 0e02 	orr.w	lr, lr, r2
 8002c90:	fa20 f304 	lsr.w	r3, r0, r4
 8002c94:	fa01 f205 	lsl.w	r2, r1, r5
 8002c98:	ea43 0302 	orr.w	r3, r3, r2
 8002c9c:	fa21 f004 	lsr.w	r0, r1, r4
 8002ca0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002ca4:	fa21 f204 	lsr.w	r2, r1, r4
 8002ca8:	ea20 0002 	bic.w	r0, r0, r2
 8002cac:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002cb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002cb4:	bf08      	it	eq
 8002cb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002cba:	bd70      	pop	{r4, r5, r6, pc}
 8002cbc:	f094 0f00 	teq	r4, #0
 8002cc0:	d10f      	bne.n	8002ce2 <__aeabi_dmul+0x1c2>
 8002cc2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002cc6:	0040      	lsls	r0, r0, #1
 8002cc8:	eb41 0101 	adc.w	r1, r1, r1
 8002ccc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002cd0:	bf08      	it	eq
 8002cd2:	3c01      	subeq	r4, #1
 8002cd4:	d0f7      	beq.n	8002cc6 <__aeabi_dmul+0x1a6>
 8002cd6:	ea41 0106 	orr.w	r1, r1, r6
 8002cda:	f095 0f00 	teq	r5, #0
 8002cde:	bf18      	it	ne
 8002ce0:	4770      	bxne	lr
 8002ce2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002ce6:	0052      	lsls	r2, r2, #1
 8002ce8:	eb43 0303 	adc.w	r3, r3, r3
 8002cec:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002cf0:	bf08      	it	eq
 8002cf2:	3d01      	subeq	r5, #1
 8002cf4:	d0f7      	beq.n	8002ce6 <__aeabi_dmul+0x1c6>
 8002cf6:	ea43 0306 	orr.w	r3, r3, r6
 8002cfa:	4770      	bx	lr
 8002cfc:	ea94 0f0c 	teq	r4, ip
 8002d00:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002d04:	bf18      	it	ne
 8002d06:	ea95 0f0c 	teqne	r5, ip
 8002d0a:	d00c      	beq.n	8002d26 <__aeabi_dmul+0x206>
 8002d0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002d10:	bf18      	it	ne
 8002d12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002d16:	d1d1      	bne.n	8002cbc <__aeabi_dmul+0x19c>
 8002d18:	ea81 0103 	eor.w	r1, r1, r3
 8002d1c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	bd70      	pop	{r4, r5, r6, pc}
 8002d26:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002d2a:	bf06      	itte	eq
 8002d2c:	4610      	moveq	r0, r2
 8002d2e:	4619      	moveq	r1, r3
 8002d30:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002d34:	d019      	beq.n	8002d6a <__aeabi_dmul+0x24a>
 8002d36:	ea94 0f0c 	teq	r4, ip
 8002d3a:	d102      	bne.n	8002d42 <__aeabi_dmul+0x222>
 8002d3c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002d40:	d113      	bne.n	8002d6a <__aeabi_dmul+0x24a>
 8002d42:	ea95 0f0c 	teq	r5, ip
 8002d46:	d105      	bne.n	8002d54 <__aeabi_dmul+0x234>
 8002d48:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002d4c:	bf1c      	itt	ne
 8002d4e:	4610      	movne	r0, r2
 8002d50:	4619      	movne	r1, r3
 8002d52:	d10a      	bne.n	8002d6a <__aeabi_dmul+0x24a>
 8002d54:	ea81 0103 	eor.w	r1, r1, r3
 8002d58:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002d5c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002d60:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002d64:	f04f 0000 	mov.w	r0, #0
 8002d68:	bd70      	pop	{r4, r5, r6, pc}
 8002d6a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002d6e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002d72:	bd70      	pop	{r4, r5, r6, pc}

08002d74 <__aeabi_ddiv>:
 8002d74:	b570      	push	{r4, r5, r6, lr}
 8002d76:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002d7a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002d7e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002d82:	bf1d      	ittte	ne
 8002d84:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002d88:	ea94 0f0c 	teqne	r4, ip
 8002d8c:	ea95 0f0c 	teqne	r5, ip
 8002d90:	f000 f8a7 	bleq	8002ee2 <__aeabi_ddiv+0x16e>
 8002d94:	eba4 0405 	sub.w	r4, r4, r5
 8002d98:	ea81 0e03 	eor.w	lr, r1, r3
 8002d9c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002da0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002da4:	f000 8088 	beq.w	8002eb8 <__aeabi_ddiv+0x144>
 8002da8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002dac:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002db0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002db4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002db8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8002dbc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002dc0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002dc4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002dc8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8002dcc:	429d      	cmp	r5, r3
 8002dce:	bf08      	it	eq
 8002dd0:	4296      	cmpeq	r6, r2
 8002dd2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002dd6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8002dda:	d202      	bcs.n	8002de2 <__aeabi_ddiv+0x6e>
 8002ddc:	085b      	lsrs	r3, r3, #1
 8002dde:	ea4f 0232 	mov.w	r2, r2, rrx
 8002de2:	1ab6      	subs	r6, r6, r2
 8002de4:	eb65 0503 	sbc.w	r5, r5, r3
 8002de8:	085b      	lsrs	r3, r3, #1
 8002dea:	ea4f 0232 	mov.w	r2, r2, rrx
 8002dee:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002df2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002df6:	ebb6 0e02 	subs.w	lr, r6, r2
 8002dfa:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002dfe:	bf22      	ittt	cs
 8002e00:	1ab6      	subcs	r6, r6, r2
 8002e02:	4675      	movcs	r5, lr
 8002e04:	ea40 000c 	orrcs.w	r0, r0, ip
 8002e08:	085b      	lsrs	r3, r3, #1
 8002e0a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e0e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002e12:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002e16:	bf22      	ittt	cs
 8002e18:	1ab6      	subcs	r6, r6, r2
 8002e1a:	4675      	movcs	r5, lr
 8002e1c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8002e20:	085b      	lsrs	r3, r3, #1
 8002e22:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e26:	ebb6 0e02 	subs.w	lr, r6, r2
 8002e2a:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002e2e:	bf22      	ittt	cs
 8002e30:	1ab6      	subcs	r6, r6, r2
 8002e32:	4675      	movcs	r5, lr
 8002e34:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8002e38:	085b      	lsrs	r3, r3, #1
 8002e3a:	ea4f 0232 	mov.w	r2, r2, rrx
 8002e3e:	ebb6 0e02 	subs.w	lr, r6, r2
 8002e42:	eb75 0e03 	sbcs.w	lr, r5, r3
 8002e46:	bf22      	ittt	cs
 8002e48:	1ab6      	subcs	r6, r6, r2
 8002e4a:	4675      	movcs	r5, lr
 8002e4c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8002e50:	ea55 0e06 	orrs.w	lr, r5, r6
 8002e54:	d018      	beq.n	8002e88 <__aeabi_ddiv+0x114>
 8002e56:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8002e5a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8002e5e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8002e62:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8002e66:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8002e6a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8002e6e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002e72:	d1c0      	bne.n	8002df6 <__aeabi_ddiv+0x82>
 8002e74:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002e78:	d10b      	bne.n	8002e92 <__aeabi_ddiv+0x11e>
 8002e7a:	ea41 0100 	orr.w	r1, r1, r0
 8002e7e:	f04f 0000 	mov.w	r0, #0
 8002e82:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002e86:	e7b6      	b.n	8002df6 <__aeabi_ddiv+0x82>
 8002e88:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002e8c:	bf04      	itt	eq
 8002e8e:	4301      	orreq	r1, r0
 8002e90:	2000      	moveq	r0, #0
 8002e92:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002e96:	bf88      	it	hi
 8002e98:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002e9c:	f63f aeaf 	bhi.w	8002bfe <__aeabi_dmul+0xde>
 8002ea0:	ebb5 0c03 	subs.w	ip, r5, r3
 8002ea4:	bf04      	itt	eq
 8002ea6:	ebb6 0c02 	subseq.w	ip, r6, r2
 8002eaa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002eae:	f150 0000 	adcs.w	r0, r0, #0
 8002eb2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002eb6:	bd70      	pop	{r4, r5, r6, pc}
 8002eb8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8002ebc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002ec0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002ec4:	bfc2      	ittt	gt
 8002ec6:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002eca:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002ece:	bd70      	popgt	{r4, r5, r6, pc}
 8002ed0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002ed4:	f04f 0e00 	mov.w	lr, #0
 8002ed8:	3c01      	subs	r4, #1
 8002eda:	e690      	b.n	8002bfe <__aeabi_dmul+0xde>
 8002edc:	ea45 0e06 	orr.w	lr, r5, r6
 8002ee0:	e68d      	b.n	8002bfe <__aeabi_dmul+0xde>
 8002ee2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002ee6:	ea94 0f0c 	teq	r4, ip
 8002eea:	bf08      	it	eq
 8002eec:	ea95 0f0c 	teqeq	r5, ip
 8002ef0:	f43f af3b 	beq.w	8002d6a <__aeabi_dmul+0x24a>
 8002ef4:	ea94 0f0c 	teq	r4, ip
 8002ef8:	d10a      	bne.n	8002f10 <__aeabi_ddiv+0x19c>
 8002efa:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002efe:	f47f af34 	bne.w	8002d6a <__aeabi_dmul+0x24a>
 8002f02:	ea95 0f0c 	teq	r5, ip
 8002f06:	f47f af25 	bne.w	8002d54 <__aeabi_dmul+0x234>
 8002f0a:	4610      	mov	r0, r2
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	e72c      	b.n	8002d6a <__aeabi_dmul+0x24a>
 8002f10:	ea95 0f0c 	teq	r5, ip
 8002f14:	d106      	bne.n	8002f24 <__aeabi_ddiv+0x1b0>
 8002f16:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002f1a:	f43f aefd 	beq.w	8002d18 <__aeabi_dmul+0x1f8>
 8002f1e:	4610      	mov	r0, r2
 8002f20:	4619      	mov	r1, r3
 8002f22:	e722      	b.n	8002d6a <__aeabi_dmul+0x24a>
 8002f24:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8002f28:	bf18      	it	ne
 8002f2a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8002f2e:	f47f aec5 	bne.w	8002cbc <__aeabi_dmul+0x19c>
 8002f32:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8002f36:	f47f af0d 	bne.w	8002d54 <__aeabi_dmul+0x234>
 8002f3a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8002f3e:	f47f aeeb 	bne.w	8002d18 <__aeabi_dmul+0x1f8>
 8002f42:	e712      	b.n	8002d6a <__aeabi_dmul+0x24a>

08002f44 <__gedf2>:
 8002f44:	f04f 3cff 	mov.w	ip, #4294967295
 8002f48:	e006      	b.n	8002f58 <__cmpdf2+0x4>
 8002f4a:	bf00      	nop

08002f4c <__ledf2>:
 8002f4c:	f04f 0c01 	mov.w	ip, #1
 8002f50:	e002      	b.n	8002f58 <__cmpdf2+0x4>
 8002f52:	bf00      	nop

08002f54 <__cmpdf2>:
 8002f54:	f04f 0c01 	mov.w	ip, #1
 8002f58:	f84d cd04 	str.w	ip, [sp, #-4]!
 8002f5c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002f60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002f64:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002f68:	bf18      	it	ne
 8002f6a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8002f6e:	d01b      	beq.n	8002fa8 <__cmpdf2+0x54>
 8002f70:	b001      	add	sp, #4
 8002f72:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002f76:	bf0c      	ite	eq
 8002f78:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8002f7c:	ea91 0f03 	teqne	r1, r3
 8002f80:	bf02      	ittt	eq
 8002f82:	ea90 0f02 	teqeq	r0, r2
 8002f86:	2000      	moveq	r0, #0
 8002f88:	4770      	bxeq	lr
 8002f8a:	f110 0f00 	cmn.w	r0, #0
 8002f8e:	ea91 0f03 	teq	r1, r3
 8002f92:	bf58      	it	pl
 8002f94:	4299      	cmppl	r1, r3
 8002f96:	bf08      	it	eq
 8002f98:	4290      	cmpeq	r0, r2
 8002f9a:	bf2c      	ite	cs
 8002f9c:	17d8      	asrcs	r0, r3, #31
 8002f9e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002fa2:	f040 0001 	orr.w	r0, r0, #1
 8002fa6:	4770      	bx	lr
 8002fa8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8002fac:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fb0:	d102      	bne.n	8002fb8 <__cmpdf2+0x64>
 8002fb2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002fb6:	d107      	bne.n	8002fc8 <__cmpdf2+0x74>
 8002fb8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8002fbc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002fc0:	d1d6      	bne.n	8002f70 <__cmpdf2+0x1c>
 8002fc2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002fc6:	d0d3      	beq.n	8002f70 <__cmpdf2+0x1c>
 8002fc8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8002fcc:	4770      	bx	lr
 8002fce:	bf00      	nop

08002fd0 <__aeabi_cdrcmple>:
 8002fd0:	4684      	mov	ip, r0
 8002fd2:	4610      	mov	r0, r2
 8002fd4:	4662      	mov	r2, ip
 8002fd6:	468c      	mov	ip, r1
 8002fd8:	4619      	mov	r1, r3
 8002fda:	4663      	mov	r3, ip
 8002fdc:	e000      	b.n	8002fe0 <__aeabi_cdcmpeq>
 8002fde:	bf00      	nop

08002fe0 <__aeabi_cdcmpeq>:
 8002fe0:	b501      	push	{r0, lr}
 8002fe2:	f7ff ffb7 	bl	8002f54 <__cmpdf2>
 8002fe6:	2800      	cmp	r0, #0
 8002fe8:	bf48      	it	mi
 8002fea:	f110 0f00 	cmnmi.w	r0, #0
 8002fee:	bd01      	pop	{r0, pc}

08002ff0 <__aeabi_dcmpeq>:
 8002ff0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002ff4:	f7ff fff4 	bl	8002fe0 <__aeabi_cdcmpeq>
 8002ff8:	bf0c      	ite	eq
 8002ffa:	2001      	moveq	r0, #1
 8002ffc:	2000      	movne	r0, #0
 8002ffe:	f85d fb08 	ldr.w	pc, [sp], #8
 8003002:	bf00      	nop

08003004 <__aeabi_dcmplt>:
 8003004:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003008:	f7ff ffea 	bl	8002fe0 <__aeabi_cdcmpeq>
 800300c:	bf34      	ite	cc
 800300e:	2001      	movcc	r0, #1
 8003010:	2000      	movcs	r0, #0
 8003012:	f85d fb08 	ldr.w	pc, [sp], #8
 8003016:	bf00      	nop

08003018 <__aeabi_dcmple>:
 8003018:	f84d ed08 	str.w	lr, [sp, #-8]!
 800301c:	f7ff ffe0 	bl	8002fe0 <__aeabi_cdcmpeq>
 8003020:	bf94      	ite	ls
 8003022:	2001      	movls	r0, #1
 8003024:	2000      	movhi	r0, #0
 8003026:	f85d fb08 	ldr.w	pc, [sp], #8
 800302a:	bf00      	nop

0800302c <__aeabi_dcmpge>:
 800302c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003030:	f7ff ffce 	bl	8002fd0 <__aeabi_cdrcmple>
 8003034:	bf94      	ite	ls
 8003036:	2001      	movls	r0, #1
 8003038:	2000      	movhi	r0, #0
 800303a:	f85d fb08 	ldr.w	pc, [sp], #8
 800303e:	bf00      	nop

08003040 <__aeabi_dcmpgt>:
 8003040:	f84d ed08 	str.w	lr, [sp, #-8]!
 8003044:	f7ff ffc4 	bl	8002fd0 <__aeabi_cdrcmple>
 8003048:	bf34      	ite	cc
 800304a:	2001      	movcc	r0, #1
 800304c:	2000      	movcs	r0, #0
 800304e:	f85d fb08 	ldr.w	pc, [sp], #8
 8003052:	bf00      	nop

08003054 <__aeabi_d2f>:
 8003054:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8003058:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800305c:	bf24      	itt	cs
 800305e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8003062:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8003066:	d90d      	bls.n	8003084 <__aeabi_d2f+0x30>
 8003068:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800306c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8003070:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8003074:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8003078:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800307c:	bf08      	it	eq
 800307e:	f020 0001 	biceq.w	r0, r0, #1
 8003082:	4770      	bx	lr
 8003084:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8003088:	d121      	bne.n	80030ce <__aeabi_d2f+0x7a>
 800308a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800308e:	bfbc      	itt	lt
 8003090:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8003094:	4770      	bxlt	lr
 8003096:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800309a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800309e:	f1c2 0218 	rsb	r2, r2, #24
 80030a2:	f1c2 0c20 	rsb	ip, r2, #32
 80030a6:	fa10 f30c 	lsls.w	r3, r0, ip
 80030aa:	fa20 f002 	lsr.w	r0, r0, r2
 80030ae:	bf18      	it	ne
 80030b0:	f040 0001 	orrne.w	r0, r0, #1
 80030b4:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80030b8:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80030bc:	fa03 fc0c 	lsl.w	ip, r3, ip
 80030c0:	ea40 000c 	orr.w	r0, r0, ip
 80030c4:	fa23 f302 	lsr.w	r3, r3, r2
 80030c8:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80030cc:	e7cc      	b.n	8003068 <__aeabi_d2f+0x14>
 80030ce:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80030d2:	d107      	bne.n	80030e4 <__aeabi_d2f+0x90>
 80030d4:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80030d8:	bf1e      	ittt	ne
 80030da:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80030de:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80030e2:	4770      	bxne	lr
 80030e4:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80030e8:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80030ec:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80030f0:	4770      	bx	lr
 80030f2:	bf00      	nop

080030f4 <__aeabi_uldivmod>:
 80030f4:	b953      	cbnz	r3, 800310c <__aeabi_uldivmod+0x18>
 80030f6:	b94a      	cbnz	r2, 800310c <__aeabi_uldivmod+0x18>
 80030f8:	2900      	cmp	r1, #0
 80030fa:	bf08      	it	eq
 80030fc:	2800      	cmpeq	r0, #0
 80030fe:	bf1c      	itt	ne
 8003100:	f04f 31ff 	movne.w	r1, #4294967295
 8003104:	f04f 30ff 	movne.w	r0, #4294967295
 8003108:	f000 b97a 	b.w	8003400 <__aeabi_idiv0>
 800310c:	f1ad 0c08 	sub.w	ip, sp, #8
 8003110:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003114:	f000 f806 	bl	8003124 <__udivmoddi4>
 8003118:	f8dd e004 	ldr.w	lr, [sp, #4]
 800311c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8003120:	b004      	add	sp, #16
 8003122:	4770      	bx	lr

08003124 <__udivmoddi4>:
 8003124:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003128:	468c      	mov	ip, r1
 800312a:	460d      	mov	r5, r1
 800312c:	4604      	mov	r4, r0
 800312e:	9e08      	ldr	r6, [sp, #32]
 8003130:	2b00      	cmp	r3, #0
 8003132:	d151      	bne.n	80031d8 <__udivmoddi4+0xb4>
 8003134:	428a      	cmp	r2, r1
 8003136:	4617      	mov	r7, r2
 8003138:	d96d      	bls.n	8003216 <__udivmoddi4+0xf2>
 800313a:	fab2 fe82 	clz	lr, r2
 800313e:	f1be 0f00 	cmp.w	lr, #0
 8003142:	d00b      	beq.n	800315c <__udivmoddi4+0x38>
 8003144:	f1ce 0c20 	rsb	ip, lr, #32
 8003148:	fa01 f50e 	lsl.w	r5, r1, lr
 800314c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003150:	fa02 f70e 	lsl.w	r7, r2, lr
 8003154:	ea4c 0c05 	orr.w	ip, ip, r5
 8003158:	fa00 f40e 	lsl.w	r4, r0, lr
 800315c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
 8003160:	0c25      	lsrs	r5, r4, #16
 8003162:	fbbc f8fa 	udiv	r8, ip, sl
 8003166:	fa1f f987 	uxth.w	r9, r7
 800316a:	fb0a cc18 	mls	ip, sl, r8, ip
 800316e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 8003172:	fb08 f309 	mul.w	r3, r8, r9
 8003176:	42ab      	cmp	r3, r5
 8003178:	d90a      	bls.n	8003190 <__udivmoddi4+0x6c>
 800317a:	19ed      	adds	r5, r5, r7
 800317c:	f108 32ff 	add.w	r2, r8, #4294967295
 8003180:	f080 8123 	bcs.w	80033ca <__udivmoddi4+0x2a6>
 8003184:	42ab      	cmp	r3, r5
 8003186:	f240 8120 	bls.w	80033ca <__udivmoddi4+0x2a6>
 800318a:	f1a8 0802 	sub.w	r8, r8, #2
 800318e:	443d      	add	r5, r7
 8003190:	1aed      	subs	r5, r5, r3
 8003192:	b2a4      	uxth	r4, r4
 8003194:	fbb5 f0fa 	udiv	r0, r5, sl
 8003198:	fb0a 5510 	mls	r5, sl, r0, r5
 800319c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80031a0:	fb00 f909 	mul.w	r9, r0, r9
 80031a4:	45a1      	cmp	r9, r4
 80031a6:	d909      	bls.n	80031bc <__udivmoddi4+0x98>
 80031a8:	19e4      	adds	r4, r4, r7
 80031aa:	f100 33ff 	add.w	r3, r0, #4294967295
 80031ae:	f080 810a 	bcs.w	80033c6 <__udivmoddi4+0x2a2>
 80031b2:	45a1      	cmp	r9, r4
 80031b4:	f240 8107 	bls.w	80033c6 <__udivmoddi4+0x2a2>
 80031b8:	3802      	subs	r0, #2
 80031ba:	443c      	add	r4, r7
 80031bc:	eba4 0409 	sub.w	r4, r4, r9
 80031c0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80031c4:	2100      	movs	r1, #0
 80031c6:	2e00      	cmp	r6, #0
 80031c8:	d061      	beq.n	800328e <__udivmoddi4+0x16a>
 80031ca:	fa24 f40e 	lsr.w	r4, r4, lr
 80031ce:	2300      	movs	r3, #0
 80031d0:	6034      	str	r4, [r6, #0]
 80031d2:	6073      	str	r3, [r6, #4]
 80031d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031d8:	428b      	cmp	r3, r1
 80031da:	d907      	bls.n	80031ec <__udivmoddi4+0xc8>
 80031dc:	2e00      	cmp	r6, #0
 80031de:	d054      	beq.n	800328a <__udivmoddi4+0x166>
 80031e0:	2100      	movs	r1, #0
 80031e2:	e886 0021 	stmia.w	r6, {r0, r5}
 80031e6:	4608      	mov	r0, r1
 80031e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80031ec:	fab3 f183 	clz	r1, r3
 80031f0:	2900      	cmp	r1, #0
 80031f2:	f040 808e 	bne.w	8003312 <__udivmoddi4+0x1ee>
 80031f6:	42ab      	cmp	r3, r5
 80031f8:	d302      	bcc.n	8003200 <__udivmoddi4+0xdc>
 80031fa:	4282      	cmp	r2, r0
 80031fc:	f200 80fa 	bhi.w	80033f4 <__udivmoddi4+0x2d0>
 8003200:	1a84      	subs	r4, r0, r2
 8003202:	eb65 0503 	sbc.w	r5, r5, r3
 8003206:	2001      	movs	r0, #1
 8003208:	46ac      	mov	ip, r5
 800320a:	2e00      	cmp	r6, #0
 800320c:	d03f      	beq.n	800328e <__udivmoddi4+0x16a>
 800320e:	e886 1010 	stmia.w	r6, {r4, ip}
 8003212:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003216:	b912      	cbnz	r2, 800321e <__udivmoddi4+0xfa>
 8003218:	2701      	movs	r7, #1
 800321a:	fbb7 f7f2 	udiv	r7, r7, r2
 800321e:	fab7 fe87 	clz	lr, r7
 8003222:	f1be 0f00 	cmp.w	lr, #0
 8003226:	d134      	bne.n	8003292 <__udivmoddi4+0x16e>
 8003228:	1beb      	subs	r3, r5, r7
 800322a:	0c3a      	lsrs	r2, r7, #16
 800322c:	fa1f fc87 	uxth.w	ip, r7
 8003230:	2101      	movs	r1, #1
 8003232:	fbb3 f8f2 	udiv	r8, r3, r2
 8003236:	0c25      	lsrs	r5, r4, #16
 8003238:	fb02 3318 	mls	r3, r2, r8, r3
 800323c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 8003240:	fb0c f308 	mul.w	r3, ip, r8
 8003244:	42ab      	cmp	r3, r5
 8003246:	d907      	bls.n	8003258 <__udivmoddi4+0x134>
 8003248:	19ed      	adds	r5, r5, r7
 800324a:	f108 30ff 	add.w	r0, r8, #4294967295
 800324e:	d202      	bcs.n	8003256 <__udivmoddi4+0x132>
 8003250:	42ab      	cmp	r3, r5
 8003252:	f200 80d1 	bhi.w	80033f8 <__udivmoddi4+0x2d4>
 8003256:	4680      	mov	r8, r0
 8003258:	1aed      	subs	r5, r5, r3
 800325a:	b2a3      	uxth	r3, r4
 800325c:	fbb5 f0f2 	udiv	r0, r5, r2
 8003260:	fb02 5510 	mls	r5, r2, r0, r5
 8003264:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
 8003268:	fb0c fc00 	mul.w	ip, ip, r0
 800326c:	45a4      	cmp	ip, r4
 800326e:	d907      	bls.n	8003280 <__udivmoddi4+0x15c>
 8003270:	19e4      	adds	r4, r4, r7
 8003272:	f100 33ff 	add.w	r3, r0, #4294967295
 8003276:	d202      	bcs.n	800327e <__udivmoddi4+0x15a>
 8003278:	45a4      	cmp	ip, r4
 800327a:	f200 80b8 	bhi.w	80033ee <__udivmoddi4+0x2ca>
 800327e:	4618      	mov	r0, r3
 8003280:	eba4 040c 	sub.w	r4, r4, ip
 8003284:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8003288:	e79d      	b.n	80031c6 <__udivmoddi4+0xa2>
 800328a:	4631      	mov	r1, r6
 800328c:	4630      	mov	r0, r6
 800328e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003292:	f1ce 0420 	rsb	r4, lr, #32
 8003296:	fa05 f30e 	lsl.w	r3, r5, lr
 800329a:	fa07 f70e 	lsl.w	r7, r7, lr
 800329e:	fa20 f804 	lsr.w	r8, r0, r4
 80032a2:	0c3a      	lsrs	r2, r7, #16
 80032a4:	fa25 f404 	lsr.w	r4, r5, r4
 80032a8:	ea48 0803 	orr.w	r8, r8, r3
 80032ac:	fbb4 f1f2 	udiv	r1, r4, r2
 80032b0:	ea4f 4518 	mov.w	r5, r8, lsr #16
 80032b4:	fb02 4411 	mls	r4, r2, r1, r4
 80032b8:	fa1f fc87 	uxth.w	ip, r7
 80032bc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
 80032c0:	fb01 f30c 	mul.w	r3, r1, ip
 80032c4:	42ab      	cmp	r3, r5
 80032c6:	fa00 f40e 	lsl.w	r4, r0, lr
 80032ca:	d909      	bls.n	80032e0 <__udivmoddi4+0x1bc>
 80032cc:	19ed      	adds	r5, r5, r7
 80032ce:	f101 30ff 	add.w	r0, r1, #4294967295
 80032d2:	f080 808a 	bcs.w	80033ea <__udivmoddi4+0x2c6>
 80032d6:	42ab      	cmp	r3, r5
 80032d8:	f240 8087 	bls.w	80033ea <__udivmoddi4+0x2c6>
 80032dc:	3902      	subs	r1, #2
 80032de:	443d      	add	r5, r7
 80032e0:	1aeb      	subs	r3, r5, r3
 80032e2:	fa1f f588 	uxth.w	r5, r8
 80032e6:	fbb3 f0f2 	udiv	r0, r3, r2
 80032ea:	fb02 3310 	mls	r3, r2, r0, r3
 80032ee:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
 80032f2:	fb00 f30c 	mul.w	r3, r0, ip
 80032f6:	42ab      	cmp	r3, r5
 80032f8:	d907      	bls.n	800330a <__udivmoddi4+0x1e6>
 80032fa:	19ed      	adds	r5, r5, r7
 80032fc:	f100 38ff 	add.w	r8, r0, #4294967295
 8003300:	d26f      	bcs.n	80033e2 <__udivmoddi4+0x2be>
 8003302:	42ab      	cmp	r3, r5
 8003304:	d96d      	bls.n	80033e2 <__udivmoddi4+0x2be>
 8003306:	3802      	subs	r0, #2
 8003308:	443d      	add	r5, r7
 800330a:	1aeb      	subs	r3, r5, r3
 800330c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8003310:	e78f      	b.n	8003232 <__udivmoddi4+0x10e>
 8003312:	f1c1 0720 	rsb	r7, r1, #32
 8003316:	fa22 f807 	lsr.w	r8, r2, r7
 800331a:	408b      	lsls	r3, r1
 800331c:	fa05 f401 	lsl.w	r4, r5, r1
 8003320:	ea48 0303 	orr.w	r3, r8, r3
 8003324:	fa20 fe07 	lsr.w	lr, r0, r7
 8003328:	ea4f 4c13 	mov.w	ip, r3, lsr #16
 800332c:	40fd      	lsrs	r5, r7
 800332e:	ea4e 0e04 	orr.w	lr, lr, r4
 8003332:	fbb5 f9fc 	udiv	r9, r5, ip
 8003336:	ea4f 441e 	mov.w	r4, lr, lsr #16
 800333a:	fb0c 5519 	mls	r5, ip, r9, r5
 800333e:	fa1f f883 	uxth.w	r8, r3
 8003342:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
 8003346:	fb09 f408 	mul.w	r4, r9, r8
 800334a:	42ac      	cmp	r4, r5
 800334c:	fa02 f201 	lsl.w	r2, r2, r1
 8003350:	fa00 fa01 	lsl.w	sl, r0, r1
 8003354:	d908      	bls.n	8003368 <__udivmoddi4+0x244>
 8003356:	18ed      	adds	r5, r5, r3
 8003358:	f109 30ff 	add.w	r0, r9, #4294967295
 800335c:	d243      	bcs.n	80033e6 <__udivmoddi4+0x2c2>
 800335e:	42ac      	cmp	r4, r5
 8003360:	d941      	bls.n	80033e6 <__udivmoddi4+0x2c2>
 8003362:	f1a9 0902 	sub.w	r9, r9, #2
 8003366:	441d      	add	r5, r3
 8003368:	1b2d      	subs	r5, r5, r4
 800336a:	fa1f fe8e 	uxth.w	lr, lr
 800336e:	fbb5 f0fc 	udiv	r0, r5, ip
 8003372:	fb0c 5510 	mls	r5, ip, r0, r5
 8003376:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
 800337a:	fb00 f808 	mul.w	r8, r0, r8
 800337e:	45a0      	cmp	r8, r4
 8003380:	d907      	bls.n	8003392 <__udivmoddi4+0x26e>
 8003382:	18e4      	adds	r4, r4, r3
 8003384:	f100 35ff 	add.w	r5, r0, #4294967295
 8003388:	d229      	bcs.n	80033de <__udivmoddi4+0x2ba>
 800338a:	45a0      	cmp	r8, r4
 800338c:	d927      	bls.n	80033de <__udivmoddi4+0x2ba>
 800338e:	3802      	subs	r0, #2
 8003390:	441c      	add	r4, r3
 8003392:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003396:	eba4 0408 	sub.w	r4, r4, r8
 800339a:	fba0 8902 	umull	r8, r9, r0, r2
 800339e:	454c      	cmp	r4, r9
 80033a0:	46c6      	mov	lr, r8
 80033a2:	464d      	mov	r5, r9
 80033a4:	d315      	bcc.n	80033d2 <__udivmoddi4+0x2ae>
 80033a6:	d012      	beq.n	80033ce <__udivmoddi4+0x2aa>
 80033a8:	b156      	cbz	r6, 80033c0 <__udivmoddi4+0x29c>
 80033aa:	ebba 030e 	subs.w	r3, sl, lr
 80033ae:	eb64 0405 	sbc.w	r4, r4, r5
 80033b2:	fa04 f707 	lsl.w	r7, r4, r7
 80033b6:	40cb      	lsrs	r3, r1
 80033b8:	431f      	orrs	r7, r3
 80033ba:	40cc      	lsrs	r4, r1
 80033bc:	6037      	str	r7, [r6, #0]
 80033be:	6074      	str	r4, [r6, #4]
 80033c0:	2100      	movs	r1, #0
 80033c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033c6:	4618      	mov	r0, r3
 80033c8:	e6f8      	b.n	80031bc <__udivmoddi4+0x98>
 80033ca:	4690      	mov	r8, r2
 80033cc:	e6e0      	b.n	8003190 <__udivmoddi4+0x6c>
 80033ce:	45c2      	cmp	sl, r8
 80033d0:	d2ea      	bcs.n	80033a8 <__udivmoddi4+0x284>
 80033d2:	ebb8 0e02 	subs.w	lr, r8, r2
 80033d6:	eb69 0503 	sbc.w	r5, r9, r3
 80033da:	3801      	subs	r0, #1
 80033dc:	e7e4      	b.n	80033a8 <__udivmoddi4+0x284>
 80033de:	4628      	mov	r0, r5
 80033e0:	e7d7      	b.n	8003392 <__udivmoddi4+0x26e>
 80033e2:	4640      	mov	r0, r8
 80033e4:	e791      	b.n	800330a <__udivmoddi4+0x1e6>
 80033e6:	4681      	mov	r9, r0
 80033e8:	e7be      	b.n	8003368 <__udivmoddi4+0x244>
 80033ea:	4601      	mov	r1, r0
 80033ec:	e778      	b.n	80032e0 <__udivmoddi4+0x1bc>
 80033ee:	3802      	subs	r0, #2
 80033f0:	443c      	add	r4, r7
 80033f2:	e745      	b.n	8003280 <__udivmoddi4+0x15c>
 80033f4:	4608      	mov	r0, r1
 80033f6:	e708      	b.n	800320a <__udivmoddi4+0xe6>
 80033f8:	f1a8 0802 	sub.w	r8, r8, #2
 80033fc:	443d      	add	r5, r7
 80033fe:	e72b      	b.n	8003258 <__udivmoddi4+0x134>

08003400 <__aeabi_idiv0>:
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop

08003404 <ili9341_GetLcdPixelWidth>:
  */
uint16_t ili9341_GetLcdPixelWidth(void)
{
  /* Return LCD PIXEL WIDTH */
  return ILI9341_LCD_PIXEL_WIDTH;
}
 8003404:	20f0      	movs	r0, #240	; 0xf0
 8003406:	4770      	bx	lr

08003408 <ili9341_GetLcdPixelHeight>:
  */
uint16_t ili9341_GetLcdPixelHeight(void)
{
  /* Return LCD PIXEL HEIGHT */
  return ILI9341_LCD_PIXEL_HEIGHT;
}
 8003408:	f44f 70a0 	mov.w	r0, #320	; 0x140
 800340c:	4770      	bx	lr

0800340e <ili9341_DisplayOn>:
  LCD_IO_WriteReg(LCD_Reg);
 800340e:	2029      	movs	r0, #41	; 0x29
 8003410:	f000 bc58 	b.w	8003cc4 <LCD_IO_WriteReg>

08003414 <ili9341_DisplayOff>:
 8003414:	2028      	movs	r0, #40	; 0x28
 8003416:	f000 bc55 	b.w	8003cc4 <LCD_IO_WriteReg>

0800341a <ili9341_Init>:
{
 800341a:	b508      	push	{r3, lr}
  LCD_IO_Init();
 800341c:	f000 fbda 	bl	8003bd4 <LCD_IO_Init>
  LCD_IO_WriteReg(LCD_Reg);
 8003420:	20ca      	movs	r0, #202	; 0xca
 8003422:	f000 fc4f 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003426:	20c3      	movs	r0, #195	; 0xc3
 8003428:	f000 fc30 	bl	8003c8c <LCD_IO_WriteData>
 800342c:	2008      	movs	r0, #8
 800342e:	f000 fc2d 	bl	8003c8c <LCD_IO_WriteData>
 8003432:	2050      	movs	r0, #80	; 0x50
 8003434:	f000 fc2a 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003438:	20cf      	movs	r0, #207	; 0xcf
 800343a:	f000 fc43 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800343e:	2000      	movs	r0, #0
 8003440:	f000 fc24 	bl	8003c8c <LCD_IO_WriteData>
 8003444:	20c1      	movs	r0, #193	; 0xc1
 8003446:	f000 fc21 	bl	8003c8c <LCD_IO_WriteData>
 800344a:	2030      	movs	r0, #48	; 0x30
 800344c:	f000 fc1e 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003450:	20ed      	movs	r0, #237	; 0xed
 8003452:	f000 fc37 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003456:	2064      	movs	r0, #100	; 0x64
 8003458:	f000 fc18 	bl	8003c8c <LCD_IO_WriteData>
 800345c:	2003      	movs	r0, #3
 800345e:	f000 fc15 	bl	8003c8c <LCD_IO_WriteData>
 8003462:	2012      	movs	r0, #18
 8003464:	f000 fc12 	bl	8003c8c <LCD_IO_WriteData>
 8003468:	2081      	movs	r0, #129	; 0x81
 800346a:	f000 fc0f 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800346e:	20e8      	movs	r0, #232	; 0xe8
 8003470:	f000 fc28 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003474:	2085      	movs	r0, #133	; 0x85
 8003476:	f000 fc09 	bl	8003c8c <LCD_IO_WriteData>
 800347a:	2000      	movs	r0, #0
 800347c:	f000 fc06 	bl	8003c8c <LCD_IO_WriteData>
 8003480:	2078      	movs	r0, #120	; 0x78
 8003482:	f000 fc03 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003486:	20cb      	movs	r0, #203	; 0xcb
 8003488:	f000 fc1c 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800348c:	2039      	movs	r0, #57	; 0x39
 800348e:	f000 fbfd 	bl	8003c8c <LCD_IO_WriteData>
 8003492:	202c      	movs	r0, #44	; 0x2c
 8003494:	f000 fbfa 	bl	8003c8c <LCD_IO_WriteData>
 8003498:	2000      	movs	r0, #0
 800349a:	f000 fbf7 	bl	8003c8c <LCD_IO_WriteData>
 800349e:	2034      	movs	r0, #52	; 0x34
 80034a0:	f000 fbf4 	bl	8003c8c <LCD_IO_WriteData>
 80034a4:	2002      	movs	r0, #2
 80034a6:	f000 fbf1 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034aa:	20f7      	movs	r0, #247	; 0xf7
 80034ac:	f000 fc0a 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034b0:	2020      	movs	r0, #32
 80034b2:	f000 fbeb 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034b6:	20ea      	movs	r0, #234	; 0xea
 80034b8:	f000 fc04 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034bc:	2000      	movs	r0, #0
 80034be:	f000 fbe5 	bl	8003c8c <LCD_IO_WriteData>
 80034c2:	2000      	movs	r0, #0
 80034c4:	f000 fbe2 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034c8:	20b1      	movs	r0, #177	; 0xb1
 80034ca:	f000 fbfb 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034ce:	2000      	movs	r0, #0
 80034d0:	f000 fbdc 	bl	8003c8c <LCD_IO_WriteData>
 80034d4:	201b      	movs	r0, #27
 80034d6:	f000 fbd9 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034da:	20b6      	movs	r0, #182	; 0xb6
 80034dc:	f000 fbf2 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034e0:	200a      	movs	r0, #10
 80034e2:	f000 fbd3 	bl	8003c8c <LCD_IO_WriteData>
 80034e6:	20a2      	movs	r0, #162	; 0xa2
 80034e8:	f000 fbd0 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034ec:	20c0      	movs	r0, #192	; 0xc0
 80034ee:	f000 fbe9 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034f2:	2010      	movs	r0, #16
 80034f4:	f000 fbca 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80034f8:	20c1      	movs	r0, #193	; 0xc1
 80034fa:	f000 fbe3 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80034fe:	2010      	movs	r0, #16
 8003500:	f000 fbc4 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003504:	20c5      	movs	r0, #197	; 0xc5
 8003506:	f000 fbdd 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800350a:	2045      	movs	r0, #69	; 0x45
 800350c:	f000 fbbe 	bl	8003c8c <LCD_IO_WriteData>
 8003510:	2015      	movs	r0, #21
 8003512:	f000 fbbb 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003516:	20c7      	movs	r0, #199	; 0xc7
 8003518:	f000 fbd4 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800351c:	2090      	movs	r0, #144	; 0x90
 800351e:	f000 fbb5 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003522:	2036      	movs	r0, #54	; 0x36
 8003524:	f000 fbce 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003528:	20c8      	movs	r0, #200	; 0xc8
 800352a:	f000 fbaf 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800352e:	20f2      	movs	r0, #242	; 0xf2
 8003530:	f000 fbc8 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003534:	2000      	movs	r0, #0
 8003536:	f000 fba9 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 800353a:	20b0      	movs	r0, #176	; 0xb0
 800353c:	f000 fbc2 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003540:	20c2      	movs	r0, #194	; 0xc2
 8003542:	f000 fba3 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003546:	20b6      	movs	r0, #182	; 0xb6
 8003548:	f000 fbbc 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800354c:	200a      	movs	r0, #10
 800354e:	f000 fb9d 	bl	8003c8c <LCD_IO_WriteData>
 8003552:	20a7      	movs	r0, #167	; 0xa7
 8003554:	f000 fb9a 	bl	8003c8c <LCD_IO_WriteData>
 8003558:	2027      	movs	r0, #39	; 0x27
 800355a:	f000 fb97 	bl	8003c8c <LCD_IO_WriteData>
 800355e:	2004      	movs	r0, #4
 8003560:	f000 fb94 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003564:	202a      	movs	r0, #42	; 0x2a
 8003566:	f000 fbad 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 800356a:	2000      	movs	r0, #0
 800356c:	f000 fb8e 	bl	8003c8c <LCD_IO_WriteData>
 8003570:	2000      	movs	r0, #0
 8003572:	f000 fb8b 	bl	8003c8c <LCD_IO_WriteData>
 8003576:	2000      	movs	r0, #0
 8003578:	f000 fb88 	bl	8003c8c <LCD_IO_WriteData>
 800357c:	20ef      	movs	r0, #239	; 0xef
 800357e:	f000 fb85 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003582:	202b      	movs	r0, #43	; 0x2b
 8003584:	f000 fb9e 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003588:	2000      	movs	r0, #0
 800358a:	f000 fb7f 	bl	8003c8c <LCD_IO_WriteData>
 800358e:	2000      	movs	r0, #0
 8003590:	f000 fb7c 	bl	8003c8c <LCD_IO_WriteData>
 8003594:	2001      	movs	r0, #1
 8003596:	f000 fb79 	bl	8003c8c <LCD_IO_WriteData>
 800359a:	203f      	movs	r0, #63	; 0x3f
 800359c:	f000 fb76 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035a0:	20f6      	movs	r0, #246	; 0xf6
 80035a2:	f000 fb8f 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035a6:	2001      	movs	r0, #1
 80035a8:	f000 fb70 	bl	8003c8c <LCD_IO_WriteData>
 80035ac:	2000      	movs	r0, #0
 80035ae:	f000 fb6d 	bl	8003c8c <LCD_IO_WriteData>
 80035b2:	2006      	movs	r0, #6
 80035b4:	f000 fb6a 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035b8:	202c      	movs	r0, #44	; 0x2c
 80035ba:	f000 fb83 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_Delay(200);
 80035be:	20c8      	movs	r0, #200	; 0xc8
 80035c0:	f000 fbd2 	bl	8003d68 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 80035c4:	2026      	movs	r0, #38	; 0x26
 80035c6:	f000 fb7d 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035ca:	2001      	movs	r0, #1
 80035cc:	f000 fb5e 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 80035d0:	20e0      	movs	r0, #224	; 0xe0
 80035d2:	f000 fb77 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 80035d6:	200f      	movs	r0, #15
 80035d8:	f000 fb58 	bl	8003c8c <LCD_IO_WriteData>
 80035dc:	2029      	movs	r0, #41	; 0x29
 80035de:	f000 fb55 	bl	8003c8c <LCD_IO_WriteData>
 80035e2:	2024      	movs	r0, #36	; 0x24
 80035e4:	f000 fb52 	bl	8003c8c <LCD_IO_WriteData>
 80035e8:	200c      	movs	r0, #12
 80035ea:	f000 fb4f 	bl	8003c8c <LCD_IO_WriteData>
 80035ee:	200e      	movs	r0, #14
 80035f0:	f000 fb4c 	bl	8003c8c <LCD_IO_WriteData>
 80035f4:	2009      	movs	r0, #9
 80035f6:	f000 fb49 	bl	8003c8c <LCD_IO_WriteData>
 80035fa:	204e      	movs	r0, #78	; 0x4e
 80035fc:	f000 fb46 	bl	8003c8c <LCD_IO_WriteData>
 8003600:	2078      	movs	r0, #120	; 0x78
 8003602:	f000 fb43 	bl	8003c8c <LCD_IO_WriteData>
 8003606:	203c      	movs	r0, #60	; 0x3c
 8003608:	f000 fb40 	bl	8003c8c <LCD_IO_WriteData>
 800360c:	2009      	movs	r0, #9
 800360e:	f000 fb3d 	bl	8003c8c <LCD_IO_WriteData>
 8003612:	2013      	movs	r0, #19
 8003614:	f000 fb3a 	bl	8003c8c <LCD_IO_WriteData>
 8003618:	2005      	movs	r0, #5
 800361a:	f000 fb37 	bl	8003c8c <LCD_IO_WriteData>
 800361e:	2017      	movs	r0, #23
 8003620:	f000 fb34 	bl	8003c8c <LCD_IO_WriteData>
 8003624:	2011      	movs	r0, #17
 8003626:	f000 fb31 	bl	8003c8c <LCD_IO_WriteData>
 800362a:	2000      	movs	r0, #0
 800362c:	f000 fb2e 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003630:	20e1      	movs	r0, #225	; 0xe1
 8003632:	f000 fb47 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_IO_WriteData(RegValue);
 8003636:	2000      	movs	r0, #0
 8003638:	f000 fb28 	bl	8003c8c <LCD_IO_WriteData>
 800363c:	2016      	movs	r0, #22
 800363e:	f000 fb25 	bl	8003c8c <LCD_IO_WriteData>
 8003642:	201b      	movs	r0, #27
 8003644:	f000 fb22 	bl	8003c8c <LCD_IO_WriteData>
 8003648:	2004      	movs	r0, #4
 800364a:	f000 fb1f 	bl	8003c8c <LCD_IO_WriteData>
 800364e:	2011      	movs	r0, #17
 8003650:	f000 fb1c 	bl	8003c8c <LCD_IO_WriteData>
 8003654:	2007      	movs	r0, #7
 8003656:	f000 fb19 	bl	8003c8c <LCD_IO_WriteData>
 800365a:	2031      	movs	r0, #49	; 0x31
 800365c:	f000 fb16 	bl	8003c8c <LCD_IO_WriteData>
 8003660:	2033      	movs	r0, #51	; 0x33
 8003662:	f000 fb13 	bl	8003c8c <LCD_IO_WriteData>
 8003666:	2042      	movs	r0, #66	; 0x42
 8003668:	f000 fb10 	bl	8003c8c <LCD_IO_WriteData>
 800366c:	2005      	movs	r0, #5
 800366e:	f000 fb0d 	bl	8003c8c <LCD_IO_WriteData>
 8003672:	200c      	movs	r0, #12
 8003674:	f000 fb0a 	bl	8003c8c <LCD_IO_WriteData>
 8003678:	200a      	movs	r0, #10
 800367a:	f000 fb07 	bl	8003c8c <LCD_IO_WriteData>
 800367e:	2028      	movs	r0, #40	; 0x28
 8003680:	f000 fb04 	bl	8003c8c <LCD_IO_WriteData>
 8003684:	202f      	movs	r0, #47	; 0x2f
 8003686:	f000 fb01 	bl	8003c8c <LCD_IO_WriteData>
 800368a:	200f      	movs	r0, #15
 800368c:	f000 fafe 	bl	8003c8c <LCD_IO_WriteData>
  LCD_IO_WriteReg(LCD_Reg);
 8003690:	2011      	movs	r0, #17
 8003692:	f000 fb17 	bl	8003cc4 <LCD_IO_WriteReg>
  LCD_Delay(200);
 8003696:	20c8      	movs	r0, #200	; 0xc8
 8003698:	f000 fb66 	bl	8003d68 <LCD_Delay>
  LCD_IO_WriteReg(LCD_Reg);
 800369c:	2029      	movs	r0, #41	; 0x29
 800369e:	f000 fb11 	bl	8003cc4 <LCD_IO_WriteReg>
 80036a2:	202c      	movs	r0, #44	; 0x2c
}
 80036a4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  LCD_IO_WriteReg(LCD_Reg);
 80036a8:	f000 bb0c 	b.w	8003cc4 <LCD_IO_WriteReg>

080036ac <ili9341_ReadID>:
{
 80036ac:	b508      	push	{r3, lr}
  LCD_IO_Init();
 80036ae:	f000 fa91 	bl	8003bd4 <LCD_IO_Init>
  return (LCD_IO_ReadData(RegValue, ReadSize));
 80036b2:	2103      	movs	r1, #3
 80036b4:	20d3      	movs	r0, #211	; 0xd3
 80036b6:	f000 fb21 	bl	8003cfc <LCD_IO_ReadData>
}
 80036ba:	b280      	uxth	r0, r0
 80036bc:	bd08      	pop	{r3, pc}

080036be <stmpe811_Reset>:
  * @brief  Reset the stmpe811 by Software.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval None
  */
void stmpe811_Reset(uint16_t DeviceAddr)
{
 80036be:	b510      	push	{r4, lr}
  /* Power Down the stmpe811 */  
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 2);
 80036c0:	b2c4      	uxtb	r4, r0
 80036c2:	2202      	movs	r2, #2
 80036c4:	2103      	movs	r1, #3
 80036c6:	4620      	mov	r0, r4
 80036c8:	f000 fb7c 	bl	8003dc4 <IOE_Write>

  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(10); 
 80036cc:	200a      	movs	r0, #10
 80036ce:	f000 fbc5 	bl	8003e5c <IOE_Delay>
  
  /* Power On the Codec after the power off => all registers are reinitialized */
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL1, 0);
 80036d2:	4620      	mov	r0, r4
 80036d4:	2200      	movs	r2, #0
 80036d6:	2103      	movs	r1, #3
 80036d8:	f000 fb74 	bl	8003dc4 <IOE_Write>
  
  /* Wait for a delay to ensure registers erasing */
  IOE_Delay(2); 
 80036dc:	2002      	movs	r0, #2
}
 80036de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Delay(2); 
 80036e2:	f000 bbbb 	b.w	8003e5c <IOE_Delay>

080036e6 <stmpe811_ReadID>:
  * @brief  Read the stmpe811 IO Expander device ID.
  * @param  DeviceAddr: Device address on communication Bus.  
  * @retval The Device ID (two bytes).
  */
uint16_t stmpe811_ReadID(uint16_t DeviceAddr)
{
 80036e6:	b538      	push	{r3, r4, r5, lr}
 80036e8:	4604      	mov	r4, r0
  /* Initialize IO BUS layer */
  IOE_Init(); 
  
  /* Return the device ID value */
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80036ea:	b2e4      	uxtb	r4, r4
  IOE_Init(); 
 80036ec:	f000 fb3e 	bl	8003d6c <IOE_Init>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80036f0:	2100      	movs	r1, #0
 80036f2:	4620      	mov	r0, r4
 80036f4:	f000 fb80 	bl	8003df8 <IOE_Read>
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80036f8:	2101      	movs	r1, #1
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 80036fa:	4605      	mov	r5, r0
          (IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_MSB)));
 80036fc:	4620      	mov	r0, r4
 80036fe:	f000 fb7b 	bl	8003df8 <IOE_Read>
  return ((IOE_Read(DeviceAddr, STMPE811_REG_CHP_ID_LSB) << 8) |\
 8003702:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
}
 8003706:	b280      	uxth	r0, r0
 8003708:	bd38      	pop	{r3, r4, r5, pc}

0800370a <stmpe811_TS_DetectTouch>:
  * @brief  Return if there is touch detected or not.
  * @param  DeviceAddr: Device address on communication Bus.
  * @retval Touch detected state.
  */
uint8_t stmpe811_TS_DetectTouch(uint16_t DeviceAddr)
{
 800370a:	b510      	push	{r4, lr}
  uint8_t state;
  uint8_t ret = 0;
  
  state = ((IOE_Read(DeviceAddr, STMPE811_REG_TSC_CTRL) & (uint8_t)STMPE811_TS_CTRL_STATUS) == (uint8_t)0x80);
 800370c:	b2c4      	uxtb	r4, r0
 800370e:	2140      	movs	r1, #64	; 0x40
 8003710:	4620      	mov	r0, r4
 8003712:	f000 fb71 	bl	8003df8 <IOE_Read>
  
  if(state > 0)
 8003716:	0603      	lsls	r3, r0, #24
 8003718:	d507      	bpl.n	800372a <stmpe811_TS_DetectTouch+0x20>
  {
    if(IOE_Read(DeviceAddr, STMPE811_REG_FIFO_SIZE) > 0)
 800371a:	214c      	movs	r1, #76	; 0x4c
 800371c:	4620      	mov	r0, r4
 800371e:	f000 fb6b 	bl	8003df8 <IOE_Read>
    {
      ret = 1;
 8003722:	3000      	adds	r0, #0
 8003724:	bf18      	it	ne
 8003726:	2001      	movne	r0, #1
 8003728:	bd10      	pop	{r4, pc}
    }
  }
  else
  {
    /* Reset FIFO */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 800372a:	4620      	mov	r0, r4
 800372c:	2201      	movs	r2, #1
 800372e:	214b      	movs	r1, #75	; 0x4b
 8003730:	f000 fb48 	bl	8003dc4 <IOE_Write>
    /* Enable the FIFO again */
    IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003734:	4620      	mov	r0, r4
 8003736:	2200      	movs	r2, #0
 8003738:	214b      	movs	r1, #75	; 0x4b
 800373a:	f000 fb43 	bl	8003dc4 <IOE_Write>
  uint8_t ret = 0;
 800373e:	2000      	movs	r0, #0
  }
  
  return ret;
}
 8003740:	bd10      	pop	{r4, pc}

08003742 <stmpe811_TS_GetXY>:
  * @param  X: Pointer to X position value
  * @param  Y: Pointer to Y position value   
  * @retval None.
  */
void stmpe811_TS_GetXY(uint16_t DeviceAddr, uint16_t *X, uint16_t *Y)
{
 8003742:	b573      	push	{r0, r1, r4, r5, r6, lr}
  uint8_t  dataXYZ[4];
  uint32_t uldataXYZ;
  
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 8003744:	2304      	movs	r3, #4
 8003746:	b2c4      	uxtb	r4, r0
{
 8003748:	460e      	mov	r6, r1
 800374a:	4615      	mov	r5, r2
  IOE_ReadMultiple(DeviceAddr, STMPE811_REG_TSC_DATA_NON_INC, dataXYZ, sizeof(dataXYZ)) ;
 800374c:	21d7      	movs	r1, #215	; 0xd7
 800374e:	eb0d 0203 	add.w	r2, sp, r3
 8003752:	4620      	mov	r0, r4
 8003754:	f000 fb6c 	bl	8003e30 <IOE_ReadMultiple>
 8003758:	9b01      	ldr	r3, [sp, #4]
 800375a:	ba1b      	rev	r3, r3
  
  /* Calculate positions values */
  uldataXYZ = (dataXYZ[0] << 24)|(dataXYZ[1] << 16)|(dataXYZ[2] << 8)|(dataXYZ[3] << 0);     
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 800375c:	0d1a      	lsrs	r2, r3, #20
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 800375e:	f3c3 230b 	ubfx	r3, r3, #8, #12
  *X = (uldataXYZ >> 20) & 0x00000FFF;     
 8003762:	8032      	strh	r2, [r6, #0]
  
  /* Reset FIFO */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003764:	4620      	mov	r0, r4
  *Y = (uldataXYZ >>  8) & 0x00000FFF;     
 8003766:	802b      	strh	r3, [r5, #0]
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003768:	2201      	movs	r2, #1
 800376a:	214b      	movs	r1, #75	; 0x4b
 800376c:	f000 fb2a 	bl	8003dc4 <IOE_Write>
  /* Enable the FIFO again */
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 8003770:	2200      	movs	r2, #0
 8003772:	214b      	movs	r1, #75	; 0x4b
 8003774:	4620      	mov	r0, r4
 8003776:	f000 fb25 	bl	8003dc4 <IOE_Write>
}
 800377a:	b002      	add	sp, #8
 800377c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003780 <stmpe811_Init>:
{
 8003780:	b510      	push	{r4, lr}
  uint8_t idx = 0;
  
  /* Check all the registered instances */
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
  {
    if(stmpe811[idx] == DeviceAddr)
 8003782:	4a0b      	ldr	r2, [pc, #44]	; (80037b0 <stmpe811_Init+0x30>)
 8003784:	7813      	ldrb	r3, [r2, #0]
 8003786:	4298      	cmp	r0, r3
{
 8003788:	4604      	mov	r4, r0
    if(stmpe811[idx] == DeviceAddr)
 800378a:	d010      	beq.n	80037ae <stmpe811_Init+0x2e>
 800378c:	7851      	ldrb	r1, [r2, #1]
 800378e:	4288      	cmp	r0, r1
 8003790:	d103      	bne.n	800379a <stmpe811_Init+0x1a>
 8003792:	bd10      	pop	{r4, pc}
 8003794:	b959      	cbnz	r1, 80037ae <stmpe811_Init+0x2e>
  for(idx = 0; idx < STMPE811_MAX_INSTANCE ; idx ++)
 8003796:	2301      	movs	r3, #1
 8003798:	e001      	b.n	800379e <stmpe811_Init+0x1e>
    if(stmpe811[idx] == DeviceAddr)
 800379a:	2b00      	cmp	r3, #0
 800379c:	d1fa      	bne.n	8003794 <stmpe811_Init+0x14>
      stmpe811[empty] = DeviceAddr;
 800379e:	54d4      	strb	r4, [r2, r3]
      IOE_Init(); 
 80037a0:	f000 fae4 	bl	8003d6c <IOE_Init>
      stmpe811_Reset(DeviceAddr);
 80037a4:	4620      	mov	r0, r4
}
 80037a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      stmpe811_Reset(DeviceAddr);
 80037aa:	f7ff bf88 	b.w	80036be <stmpe811_Reset>
 80037ae:	bd10      	pop	{r4, pc}
 80037b0:	20000694 	.word	0x20000694

080037b4 <stmpe811_EnableGlobalIT>:
{
 80037b4:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80037b6:	b2c4      	uxtb	r4, r0
 80037b8:	2109      	movs	r1, #9
 80037ba:	4620      	mov	r0, r4
 80037bc:	f000 fb1c 	bl	8003df8 <IOE_Read>
  tmp |= (uint8_t)STMPE811_GIT_EN;
 80037c0:	f040 0201 	orr.w	r2, r0, #1
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80037c4:	b2d2      	uxtb	r2, r2
 80037c6:	4620      	mov	r0, r4
 80037c8:	2109      	movs	r1, #9
}
 80037ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp); 
 80037ce:	f000 baf9 	b.w	8003dc4 <IOE_Write>

080037d2 <stmpe811_DisableGlobalIT>:
{
 80037d2:	b510      	push	{r4, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_CTRL);
 80037d4:	b2c4      	uxtb	r4, r0
 80037d6:	2109      	movs	r1, #9
 80037d8:	4620      	mov	r0, r4
 80037da:	f000 fb0d 	bl	8003df8 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80037de:	2109      	movs	r1, #9
 80037e0:	f000 02fe 	and.w	r2, r0, #254	; 0xfe
 80037e4:	4620      	mov	r0, r4
}
 80037e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_CTRL, tmp);
 80037ea:	f000 baeb 	b.w	8003dc4 <IOE_Write>

080037ee <stmpe811_EnableITSource>:
{
 80037ee:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80037f0:	b2c5      	uxtb	r5, r0
{
 80037f2:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 80037f4:	4628      	mov	r0, r5
 80037f6:	210a      	movs	r1, #10
 80037f8:	f000 fafe 	bl	8003df8 <IOE_Read>
  tmp |= Source; 
 80037fc:	ea40 0204 	orr.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003800:	b2d2      	uxtb	r2, r2
 8003802:	4628      	mov	r0, r5
 8003804:	210a      	movs	r1, #10
}
 8003806:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800380a:	f000 badb 	b.w	8003dc4 <IOE_Write>

0800380e <stmpe811_TS_EnableIT>:
{
 800380e:	b510      	push	{r4, lr}
 8003810:	4604      	mov	r4, r0
  IOE_ITConfig();
 8003812:	f000 faad 	bl	8003d70 <IOE_ITConfig>
  stmpe811_EnableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003816:	4620      	mov	r0, r4
 8003818:	211f      	movs	r1, #31
 800381a:	f7ff ffe8 	bl	80037ee <stmpe811_EnableITSource>
  stmpe811_EnableGlobalIT(DeviceAddr);
 800381e:	4620      	mov	r0, r4
}
 8003820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_EnableGlobalIT(DeviceAddr);
 8003824:	f7ff bfc6 	b.w	80037b4 <stmpe811_EnableGlobalIT>

08003828 <stmpe811_DisableITSource>:
{
 8003828:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800382a:	b2c5      	uxtb	r5, r0
{
 800382c:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_INT_EN);
 800382e:	4628      	mov	r0, r5
 8003830:	210a      	movs	r1, #10
 8003832:	f000 fae1 	bl	8003df8 <IOE_Read>
  tmp &= ~Source; 
 8003836:	ea20 0204 	bic.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 800383a:	b2d2      	uxtb	r2, r2
 800383c:	4628      	mov	r0, r5
 800383e:	210a      	movs	r1, #10
}
 8003840:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_INT_EN, tmp);   
 8003844:	f000 babe 	b.w	8003dc4 <IOE_Write>

08003848 <stmpe811_TS_DisableIT>:
{
 8003848:	b510      	push	{r4, lr}
 800384a:	4604      	mov	r4, r0
  stmpe811_DisableGlobalIT(DeviceAddr);
 800384c:	f7ff ffc1 	bl	80037d2 <stmpe811_DisableGlobalIT>
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003850:	4620      	mov	r0, r4
 8003852:	211f      	movs	r1, #31
}
 8003854:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  stmpe811_DisableITSource(DeviceAddr, STMPE811_TS_IT); 
 8003858:	f7ff bfe6 	b.w	8003828 <stmpe811_DisableITSource>

0800385c <stmpe811_ReadGITStatus>:
{
 800385c:	b510      	push	{r4, lr}
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 800385e:	b2c0      	uxtb	r0, r0
{
 8003860:	460c      	mov	r4, r1
  return((IOE_Read(DeviceAddr, STMPE811_REG_INT_STA) & Source));
 8003862:	210b      	movs	r1, #11
 8003864:	f000 fac8 	bl	8003df8 <IOE_Read>
}
 8003868:	4020      	ands	r0, r4
 800386a:	bd10      	pop	{r4, pc}

0800386c <stmpe811_TS_ITStatus>:
  return(stmpe811_ReadGITStatus(DeviceAddr, STMPE811_TS_IT));
 800386c:	211f      	movs	r1, #31
 800386e:	f7ff bff5 	b.w	800385c <stmpe811_ReadGITStatus>

08003872 <stmpe811_ClearGlobalIT>:
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, Source);
 8003872:	460a      	mov	r2, r1
 8003874:	b2c0      	uxtb	r0, r0
 8003876:	210b      	movs	r1, #11
 8003878:	f000 baa4 	b.w	8003dc4 <IOE_Write>

0800387c <stmpe811_TS_ClearIT>:
  stmpe811_ClearGlobalIT(DeviceAddr, STMPE811_TS_IT);
 800387c:	211f      	movs	r1, #31
 800387e:	f7ff bff8 	b.w	8003872 <stmpe811_ClearGlobalIT>

08003882 <stmpe811_IO_EnableAF>:
{
 8003882:	b538      	push	{r3, r4, r5, lr}
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003884:	b2c5      	uxtb	r5, r0
{
 8003886:	460c      	mov	r4, r1
  tmp = IOE_Read(DeviceAddr, STMPE811_REG_IO_AF);
 8003888:	4628      	mov	r0, r5
 800388a:	2117      	movs	r1, #23
 800388c:	f000 fab4 	bl	8003df8 <IOE_Read>
  tmp &= ~(uint8_t)IO_Pin;   
 8003890:	ea20 0204 	bic.w	r2, r0, r4
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 8003894:	b2d2      	uxtb	r2, r2
 8003896:	4628      	mov	r0, r5
 8003898:	2117      	movs	r1, #23
}
 800389a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  IOE_Write(DeviceAddr, STMPE811_REG_IO_AF, tmp); 
 800389e:	f000 ba91 	b.w	8003dc4 <IOE_Write>

080038a2 <stmpe811_TS_Start>:
{
 80038a2:	b570      	push	{r4, r5, r6, lr}
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80038a4:	b2c4      	uxtb	r4, r0
{
 80038a6:	4606      	mov	r6, r0
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80038a8:	2104      	movs	r1, #4
 80038aa:	4620      	mov	r0, r4
 80038ac:	f000 faa4 	bl	8003df8 <IOE_Read>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80038b0:	2104      	movs	r1, #4
 80038b2:	f000 02fb 	and.w	r2, r0, #251	; 0xfb
  mode = IOE_Read(DeviceAddr, STMPE811_REG_SYS_CTRL2);
 80038b6:	4605      	mov	r5, r0
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80038b8:	4620      	mov	r0, r4
 80038ba:	f000 fa83 	bl	8003dc4 <IOE_Write>
  stmpe811_IO_EnableAF(DeviceAddr, STMPE811_TOUCH_IO_ALL);
 80038be:	4630      	mov	r0, r6
 80038c0:	21f0      	movs	r1, #240	; 0xf0
 80038c2:	f7ff ffde 	bl	8003882 <stmpe811_IO_EnableAF>
  IOE_Write(DeviceAddr, STMPE811_REG_SYS_CTRL2, mode); 
 80038c6:	f005 02f8 	and.w	r2, r5, #248	; 0xf8
 80038ca:	4620      	mov	r0, r4
 80038cc:	2104      	movs	r1, #4
 80038ce:	f000 fa79 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL1, 0x49);
 80038d2:	2249      	movs	r2, #73	; 0x49
 80038d4:	2120      	movs	r1, #32
 80038d6:	4620      	mov	r0, r4
 80038d8:	f000 fa74 	bl	8003dc4 <IOE_Write>
  IOE_Delay(2); 
 80038dc:	2002      	movs	r0, #2
 80038de:	f000 fabd 	bl	8003e5c <IOE_Delay>
  IOE_Write(DeviceAddr, STMPE811_REG_ADC_CTRL2, 0x01);
 80038e2:	4620      	mov	r0, r4
 80038e4:	2201      	movs	r2, #1
 80038e6:	2121      	movs	r1, #33	; 0x21
 80038e8:	f000 fa6c 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CFG, 0x9A); 
 80038ec:	4620      	mov	r0, r4
 80038ee:	229a      	movs	r2, #154	; 0x9a
 80038f0:	2141      	movs	r1, #65	; 0x41
 80038f2:	f000 fa67 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_TH, 0x01);
 80038f6:	4620      	mov	r0, r4
 80038f8:	2201      	movs	r2, #1
 80038fa:	214a      	movs	r1, #74	; 0x4a
 80038fc:	f000 fa62 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x01);
 8003900:	4620      	mov	r0, r4
 8003902:	2201      	movs	r2, #1
 8003904:	214b      	movs	r1, #75	; 0x4b
 8003906:	f000 fa5d 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_FIFO_STA, 0x00);
 800390a:	4620      	mov	r0, r4
 800390c:	2200      	movs	r2, #0
 800390e:	214b      	movs	r1, #75	; 0x4b
 8003910:	f000 fa58 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_FRACT_XYZ, 0x01);
 8003914:	4620      	mov	r0, r4
 8003916:	2201      	movs	r2, #1
 8003918:	2156      	movs	r1, #86	; 0x56
 800391a:	f000 fa53 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_I_DRIVE, 0x01);
 800391e:	4620      	mov	r0, r4
 8003920:	2201      	movs	r2, #1
 8003922:	2158      	movs	r1, #88	; 0x58
 8003924:	f000 fa4e 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_TSC_CTRL, 0x01);
 8003928:	4620      	mov	r0, r4
 800392a:	2201      	movs	r2, #1
 800392c:	2140      	movs	r1, #64	; 0x40
 800392e:	f000 fa49 	bl	8003dc4 <IOE_Write>
  IOE_Write(DeviceAddr, STMPE811_REG_INT_STA, 0xFF);
 8003932:	4620      	mov	r0, r4
 8003934:	22ff      	movs	r2, #255	; 0xff
 8003936:	210b      	movs	r1, #11
 8003938:	f000 fa44 	bl	8003dc4 <IOE_Write>
  IOE_Delay(2); 
 800393c:	2002      	movs	r0, #2
}
 800393e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  IOE_Delay(2); 
 8003942:	f000 ba8b 	b.w	8003e5c <IOE_Delay>
	...

08003948 <SPIx_Init>:

/**
  * @brief  SPIx Bus initialization
  */
static void SPIx_Init(void)
{
 8003948:	b510      	push	{r4, lr}
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800394a:	4c21      	ldr	r4, [pc, #132]	; (80039d0 <SPIx_Init+0x88>)
{
 800394c:	b088      	sub	sp, #32
  if(HAL_SPI_GetState(&SpiHandle) == HAL_SPI_STATE_RESET)
 800394e:	4620      	mov	r0, r4
 8003950:	f003 fb62 	bl	8007018 <HAL_SPI_GetState>
 8003954:	2800      	cmp	r0, #0
 8003956:	d138      	bne.n	80039ca <SPIx_Init+0x82>
  {
    /* SPI configuration -----------------------------------------------------*/
    SpiHandle.Instance = DISCOVERY_SPIx;
 8003958:	4b1e      	ldr	r3, [pc, #120]	; (80039d4 <SPIx_Init+0x8c>)
 800395a:	6023      	str	r3, [r4, #0]
       to verify these constraints:
       - ILI9341 LCD SPI interface max baudrate is 10MHz for write and 6.66MHz for read
       - l3gd20 SPI interface max baudrate is 10MHz for write/read
       - PCLK2 frequency is set to 90 MHz
    */
    SpiHandle.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800395c:	2318      	movs	r3, #24
 800395e:	61e3      	str	r3, [r4, #28]
    /* Note: To read a register a LCD, SPI_DIRECTION_1LINE should be set */
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
    SpiHandle.Init.CRCPolynomial  = 7;
 8003960:	2307      	movs	r3, #7
 8003962:	62e3      	str	r3, [r4, #44]	; 0x2c
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
    SpiHandle.Init.NSS            = SPI_NSS_SOFT;
 8003964:	f44f 7300 	mov.w	r3, #512	; 0x200
 8003968:	61a3      	str	r3, [r4, #24]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
    SpiHandle.Init.Mode           = SPI_MODE_MASTER;
 800396a:	f44f 7382 	mov.w	r3, #260	; 0x104
 800396e:	6063      	str	r3, [r4, #4]
static void SPIx_MspInit(SPI_HandleTypeDef *hspi)
{
  GPIO_InitTypeDef   GPIO_InitStructure;

  /* Enable SPIx clock */
  DISCOVERY_SPIx_CLK_ENABLE();
 8003970:	4b19      	ldr	r3, [pc, #100]	; (80039d8 <SPIx_Init+0x90>)
 8003972:	9001      	str	r0, [sp, #4]
    SpiHandle.Init.Direction      = SPI_DIRECTION_2LINES;
 8003974:	60a0      	str	r0, [r4, #8]
    SpiHandle.Init.CLKPhase       = SPI_PHASE_1EDGE;
 8003976:	6160      	str	r0, [r4, #20]
    SpiHandle.Init.CLKPolarity    = SPI_POLARITY_LOW;
 8003978:	6120      	str	r0, [r4, #16]
    SpiHandle.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLED;
 800397a:	62a0      	str	r0, [r4, #40]	; 0x28
    SpiHandle.Init.DataSize       = SPI_DATASIZE_8BIT;
 800397c:	60e0      	str	r0, [r4, #12]
    SpiHandle.Init.FirstBit       = SPI_FIRSTBIT_MSB;
 800397e:	6220      	str	r0, [r4, #32]
    SpiHandle.Init.TIMode         = SPI_TIMODE_DISABLED;
 8003980:	6260      	str	r0, [r4, #36]	; 0x24
  DISCOVERY_SPIx_CLK_ENABLE();
 8003982:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003984:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003988:	645a      	str	r2, [r3, #68]	; 0x44
 800398a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800398c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8003990:	9201      	str	r2, [sp, #4]
 8003992:	9a01      	ldr	r2, [sp, #4]

  /* Enable DISCOVERY_SPI GPIO clock */
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 8003994:	9002      	str	r0, [sp, #8]
 8003996:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 8003998:	4810      	ldr	r0, [pc, #64]	; (80039dc <SPIx_Init+0x94>)
  DISCOVERY_SPIx_GPIO_CLK_ENABLE();
 800399a:	f042 0220 	orr.w	r2, r2, #32
 800399e:	631a      	str	r2, [r3, #48]	; 0x30
 80039a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a2:	f003 0320 	and.w	r3, r3, #32
 80039a6:	9302      	str	r3, [sp, #8]
 80039a8:	9b02      	ldr	r3, [sp, #8]
  GPIO_InitStructure.Pin    = (DISCOVERY_SPIx_SCK_PIN | DISCOVERY_SPIx_MOSI_PIN | DISCOVERY_SPIx_MISO_PIN);
 80039aa:	f44f 7360 	mov.w	r3, #896	; 0x380
 80039ae:	9303      	str	r3, [sp, #12]
  GPIO_InitStructure.Mode   = GPIO_MODE_AF_PP;
 80039b0:	2302      	movs	r3, #2
 80039b2:	9304      	str	r3, [sp, #16]
  GPIO_InitStructure.Pull   = GPIO_PULLDOWN;
 80039b4:	9305      	str	r3, [sp, #20]
  GPIO_InitStructure.Speed  = GPIO_SPEED_MEDIUM;
 80039b6:	2301      	movs	r3, #1
 80039b8:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80039ba:	a903      	add	r1, sp, #12
  GPIO_InitStructure.Alternate = DISCOVERY_SPIx_AF;
 80039bc:	2305      	movs	r3, #5
 80039be:	9307      	str	r3, [sp, #28]
  HAL_GPIO_Init(DISCOVERY_SPIx_GPIO_PORT, &GPIO_InitStructure);
 80039c0:	f001 fc48 	bl	8005254 <HAL_GPIO_Init>
    HAL_SPI_Init(&SpiHandle);
 80039c4:	4620      	mov	r0, r4
 80039c6:	f003 f8a5 	bl	8006b14 <HAL_SPI_Init>
}
 80039ca:	b008      	add	sp, #32
 80039cc:	bd10      	pop	{r4, pc}
 80039ce:	bf00      	nop
 80039d0:	20000698 	.word	0x20000698
 80039d4:	40015000 	.word	0x40015000
 80039d8:	40023800 	.word	0x40023800
 80039dc:	40021400 	.word	0x40021400

080039e0 <I2Cx_Init>:
{
 80039e0:	b570      	push	{r4, r5, r6, lr}
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80039e2:	4e33      	ldr	r6, [pc, #204]	; (8003ab0 <I2Cx_Init+0xd0>)
{
 80039e4:	b088      	sub	sp, #32
  if(HAL_I2C_GetState(&I2cHandle) == HAL_I2C_STATE_RESET)
 80039e6:	4630      	mov	r0, r6
 80039e8:	f002 f9f0 	bl	8005dcc <HAL_I2C_GetState>
 80039ec:	4604      	mov	r4, r0
 80039ee:	2800      	cmp	r0, #0
 80039f0:	d15b      	bne.n	8003aaa <I2Cx_Init+0xca>
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80039f2:	4a30      	ldr	r2, [pc, #192]	; (8003ab4 <I2Cx_Init+0xd4>)
 80039f4:	4b30      	ldr	r3, [pc, #192]	; (8003ab8 <I2Cx_Init+0xd8>)
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 80039f6:	4d31      	ldr	r5, [pc, #196]	; (8003abc <I2Cx_Init+0xdc>)
 80039f8:	9000      	str	r0, [sp, #0]
    I2cHandle.Init.ClockSpeed       = BSP_I2C_SPEED;
 80039fa:	e886 000c 	stmia.w	r6, {r2, r3}
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 80039fe:	f44f 4380 	mov.w	r3, #16384	; 0x4000
    I2cHandle.Init.DutyCycle        = I2C_DUTYCYCLE_2;
 8003a02:	60b0      	str	r0, [r6, #8]
    I2cHandle.Init.OwnAddress1      = 0;
 8003a04:	60f0      	str	r0, [r6, #12]
    I2cHandle.Init.DualAddressMode  = I2C_DUALADDRESS_DISABLED;
 8003a06:	6170      	str	r0, [r6, #20]
    I2cHandle.Init.OwnAddress2      = 0;
 8003a08:	61b0      	str	r0, [r6, #24]
    I2cHandle.Init.GeneralCallMode  = I2C_GENERALCALL_DISABLED;
 8003a0a:	61f0      	str	r0, [r6, #28]
    I2cHandle.Init.NoStretchMode    = I2C_NOSTRETCH_DISABLED;  
 8003a0c:	6230      	str	r0, [r6, #32]
    I2cHandle.Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8003a0e:	6133      	str	r3, [r6, #16]
    DISCOVERY_I2Cx_SDA_GPIO_CLK_ENABLE();
 8003a10:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a12:	f043 0304 	orr.w	r3, r3, #4
 8003a16:	632b      	str	r3, [r5, #48]	; 0x30
 8003a18:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a1a:	f003 0304 	and.w	r3, r3, #4
 8003a1e:	9300      	str	r3, [sp, #0]
 8003a20:	9b00      	ldr	r3, [sp, #0]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003a22:	9001      	str	r0, [sp, #4]
 8003a24:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8003a26:	f043 0301 	orr.w	r3, r3, #1
 8003a2a:	632b      	str	r3, [r5, #48]	; 0x30
 8003a2c:	6b2b      	ldr	r3, [r5, #48]	; 0x30
    GPIO_InitStruct.Pull      = GPIO_NOPULL;
 8003a2e:	9005      	str	r0, [sp, #20]
    DISCOVERY_I2Cx_SCL_GPIO_CLK_ENABLE();
 8003a30:	f003 0301 	and.w	r3, r3, #1
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003a38:	4821      	ldr	r0, [pc, #132]	; (8003ac0 <I2Cx_Init+0xe0>)
    GPIO_InitStruct.Pin       = DISCOVERY_I2Cx_SCL_PIN;
 8003a3a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003a3e:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode      = GPIO_MODE_AF_OD;
 8003a40:	2312      	movs	r3, #18
 8003a42:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Speed     = GPIO_SPEED_FAST;
 8003a44:	2302      	movs	r3, #2
 8003a46:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003a48:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = DISCOVERY_I2Cx_SCL_SDA_AF;
 8003a4a:	2304      	movs	r3, #4
 8003a4c:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SCL_GPIO_PORT, &GPIO_InitStruct);
 8003a4e:	f001 fc01 	bl	8005254 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003a52:	f44f 7300 	mov.w	r3, #512	; 0x200
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003a56:	a903      	add	r1, sp, #12
 8003a58:	481a      	ldr	r0, [pc, #104]	; (8003ac4 <I2Cx_Init+0xe4>)
    GPIO_InitStruct.Pin = DISCOVERY_I2Cx_SDA_PIN;
 8003a5a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(DISCOVERY_I2Cx_SDA_GPIO_PORT, &GPIO_InitStruct);
 8003a5c:	f001 fbfa 	bl	8005254 <HAL_GPIO_Init>
    DISCOVERY_I2Cx_CLOCK_ENABLE();
 8003a60:	9402      	str	r4, [sp, #8]
 8003a62:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003a64:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a68:	642b      	str	r3, [r5, #64]	; 0x40
 8003a6a:	6c2b      	ldr	r3, [r5, #64]	; 0x40
 8003a6c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a70:	9302      	str	r3, [sp, #8]
 8003a72:	9b02      	ldr	r3, [sp, #8]
    DISCOVERY_I2Cx_FORCE_RESET();
 8003a74:	6a2b      	ldr	r3, [r5, #32]
 8003a76:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a7a:	622b      	str	r3, [r5, #32]
    DISCOVERY_I2Cx_RELEASE_RESET(); 
 8003a7c:	6a2b      	ldr	r3, [r5, #32]
 8003a7e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8003a82:	622b      	str	r3, [r5, #32]
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_EV_IRQn, 0x0F, 0);
 8003a84:	4622      	mov	r2, r4
 8003a86:	210f      	movs	r1, #15
 8003a88:	2048      	movs	r0, #72	; 0x48
 8003a8a:	f001 f8db 	bl	8004c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_EV_IRQn);
 8003a8e:	2048      	movs	r0, #72	; 0x48
 8003a90:	f001 f90c 	bl	8004cac <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(DISCOVERY_I2Cx_ER_IRQn, 0x0F, 0);
 8003a94:	4622      	mov	r2, r4
 8003a96:	210f      	movs	r1, #15
 8003a98:	2049      	movs	r0, #73	; 0x49
 8003a9a:	f001 f8d3 	bl	8004c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DISCOVERY_I2Cx_ER_IRQn);  
 8003a9e:	2049      	movs	r0, #73	; 0x49
 8003aa0:	f001 f904 	bl	8004cac <HAL_NVIC_EnableIRQ>
    HAL_I2C_Init(&I2cHandle);
 8003aa4:	4630      	mov	r0, r6
 8003aa6:	f001 ff37 	bl	8005918 <HAL_I2C_Init>
}
 8003aaa:	b008      	add	sp, #32
 8003aac:	bd70      	pop	{r4, r5, r6, pc}
 8003aae:	bf00      	nop
 8003ab0:	20027b34 	.word	0x20027b34
 8003ab4:	40005c00 	.word	0x40005c00
 8003ab8:	000186a0 	.word	0x000186a0
 8003abc:	40023800 	.word	0x40023800
 8003ac0:	40020000 	.word	0x40020000
 8003ac4:	40020800 	.word	0x40020800

08003ac8 <I2Cx_Error>:
{
 8003ac8:	b508      	push	{r3, lr}
  HAL_I2C_DeInit(&I2cHandle);
 8003aca:	4803      	ldr	r0, [pc, #12]	; (8003ad8 <I2Cx_Error+0x10>)
 8003acc:	f001 ffc8 	bl	8005a60 <HAL_I2C_DeInit>
}
 8003ad0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  I2Cx_Init();
 8003ad4:	f7ff bf84 	b.w	80039e0 <I2Cx_Init>
 8003ad8:	20027b34 	.word	0x20027b34

08003adc <SPIx_Write>:
{
 8003adc:	b507      	push	{r0, r1, r2, lr}
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003ade:	4b09      	ldr	r3, [pc, #36]	; (8003b04 <SPIx_Write+0x28>)
{
 8003ae0:	a902      	add	r1, sp, #8
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003ae2:	681b      	ldr	r3, [r3, #0]
{
 8003ae4:	f821 0d02 	strh.w	r0, [r1, #-2]!
  status = HAL_SPI_Transmit(&SpiHandle, (uint8_t*) &Value, 1, SpixTimeout);
 8003ae8:	2201      	movs	r2, #1
 8003aea:	4807      	ldr	r0, [pc, #28]	; (8003b08 <SPIx_Write+0x2c>)
 8003aec:	f003 f865 	bl	8006bba <HAL_SPI_Transmit>
  if(status != HAL_OK)
 8003af0:	b120      	cbz	r0, 8003afc <SPIx_Write+0x20>
  HAL_SPI_DeInit(&SpiHandle);
 8003af2:	4805      	ldr	r0, [pc, #20]	; (8003b08 <SPIx_Write+0x2c>)
 8003af4:	f003 f84b 	bl	8006b8e <HAL_SPI_DeInit>
  SPIx_Init();
 8003af8:	f7ff ff26 	bl	8003948 <SPIx_Init>
}
 8003afc:	b003      	add	sp, #12
 8003afe:	f85d fb04 	ldr.w	pc, [sp], #4
 8003b02:	bf00      	nop
 8003b04:	2000006c 	.word	0x2000006c
 8003b08:	20000698 	.word	0x20000698

08003b0c <BSP_LED_Init>:
{
 8003b0c:	b570      	push	{r4, r5, r6, lr}
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b0e:	4604      	mov	r4, r0
{
 8003b10:	b088      	sub	sp, #32
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b12:	bb08      	cbnz	r0, 8003b58 <BSP_LED_Init+0x4c>
 8003b14:	4b18      	ldr	r3, [pc, #96]	; (8003b78 <BSP_LED_Init+0x6c>)
 8003b16:	9001      	str	r0, [sp, #4]
 8003b18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b1a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b1e:	631a      	str	r2, [r3, #48]	; 0x30
 8003b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b22:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b26:	9301      	str	r3, [sp, #4]
 8003b28:	9b01      	ldr	r3, [sp, #4]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003b2a:	4b14      	ldr	r3, [pc, #80]	; (8003b7c <BSP_LED_Init+0x70>)
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003b2c:	4d14      	ldr	r5, [pc, #80]	; (8003b80 <BSP_LED_Init+0x74>)
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003b2e:	f833 6014 	ldrh.w	r6, [r3, r4, lsl #1]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003b32:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
  GPIO_InitStruct.Pin = GPIO_PIN[Led];
 8003b36:	9603      	str	r6, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003b38:	2301      	movs	r3, #1
 8003b3a:	9304      	str	r3, [sp, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003b3c:	9305      	str	r3, [sp, #20]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003b3e:	a903      	add	r1, sp, #12
  GPIO_InitStruct.Speed = GPIO_SPEED_FAST;
 8003b40:	2302      	movs	r3, #2
 8003b42:	9306      	str	r3, [sp, #24]
  HAL_GPIO_Init(GPIO_PORT[Led], &GPIO_InitStruct);
 8003b44:	f001 fb86 	bl	8005254 <HAL_GPIO_Init>
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003b48:	2200      	movs	r2, #0
 8003b4a:	4631      	mov	r1, r6
 8003b4c:	f855 0024 	ldr.w	r0, [r5, r4, lsl #2]
 8003b50:	f001 fd06 	bl	8005560 <HAL_GPIO_WritePin>
}
 8003b54:	b008      	add	sp, #32
 8003b56:	bd70      	pop	{r4, r5, r6, pc}
  LEDx_GPIO_CLK_ENABLE(Led);
 8003b58:	2801      	cmp	r0, #1
 8003b5a:	d1e6      	bne.n	8003b2a <BSP_LED_Init+0x1e>
 8003b5c:	2300      	movs	r3, #0
 8003b5e:	9302      	str	r3, [sp, #8]
 8003b60:	4b05      	ldr	r3, [pc, #20]	; (8003b78 <BSP_LED_Init+0x6c>)
 8003b62:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003b64:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003b68:	631a      	str	r2, [r3, #48]	; 0x30
 8003b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b70:	9302      	str	r3, [sp, #8]
 8003b72:	9b02      	ldr	r3, [sp, #8]
 8003b74:	e7d9      	b.n	8003b2a <BSP_LED_Init+0x1e>
 8003b76:	bf00      	nop
 8003b78:	40023800 	.word	0x40023800
 8003b7c:	0800aab8 	.word	0x0800aab8
 8003b80:	20000060 	.word	0x20000060

08003b84 <BSP_LED_On>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_SET); 
 8003b84:	4b04      	ldr	r3, [pc, #16]	; (8003b98 <BSP_LED_On+0x14>)
 8003b86:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8003b8a:	4b04      	ldr	r3, [pc, #16]	; (8003b9c <BSP_LED_On+0x18>)
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003b92:	f001 bce5 	b.w	8005560 <HAL_GPIO_WritePin>
 8003b96:	bf00      	nop
 8003b98:	0800aab8 	.word	0x0800aab8
 8003b9c:	20000060 	.word	0x20000060

08003ba0 <BSP_LED_Off>:
  HAL_GPIO_WritePin(GPIO_PORT[Led], GPIO_PIN[Led], GPIO_PIN_RESET); 
 8003ba0:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <BSP_LED_Off+0x14>)
 8003ba2:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8003ba6:	4b04      	ldr	r3, [pc, #16]	; (8003bb8 <BSP_LED_Off+0x18>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003bae:	f001 bcd7 	b.w	8005560 <HAL_GPIO_WritePin>
 8003bb2:	bf00      	nop
 8003bb4:	0800aab8 	.word	0x0800aab8
 8003bb8:	20000060 	.word	0x20000060

08003bbc <BSP_LED_Toggle>:
  HAL_GPIO_TogglePin(GPIO_PORT[Led], GPIO_PIN[Led]);
 8003bbc:	4b03      	ldr	r3, [pc, #12]	; (8003bcc <BSP_LED_Toggle+0x10>)
 8003bbe:	f833 1010 	ldrh.w	r1, [r3, r0, lsl #1]
 8003bc2:	4b03      	ldr	r3, [pc, #12]	; (8003bd0 <BSP_LED_Toggle+0x14>)
 8003bc4:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8003bc8:	f001 bccf 	b.w	800556a <HAL_GPIO_TogglePin>
 8003bcc:	0800aab8 	.word	0x0800aab8
 8003bd0:	20000060 	.word	0x20000060

08003bd4 <LCD_IO_Init>:

/**
  * @brief  Configures the LCD_SPI interface.
  */
void LCD_IO_Init(void)
{
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
  GPIO_InitTypeDef GPIO_InitStructure;
  
  if(Is_LCD_IO_Initialized == 0)
 8003bd6:	4b29      	ldr	r3, [pc, #164]	; (8003c7c <LCD_IO_Init+0xa8>)
 8003bd8:	781d      	ldrb	r5, [r3, #0]
{
 8003bda:	b089      	sub	sp, #36	; 0x24
  if(Is_LCD_IO_Initialized == 0)
 8003bdc:	2d00      	cmp	r5, #0
 8003bde:	d14a      	bne.n	8003c76 <LCD_IO_Init+0xa2>
  {
    Is_LCD_IO_Initialized = 1; 
    
    /* Configure NCS in Output Push-Pull mode */
    LCD_WRX_GPIO_CLK_ENABLE();
 8003be0:	4c27      	ldr	r4, [pc, #156]	; (8003c80 <LCD_IO_Init+0xac>)
 8003be2:	9500      	str	r5, [sp, #0]
    Is_LCD_IO_Initialized = 1; 
 8003be4:	2601      	movs	r6, #1
 8003be6:	701e      	strb	r6, [r3, #0]
    LCD_WRX_GPIO_CLK_ENABLE();
 8003be8:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003bea:	4826      	ldr	r0, [pc, #152]	; (8003c84 <LCD_IO_Init+0xb0>)
    LCD_WRX_GPIO_CLK_ENABLE();
 8003bec:	f043 0308 	orr.w	r3, r3, #8
 8003bf0:	6323      	str	r3, [r4, #48]	; 0x30
 8003bf2:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003bf4:	9604      	str	r6, [sp, #16]
    LCD_WRX_GPIO_CLK_ENABLE();
 8003bf6:	f003 0308 	and.w	r3, r3, #8
 8003bfa:	9300      	str	r3, [sp, #0]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003bfc:	2702      	movs	r7, #2
    LCD_WRX_GPIO_CLK_ENABLE();
 8003bfe:	9b00      	ldr	r3, [sp, #0]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003c00:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003c02:	f44f 5300 	mov.w	r3, #8192	; 0x2000
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003c06:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_WRX_PIN;
 8003c08:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c0a:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_WRX_GPIO_PORT, &GPIO_InitStructure);
 8003c0c:	f001 fb22 	bl	8005254 <HAL_GPIO_Init>
    
    LCD_RDX_GPIO_CLK_ENABLE();
 8003c10:	9501      	str	r5, [sp, #4]
 8003c12:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003c14:	481b      	ldr	r0, [pc, #108]	; (8003c84 <LCD_IO_Init+0xb0>)
    LCD_RDX_GPIO_CLK_ENABLE();
 8003c16:	f043 0308 	orr.w	r3, r3, #8
 8003c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8003c1c:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003c1e:	9604      	str	r6, [sp, #16]
    LCD_RDX_GPIO_CLK_ENABLE();
 8003c20:	f003 0308 	and.w	r3, r3, #8
 8003c24:	9301      	str	r3, [sp, #4]
 8003c26:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003c28:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003c2a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003c2e:	a903      	add	r1, sp, #12
    GPIO_InitStructure.Pin     = LCD_RDX_PIN;
 8003c30:	9303      	str	r3, [sp, #12]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c32:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_RDX_GPIO_PORT, &GPIO_InitStructure);
 8003c34:	f001 fb0e 	bl	8005254 <HAL_GPIO_Init>
    
    /* Configure the LCD Control pins ----------------------------------------*/
    LCD_NCS_GPIO_CLK_ENABLE();
 8003c38:	9502      	str	r5, [sp, #8]
 8003c3a:	6b23      	ldr	r3, [r4, #48]	; 0x30
    /* Configure NCS in Output Push-Pull mode */
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003c3c:	4812      	ldr	r0, [pc, #72]	; (8003c88 <LCD_IO_Init+0xb4>)
    LCD_NCS_GPIO_CLK_ENABLE();
 8003c3e:	f043 0304 	orr.w	r3, r3, #4
 8003c42:	6323      	str	r3, [r4, #48]	; 0x30
 8003c44:	6b23      	ldr	r3, [r4, #48]	; 0x30
    GPIO_InitStructure.Mode    = GPIO_MODE_OUTPUT_PP;
 8003c46:	9604      	str	r6, [sp, #16]
    LCD_NCS_GPIO_CLK_ENABLE();
 8003c48:	f003 0304 	and.w	r3, r3, #4
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003c4c:	2404      	movs	r4, #4
    LCD_NCS_GPIO_CLK_ENABLE();
 8003c4e:	9302      	str	r3, [sp, #8]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003c50:	a903      	add	r1, sp, #12
    LCD_NCS_GPIO_CLK_ENABLE();
 8003c52:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStructure.Pin     = LCD_NCS_PIN;
 8003c54:	9403      	str	r4, [sp, #12]
    GPIO_InitStructure.Pull    = GPIO_NOPULL;
 8003c56:	9505      	str	r5, [sp, #20]
    GPIO_InitStructure.Speed   = GPIO_SPEED_FAST;
 8003c58:	9706      	str	r7, [sp, #24]
    HAL_GPIO_Init(LCD_NCS_GPIO_PORT, &GPIO_InitStructure);
 8003c5a:	f001 fafb 	bl	8005254 <HAL_GPIO_Init>
    
    /* Set or Reset the control line */
    LCD_CS_LOW();
 8003c5e:	462a      	mov	r2, r5
 8003c60:	4621      	mov	r1, r4
 8003c62:	4809      	ldr	r0, [pc, #36]	; (8003c88 <LCD_IO_Init+0xb4>)
 8003c64:	f001 fc7c 	bl	8005560 <HAL_GPIO_WritePin>
    LCD_CS_HIGH();
 8003c68:	4632      	mov	r2, r6
 8003c6a:	4621      	mov	r1, r4
 8003c6c:	4806      	ldr	r0, [pc, #24]	; (8003c88 <LCD_IO_Init+0xb4>)
 8003c6e:	f001 fc77 	bl	8005560 <HAL_GPIO_WritePin>
    
    SPIx_Init();
 8003c72:	f7ff fe69 	bl	8003948 <SPIx_Init>
  }
}
 8003c76:	b009      	add	sp, #36	; 0x24
 8003c78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003c7a:	bf00      	nop
 8003c7c:	20000696 	.word	0x20000696
 8003c80:	40023800 	.word	0x40023800
 8003c84:	40020c00 	.word	0x40020c00
 8003c88:	40020800 	.word	0x40020800

08003c8c <LCD_IO_WriteData>:

/**
  * @brief  Writes register value.
  */
void LCD_IO_WriteData(uint16_t RegValue) 
{
 8003c8c:	b538      	push	{r3, r4, r5, lr}
  /* Set WRX to send data */
  LCD_WRX_HIGH();
  
  /* Reset LCD control line(/CS) and Send data */  
  LCD_CS_LOW();
 8003c8e:	4c0b      	ldr	r4, [pc, #44]	; (8003cbc <LCD_IO_WriteData+0x30>)
{
 8003c90:	4605      	mov	r5, r0
  LCD_WRX_HIGH();
 8003c92:	2201      	movs	r2, #1
 8003c94:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003c98:	4809      	ldr	r0, [pc, #36]	; (8003cc0 <LCD_IO_WriteData+0x34>)
 8003c9a:	f001 fc61 	bl	8005560 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8003c9e:	2200      	movs	r2, #0
 8003ca0:	2104      	movs	r1, #4
 8003ca2:	4620      	mov	r0, r4
 8003ca4:	f001 fc5c 	bl	8005560 <HAL_GPIO_WritePin>
  SPIx_Write(RegValue);
 8003ca8:	4628      	mov	r0, r5
 8003caa:	f7ff ff17 	bl	8003adc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003cae:	4620      	mov	r0, r4
 8003cb0:	2201      	movs	r2, #1
 8003cb2:	2104      	movs	r1, #4
}
 8003cb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8003cb8:	f001 bc52 	b.w	8005560 <HAL_GPIO_WritePin>
 8003cbc:	40020800 	.word	0x40020800
 8003cc0:	40020c00 	.word	0x40020c00

08003cc4 <LCD_IO_WriteReg>:

/**
  * @brief  Writes register address.
  */
void LCD_IO_WriteReg(uint8_t Reg) 
{
 8003cc4:	b538      	push	{r3, r4, r5, lr}
  /* Reset WRX to send command */
  LCD_WRX_LOW();
  
  /* Reset LCD control line(/CS) and Send command */
  LCD_CS_LOW();
 8003cc6:	4c0b      	ldr	r4, [pc, #44]	; (8003cf4 <LCD_IO_WriteReg+0x30>)
{
 8003cc8:	4605      	mov	r5, r0
  LCD_WRX_LOW();
 8003cca:	2200      	movs	r2, #0
 8003ccc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003cd0:	4809      	ldr	r0, [pc, #36]	; (8003cf8 <LCD_IO_WriteReg+0x34>)
 8003cd2:	f001 fc45 	bl	8005560 <HAL_GPIO_WritePin>
  LCD_CS_LOW();
 8003cd6:	2200      	movs	r2, #0
 8003cd8:	2104      	movs	r1, #4
 8003cda:	4620      	mov	r0, r4
 8003cdc:	f001 fc40 	bl	8005560 <HAL_GPIO_WritePin>
  SPIx_Write(Reg);
 8003ce0:	4628      	mov	r0, r5
 8003ce2:	f7ff fefb 	bl	8003adc <SPIx_Write>
  
  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	2201      	movs	r2, #1
 8003cea:	2104      	movs	r1, #4
}
 8003cec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  LCD_CS_HIGH();
 8003cf0:	f001 bc36 	b.w	8005560 <HAL_GPIO_WritePin>
 8003cf4:	40020800 	.word	0x40020800
 8003cf8:	40020c00 	.word	0x40020c00

08003cfc <LCD_IO_ReadData>:
  * @param  RegValue Address of the register to read
  * @param  ReadSize Number of bytes to read
  * @retval Content of the register value
  */
uint32_t LCD_IO_ReadData(uint16_t RegValue, uint8_t ReadSize) 
{
 8003cfc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8003cfe:	4605      	mov	r5, r0
 8003d00:	460c      	mov	r4, r1
  uint32_t readvalue = 0;

  /* Select: Chip Select low */
  LCD_CS_LOW();
 8003d02:	2200      	movs	r2, #0
 8003d04:	2104      	movs	r1, #4
 8003d06:	4814      	ldr	r0, [pc, #80]	; (8003d58 <LCD_IO_ReadData+0x5c>)
 8003d08:	f001 fc2a 	bl	8005560 <HAL_GPIO_WritePin>

  /* Reset WRX to send command */
  LCD_WRX_LOW();
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d12:	4812      	ldr	r0, [pc, #72]	; (8003d5c <LCD_IO_ReadData+0x60>)
 8003d14:	f001 fc24 	bl	8005560 <HAL_GPIO_WritePin>
  
  SPIx_Write(RegValue);
 8003d18:	4628      	mov	r0, r5
 8003d1a:	f7ff fedf 	bl	8003adc <SPIx_Write>
  status = HAL_SPI_Receive(&SpiHandle, (uint8_t*) &readvalue, ReadSize, SpixTimeout);
 8003d1e:	4b10      	ldr	r3, [pc, #64]	; (8003d60 <LCD_IO_ReadData+0x64>)
 8003d20:	4810      	ldr	r0, [pc, #64]	; (8003d64 <LCD_IO_ReadData+0x68>)
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	4622      	mov	r2, r4
 8003d26:	a901      	add	r1, sp, #4
 8003d28:	f003 f8df 	bl	8006eea <HAL_SPI_Receive>
  if(status != HAL_OK)
 8003d2c:	b120      	cbz	r0, 8003d38 <LCD_IO_ReadData+0x3c>
  HAL_SPI_DeInit(&SpiHandle);
 8003d2e:	480d      	ldr	r0, [pc, #52]	; (8003d64 <LCD_IO_ReadData+0x68>)
 8003d30:	f002 ff2d 	bl	8006b8e <HAL_SPI_DeInit>
  SPIx_Init();
 8003d34:	f7ff fe08 	bl	8003948 <SPIx_Init>
  
  readvalue = SPIx_Read(ReadSize);

  /* Set WRX to send data */
  LCD_WRX_HIGH();
 8003d38:	2201      	movs	r2, #1
 8003d3a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8003d3e:	4807      	ldr	r0, [pc, #28]	; (8003d5c <LCD_IO_ReadData+0x60>)
  return readvalue;
 8003d40:	9c01      	ldr	r4, [sp, #4]
  LCD_WRX_HIGH();
 8003d42:	f001 fc0d 	bl	8005560 <HAL_GPIO_WritePin>

  /* Deselect: Chip Select high */
  LCD_CS_HIGH();
 8003d46:	2201      	movs	r2, #1
 8003d48:	2104      	movs	r1, #4
 8003d4a:	4803      	ldr	r0, [pc, #12]	; (8003d58 <LCD_IO_ReadData+0x5c>)
 8003d4c:	f001 fc08 	bl	8005560 <HAL_GPIO_WritePin>
  
  return readvalue;
}
 8003d50:	4620      	mov	r0, r4
 8003d52:	b003      	add	sp, #12
 8003d54:	bd30      	pop	{r4, r5, pc}
 8003d56:	bf00      	nop
 8003d58:	40020800 	.word	0x40020800
 8003d5c:	40020c00 	.word	0x40020c00
 8003d60:	2000006c 	.word	0x2000006c
 8003d64:	20000698 	.word	0x20000698

08003d68 <LCD_Delay>:
 8003d68:	f000 bf46 	b.w	8004bf8 <HAL_Delay>

08003d6c <IOE_Init>:
/**
  * @brief  IOE Low Level Initialization.
  */
void IOE_Init(void) 
{
  I2Cx_Init();
 8003d6c:	f7ff be38 	b.w	80039e0 <I2Cx_Init>

08003d70 <IOE_ITConfig>:

/**
  * @brief  IOE Low Level Interrupt configuration.
  */
void IOE_ITConfig(void)
{
 8003d70:	b510      	push	{r4, lr}
 8003d72:	b086      	sub	sp, #24
  STMPE811_INT_CLK_ENABLE();
 8003d74:	2400      	movs	r4, #0
 8003d76:	4b10      	ldr	r3, [pc, #64]	; (8003db8 <IOE_ITConfig+0x48>)
 8003d78:	9400      	str	r4, [sp, #0]
 8003d7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003d7c:	480f      	ldr	r0, [pc, #60]	; (8003dbc <IOE_ITConfig+0x4c>)
  STMPE811_INT_CLK_ENABLE();
 8003d7e:	f042 0201 	orr.w	r2, r2, #1
 8003d82:	631a      	str	r2, [r3, #48]	; 0x30
 8003d84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStruct.Speed = GPIO_SPEED_LOW;
 8003d86:	9404      	str	r4, [sp, #16]
  STMPE811_INT_CLK_ENABLE();
 8003d88:	f003 0301 	and.w	r3, r3, #1
 8003d8c:	9300      	str	r3, [sp, #0]
 8003d8e:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Pin   = STMPE811_INT_PIN;
 8003d90:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003d94:	9301      	str	r3, [sp, #4]
  GPIO_InitStruct.Pull  = GPIO_PULLUP;
 8003d96:	2301      	movs	r3, #1
 8003d98:	9303      	str	r3, [sp, #12]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003d9a:	a901      	add	r1, sp, #4
  GPIO_InitStruct.Mode  = GPIO_MODE_IT_FALLING;
 8003d9c:	4b08      	ldr	r3, [pc, #32]	; (8003dc0 <IOE_ITConfig+0x50>)
 8003d9e:	9302      	str	r3, [sp, #8]
  HAL_GPIO_Init(STMPE811_INT_GPIO_PORT, &GPIO_InitStruct);
 8003da0:	f001 fa58 	bl	8005254 <HAL_GPIO_Init>
  HAL_NVIC_SetPriority((IRQn_Type)(STMPE811_INT_EXTI), 0x0F, 0x00);
 8003da4:	4622      	mov	r2, r4
 8003da6:	210f      	movs	r1, #15
 8003da8:	2028      	movs	r0, #40	; 0x28
 8003daa:	f000 ff4b 	bl	8004c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ((IRQn_Type)(STMPE811_INT_EXTI));
 8003dae:	2028      	movs	r0, #40	; 0x28
 8003db0:	f000 ff7c 	bl	8004cac <HAL_NVIC_EnableIRQ>
  I2Cx_ITConfig();
}
 8003db4:	b006      	add	sp, #24
 8003db6:	bd10      	pop	{r4, pc}
 8003db8:	40023800 	.word	0x40023800
 8003dbc:	40020000 	.word	0x40020000
 8003dc0:	10210000 	.word	0x10210000

08003dc4 <IOE_Write>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @param  Value: Data to be written
  */
void IOE_Write(uint8_t Addr, uint8_t Reg, uint8_t Value)
{
 8003dc4:	b510      	push	{r4, lr}
 8003dc6:	b086      	sub	sp, #24
 8003dc8:	ac06      	add	r4, sp, #24
  status = HAL_I2C_Mem_Write(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, &Value, 1, I2cxTimeout); 
 8003dca:	4b09      	ldr	r3, [pc, #36]	; (8003df0 <IOE_Write+0x2c>)
 8003dcc:	f804 2d01 	strb.w	r2, [r4, #-1]!
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	9302      	str	r3, [sp, #8]
 8003dd4:	2301      	movs	r3, #1
 8003dd6:	460a      	mov	r2, r1
 8003dd8:	9301      	str	r3, [sp, #4]
 8003dda:	4601      	mov	r1, r0
 8003ddc:	9400      	str	r4, [sp, #0]
 8003dde:	4805      	ldr	r0, [pc, #20]	; (8003df4 <IOE_Write+0x30>)
 8003de0:	f001 fe58 	bl	8005a94 <HAL_I2C_Mem_Write>
  if(status != HAL_OK)
 8003de4:	b108      	cbz	r0, 8003dea <IOE_Write+0x26>
    I2Cx_Error();
 8003de6:	f7ff fe6f 	bl	8003ac8 <I2Cx_Error>
  I2Cx_WriteData(Addr, Reg, Value);
}
 8003dea:	b006      	add	sp, #24
 8003dec:	bd10      	pop	{r4, pc}
 8003dee:	bf00      	nop
 8003df0:	20000068 	.word	0x20000068
 8003df4:	20027b34 	.word	0x20027b34

08003df8 <IOE_Read>:
  * @param  Addr: I2C Address
  * @param  Reg: Reg Address 
  * @retval The read data
  */
uint8_t IOE_Read(uint8_t Addr, uint8_t Reg)
{
 8003df8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
  uint8_t value = 0;
 8003dfa:	aa06      	add	r2, sp, #24
 8003dfc:	2300      	movs	r3, #0
 8003dfe:	f802 3d01 	strb.w	r3, [r2, #-1]!
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, Reg, I2C_MEMADD_SIZE_8BIT, &value, 1, I2cxTimeout);
 8003e02:	4b09      	ldr	r3, [pc, #36]	; (8003e28 <IOE_Read+0x30>)
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	9302      	str	r3, [sp, #8]
 8003e08:	2301      	movs	r3, #1
 8003e0a:	e88d 000c 	stmia.w	sp, {r2, r3}
 8003e0e:	460a      	mov	r2, r1
 8003e10:	4601      	mov	r1, r0
 8003e12:	4806      	ldr	r0, [pc, #24]	; (8003e2c <IOE_Read+0x34>)
 8003e14:	f001 fece 	bl	8005bb4 <HAL_I2C_Mem_Read>
  if(status != HAL_OK)
 8003e18:	b108      	cbz	r0, 8003e1e <IOE_Read+0x26>
    I2Cx_Error();
 8003e1a:	f7ff fe55 	bl	8003ac8 <I2Cx_Error>
  return I2Cx_ReadData(Addr, Reg);
}
 8003e1e:	f89d 0017 	ldrb.w	r0, [sp, #23]
 8003e22:	b007      	add	sp, #28
 8003e24:	f85d fb04 	ldr.w	pc, [sp], #4
 8003e28:	20000068 	.word	0x20000068
 8003e2c:	20027b34 	.word	0x20027b34

08003e30 <IOE_ReadMultiple>:
  * @param  pBuffer: pointer to data buffer
  * @param  Length: length of the data
  * @retval 0 if no problems to read multiple data
  */
uint16_t IOE_ReadMultiple(uint8_t Addr, uint8_t Reg, uint8_t *pBuffer, uint16_t Length)
{
 8003e30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  status = HAL_I2C_Mem_Read(&I2cHandle, Addr, (uint16_t)Reg, I2C_MEMADD_SIZE_8BIT, pBuffer, Length, I2cxTimeout);
 8003e32:	4c08      	ldr	r4, [pc, #32]	; (8003e54 <IOE_ReadMultiple+0x24>)
 8003e34:	6824      	ldr	r4, [r4, #0]
 8003e36:	e88d 001c 	stmia.w	sp, {r2, r3, r4}
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	2301      	movs	r3, #1
 8003e3e:	4601      	mov	r1, r0
 8003e40:	4805      	ldr	r0, [pc, #20]	; (8003e58 <IOE_ReadMultiple+0x28>)
 8003e42:	f001 feb7 	bl	8005bb4 <HAL_I2C_Mem_Read>
  if(status == HAL_OK)
 8003e46:	b110      	cbz	r0, 8003e4e <IOE_ReadMultiple+0x1e>
    I2Cx_Error();
 8003e48:	f7ff fe3e 	bl	8003ac8 <I2Cx_Error>
    return 1;
 8003e4c:	2001      	movs	r0, #1
 return I2Cx_ReadBuffer(Addr, Reg, pBuffer, Length);
}
 8003e4e:	b004      	add	sp, #16
 8003e50:	bd10      	pop	{r4, pc}
 8003e52:	bf00      	nop
 8003e54:	20000068 	.word	0x20000068
 8003e58:	20027b34 	.word	0x20027b34

08003e5c <IOE_Delay>:
  * @brief  IOE Delay.
  * @param  Delay in ms
  */
void IOE_Delay(uint32_t Delay)
{
  HAL_Delay(Delay);
 8003e5c:	f000 becc 	b.w	8004bf8 <HAL_Delay>

08003e60 <FillBuffer>:
  * @param  ySize: buffer height
  * @param  OffLine: offset
  * @param  ColorIndex: color Index  
  */
static void FillBuffer(uint32_t LayerIndex, void * pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t ColorIndex) 
{
 8003e60:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
  
  /* Register to memory mode with ARGB8888 as color Mode */ 
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003e64:	4c15      	ldr	r4, [pc, #84]	; (8003ebc <FillBuffer+0x5c>)
{
 8003e66:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8003e68:	4698      	mov	r8, r3
  Dma2dHandler.Init.Mode         = DMA2D_R2M;
 8003e6a:	f44f 3340 	mov.w	r3, #196608	; 0x30000
 8003e6e:	6063      	str	r3, [r4, #4]
  Dma2dHandler.Init.ColorMode    = DMA2D_ARGB8888;
 8003e70:	2300      	movs	r3, #0
 8003e72:	60a3      	str	r3, [r4, #8]
  Dma2dHandler.Init.OutputOffset = OffLine;      
 8003e74:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8003e76:	60e3      	str	r3, [r4, #12]
{
 8003e78:	4681      	mov	r9, r0
  
  Dma2dHandler.Instance = DMA2D; 
 8003e7a:	4b11      	ldr	r3, [pc, #68]	; (8003ec0 <FillBuffer+0x60>)
 8003e7c:	6023      	str	r3, [r4, #0]
  
  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003e7e:	4620      	mov	r0, r4
{
 8003e80:	460e      	mov	r6, r1
 8003e82:	4617      	mov	r7, r2
  if(HAL_DMA2D_Init(&Dma2dHandler) == HAL_OK) 
 8003e84:	f001 f848 	bl	8004f18 <HAL_DMA2D_Init>
 8003e88:	b9a0      	cbnz	r0, 8003eb4 <FillBuffer+0x54>
  {
    if(HAL_DMA2D_ConfigLayer(&Dma2dHandler, LayerIndex) == HAL_OK) 
 8003e8a:	4649      	mov	r1, r9
 8003e8c:	4620      	mov	r0, r4
 8003e8e:	f001 f997 	bl	80051c0 <HAL_DMA2D_ConfigLayer>
 8003e92:	b978      	cbnz	r0, 8003eb4 <FillBuffer+0x54>
    {
      if (HAL_DMA2D_Start(&Dma2dHandler, ColorIndex, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 8003e94:	f8cd 8000 	str.w	r8, [sp]
 8003e98:	463b      	mov	r3, r7
 8003e9a:	4632      	mov	r2, r6
 8003e9c:	4629      	mov	r1, r5
 8003e9e:	4620      	mov	r0, r4
 8003ea0:	f001 f866 	bl	8004f70 <HAL_DMA2D_Start>
 8003ea4:	b930      	cbnz	r0, 8003eb4 <FillBuffer+0x54>
      {
        /* Polling For DMA transfer */  
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003ea6:	210a      	movs	r1, #10
 8003ea8:	4620      	mov	r0, r4
      }
    }
  } 
}
 8003eaa:	b003      	add	sp, #12
 8003eac:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
        HAL_DMA2D_PollForTransfer(&Dma2dHandler, 10);
 8003eb0:	f001 b878 	b.w	8004fa4 <HAL_DMA2D_PollForTransfer>
}
 8003eb4:	b003      	add	sp, #12
 8003eb6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8003eba:	bf00      	nop
 8003ebc:	200006f4 	.word	0x200006f4
 8003ec0:	4002b000 	.word	0x4002b000

08003ec4 <BSP_LCD_GetXSize>:
{
 8003ec4:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelWidth();
 8003ec6:	4b02      	ldr	r3, [pc, #8]	; (8003ed0 <BSP_LCD_GetXSize+0xc>)
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ecc:	4798      	blx	r3
}
 8003ece:	bd08      	pop	{r3, pc}
 8003ed0:	20027c30 	.word	0x20027c30

08003ed4 <BSP_LCD_GetYSize>:
{
 8003ed4:	b508      	push	{r3, lr}
  return LcdDrv->GetLcdPixelHeight();
 8003ed6:	4b02      	ldr	r3, [pc, #8]	; (8003ee0 <BSP_LCD_GetYSize+0xc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003edc:	4798      	blx	r3
}
 8003ede:	bd08      	pop	{r3, pc}
 8003ee0:	20027c30 	.word	0x20027c30

08003ee4 <BSP_LCD_LayerDefaultInit>:
{     
 8003ee4:	b570      	push	{r4, r5, r6, lr}
 8003ee6:	b08e      	sub	sp, #56	; 0x38
  Layercfg.WindowX0 = 0;
 8003ee8:	2400      	movs	r4, #0
{     
 8003eea:	460e      	mov	r6, r1
 8003eec:	4605      	mov	r5, r0
  Layercfg.WindowX0 = 0;
 8003eee:	9401      	str	r4, [sp, #4]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003ef0:	f7ff ffe8 	bl	8003ec4 <BSP_LCD_GetXSize>
  Layercfg.WindowY0 = 0;
 8003ef4:	9403      	str	r4, [sp, #12]
  Layercfg.WindowX1 = BSP_LCD_GetXSize();
 8003ef6:	9002      	str	r0, [sp, #8]
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003ef8:	f7ff ffec 	bl	8003ed4 <BSP_LCD_GetYSize>
  Layercfg.Alpha = 255;
 8003efc:	23ff      	movs	r3, #255	; 0xff
 8003efe:	9306      	str	r3, [sp, #24]
  Layercfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8003f00:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8003f04:	9308      	str	r3, [sp, #32]
  Layercfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8003f06:	2307      	movs	r3, #7
 8003f08:	9309      	str	r3, [sp, #36]	; 0x24
  Layercfg.PixelFormat = LTDC_PIXEL_FORMAT_ARGB8888;
 8003f0a:	9405      	str	r4, [sp, #20]
  Layercfg.Alpha0 = 0;
 8003f0c:	9407      	str	r4, [sp, #28]
  Layercfg.Backcolor.Blue = 0;
 8003f0e:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  Layercfg.Backcolor.Green = 0;
 8003f12:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  Layercfg.Backcolor.Red = 0;
 8003f16:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  Layercfg.WindowY1 = BSP_LCD_GetYSize(); 
 8003f1a:	9004      	str	r0, [sp, #16]
  Layercfg.FBStartAdress = FB_Address;
 8003f1c:	960a      	str	r6, [sp, #40]	; 0x28
  Layercfg.ImageWidth = BSP_LCD_GetXSize();
 8003f1e:	f7ff ffd1 	bl	8003ec4 <BSP_LCD_GetXSize>
 8003f22:	900b      	str	r0, [sp, #44]	; 0x2c
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003f24:	f7ff ffd6 	bl	8003ed4 <BSP_LCD_GetYSize>
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003f28:	4c0b      	ldr	r4, [pc, #44]	; (8003f58 <BSP_LCD_LayerDefaultInit+0x74>)
  Layercfg.ImageHeight = BSP_LCD_GetYSize();
 8003f2a:	900c      	str	r0, [sp, #48]	; 0x30
  HAL_LTDC_ConfigLayer(&LtdcHandler, &Layercfg, LayerIndex); 
 8003f2c:	462a      	mov	r2, r5
 8003f2e:	a901      	add	r1, sp, #4
 8003f30:	4620      	mov	r0, r4
 8003f32:	f002 f8df 	bl	80060f4 <HAL_LTDC_ConfigLayer>
  DrawProp[LayerIndex].BackColor = LCD_COLOR_WHITE;
 8003f36:	4b09      	ldr	r3, [pc, #36]	; (8003f5c <BSP_LCD_LayerDefaultInit+0x78>)
 8003f38:	200c      	movs	r0, #12
 8003f3a:	4368      	muls	r0, r5
 8003f3c:	181a      	adds	r2, r3, r0
 8003f3e:	f04f 31ff 	mov.w	r1, #4294967295
 8003f42:	6051      	str	r1, [r2, #4]
  DrawProp[LayerIndex].pFont     = &Font24;
 8003f44:	4906      	ldr	r1, [pc, #24]	; (8003f60 <BSP_LCD_LayerDefaultInit+0x7c>)
 8003f46:	6091      	str	r1, [r2, #8]
  DrawProp[LayerIndex].TextColor = LCD_COLOR_BLACK; 
 8003f48:	f04f 427f 	mov.w	r2, #4278190080	; 0xff000000
 8003f4c:	501a      	str	r2, [r3, r0]
  HAL_LTDC_EnableDither(&LtdcHandler);
 8003f4e:	4620      	mov	r0, r4
 8003f50:	f002 f92e 	bl	80061b0 <HAL_LTDC_EnableDither>
}
 8003f54:	b00e      	add	sp, #56	; 0x38
 8003f56:	bd70      	pop	{r4, r5, r6, pc}
 8003f58:	20027b88 	.word	0x20027b88
 8003f5c:	20000734 	.word	0x20000734
 8003f60:	20000088 	.word	0x20000088

08003f64 <BSP_LCD_SelectLayer>:
  ActiveLayer = LayerIndex;
 8003f64:	4b01      	ldr	r3, [pc, #4]	; (8003f6c <BSP_LCD_SelectLayer+0x8>)
 8003f66:	6018      	str	r0, [r3, #0]
 8003f68:	4770      	bx	lr
 8003f6a:	bf00      	nop
 8003f6c:	200006f0 	.word	0x200006f0

08003f70 <BSP_LCD_SetLayerVisible>:
{
 8003f70:	4a08      	ldr	r2, [pc, #32]	; (8003f94 <BSP_LCD_SetLayerVisible+0x24>)
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8003f72:	6813      	ldr	r3, [r2, #0]
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003f74:	6812      	ldr	r2, [r2, #0]
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8003f76:	3384      	adds	r3, #132	; 0x84
 8003f78:	01c0      	lsls	r0, r0, #7
  if(state == ENABLE)
 8003f7a:	2901      	cmp	r1, #1
    __HAL_LTDC_LAYER_ENABLE(&LtdcHandler, LayerIndex);
 8003f7c:	5819      	ldr	r1, [r3, r0]
 8003f7e:	bf0c      	ite	eq
 8003f80:	f041 0101 	orreq.w	r1, r1, #1
    __HAL_LTDC_LAYER_DISABLE(&LtdcHandler, LayerIndex);
 8003f84:	f021 0101 	bicne.w	r1, r1, #1
 8003f88:	5019      	str	r1, [r3, r0]
  __HAL_LTDC_RELOAD_CONFIG(&LtdcHandler);
 8003f8a:	6a53      	ldr	r3, [r2, #36]	; 0x24
 8003f8c:	f043 0301 	orr.w	r3, r3, #1
 8003f90:	6253      	str	r3, [r2, #36]	; 0x24
 8003f92:	4770      	bx	lr
 8003f94:	20027b88 	.word	0x20027b88

08003f98 <BSP_LCD_SetColorKeying>:
{  
 8003f98:	b538      	push	{r3, r4, r5, lr}
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8003f9a:	4c06      	ldr	r4, [pc, #24]	; (8003fb4 <BSP_LCD_SetColorKeying+0x1c>)
{  
 8003f9c:	4605      	mov	r5, r0
  HAL_LTDC_ConfigColorKeying(&LtdcHandler, RGBValue, LayerIndex);
 8003f9e:	4602      	mov	r2, r0
 8003fa0:	4620      	mov	r0, r4
 8003fa2:	f002 f8d0 	bl	8006146 <HAL_LTDC_ConfigColorKeying>
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8003fa6:	4629      	mov	r1, r5
 8003fa8:	4620      	mov	r0, r4
}
 8003faa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_LTDC_EnableColorKeying(&LtdcHandler, LayerIndex);
 8003fae:	f002 b8e7 	b.w	8006180 <HAL_LTDC_EnableColorKeying>
 8003fb2:	bf00      	nop
 8003fb4:	20027b88 	.word	0x20027b88

08003fb8 <BSP_LCD_SetTextColor>:
  DrawProp[ActiveLayer].TextColor = Color;
 8003fb8:	4b03      	ldr	r3, [pc, #12]	; (8003fc8 <BSP_LCD_SetTextColor+0x10>)
 8003fba:	681a      	ldr	r2, [r3, #0]
 8003fbc:	230c      	movs	r3, #12
 8003fbe:	4353      	muls	r3, r2
 8003fc0:	4a02      	ldr	r2, [pc, #8]	; (8003fcc <BSP_LCD_SetTextColor+0x14>)
 8003fc2:	50d0      	str	r0, [r2, r3]
 8003fc4:	4770      	bx	lr
 8003fc6:	bf00      	nop
 8003fc8:	200006f0 	.word	0x200006f0
 8003fcc:	20000734 	.word	0x20000734

08003fd0 <BSP_LCD_SetBackColor>:
  DrawProp[ActiveLayer].BackColor = Color;
 8003fd0:	4b03      	ldr	r3, [pc, #12]	; (8003fe0 <BSP_LCD_SetBackColor+0x10>)
 8003fd2:	4a04      	ldr	r2, [pc, #16]	; (8003fe4 <BSP_LCD_SetBackColor+0x14>)
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	210c      	movs	r1, #12
 8003fd8:	fb01 2303 	mla	r3, r1, r3, r2
 8003fdc:	6058      	str	r0, [r3, #4]
 8003fde:	4770      	bx	lr
 8003fe0:	200006f0 	.word	0x200006f0
 8003fe4:	20000734 	.word	0x20000734

08003fe8 <BSP_LCD_SetFont>:
  DrawProp[ActiveLayer].pFont = pFonts;
 8003fe8:	4b03      	ldr	r3, [pc, #12]	; (8003ff8 <BSP_LCD_SetFont+0x10>)
 8003fea:	4a04      	ldr	r2, [pc, #16]	; (8003ffc <BSP_LCD_SetFont+0x14>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	210c      	movs	r1, #12
 8003ff0:	fb01 2303 	mla	r3, r1, r3, r2
 8003ff4:	6098      	str	r0, [r3, #8]
 8003ff6:	4770      	bx	lr
 8003ff8:	200006f0 	.word	0x200006f0
 8003ffc:	20000734 	.word	0x20000734

08004000 <BSP_LCD_ReadPixel>:
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004000:	4b1e      	ldr	r3, [pc, #120]	; (800407c <BSP_LCD_ReadPixel+0x7c>)
{
 8004002:	b570      	push	{r4, r5, r6, lr}
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004004:	681b      	ldr	r3, [r3, #0]
{
 8004006:	460d      	mov	r5, r1
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8004008:	491d      	ldr	r1, [pc, #116]	; (8004080 <BSP_LCD_ReadPixel+0x80>)
{
 800400a:	4604      	mov	r4, r0
  if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800400c:	2034      	movs	r0, #52	; 0x34
 800400e:	fb00 1003 	mla	r0, r0, r3, r1
 8004012:	6c86      	ldr	r6, [r0, #72]	; 0x48
 8004014:	b93e      	cbnz	r6, 8004026 <BSP_LCD_ReadPixel+0x26>
    ret = *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos)));
 8004016:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 8004018:	f7ff ff54 	bl	8003ec4 <BSP_LCD_GetXSize>
 800401c:	fb00 4005 	mla	r0, r0, r5, r4
 8004020:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8004024:	bd70      	pop	{r4, r5, r6, pc}
  else if(LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8004026:	2e01      	cmp	r6, #1
 8004028:	d109      	bne.n	800403e <BSP_LCD_ReadPixel+0x3e>
    ret = (*(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) & 0x00FFFFFF);
 800402a:	6dc6      	ldr	r6, [r0, #92]	; 0x5c
 800402c:	f7ff ff4a 	bl	8003ec4 <BSP_LCD_GetXSize>
 8004030:	fb00 4005 	mla	r0, r0, r5, r4
 8004034:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8004038:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 800403c:	bd70      	pop	{r4, r5, r6, pc}
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 800403e:	2e07      	cmp	r6, #7
 8004040:	bf9d      	ittte	ls
 8004042:	2294      	movls	r2, #148	; 0x94
 8004044:	40f2      	lsrls	r2, r6
 8004046:	43d2      	mvnls	r2, r2
 8004048:	2201      	movhi	r2, #1
 800404a:	f012 0f01 	tst.w	r2, #1
 800404e:	f04f 0234 	mov.w	r2, #52	; 0x34
    ret = *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 8004052:	fb02 1303 	mla	r3, r2, r3, r1
 8004056:	6dde      	ldr	r6, [r3, #92]	; 0x5c
  else if((LtdcHandler.LayerCfg[ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) || \
 8004058:	d107      	bne.n	800406a <BSP_LCD_ReadPixel+0x6a>
    ret = *(__IO uint16_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 800405a:	f7ff ff33 	bl	8003ec4 <BSP_LCD_GetXSize>
 800405e:	fb00 4005 	mla	r0, r0, r5, r4
 8004062:	f836 0010 	ldrh.w	r0, [r6, r0, lsl #1]
 8004066:	b280      	uxth	r0, r0
 8004068:	bd70      	pop	{r4, r5, r6, pc}
    ret = *(__IO uint8_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (2*(Ypos*BSP_LCD_GetXSize() + Xpos)));    
 800406a:	f7ff ff2b 	bl	8003ec4 <BSP_LCD_GetXSize>
 800406e:	fb00 4005 	mla	r0, r0, r5, r4
 8004072:	f816 0010 	ldrb.w	r0, [r6, r0, lsl #1]
 8004076:	b2c0      	uxtb	r0, r0
}
 8004078:	bd70      	pop	{r4, r5, r6, pc}
 800407a:	bf00      	nop
 800407c:	200006f0 	.word	0x200006f0
 8004080:	20027b88 	.word	0x20027b88

08004084 <BSP_LCD_Clear>:
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004084:	4b0c      	ldr	r3, [pc, #48]	; (80040b8 <BSP_LCD_Clear+0x34>)
{ 
 8004086:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004088:	681c      	ldr	r4, [r3, #0]
 800408a:	4a0c      	ldr	r2, [pc, #48]	; (80040bc <BSP_LCD_Clear+0x38>)
 800408c:	2334      	movs	r3, #52	; 0x34
 800408e:	fb03 2304 	mla	r3, r3, r4, r2
{ 
 8004092:	4607      	mov	r7, r0
  FillBuffer(ActiveLayer, (uint32_t *)(LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress), BSP_LCD_GetXSize(), BSP_LCD_GetYSize(), 0, Color);
 8004094:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 8004096:	f7ff ff15 	bl	8003ec4 <BSP_LCD_GetXSize>
 800409a:	4606      	mov	r6, r0
 800409c:	f7ff ff1a 	bl	8003ed4 <BSP_LCD_GetYSize>
 80040a0:	2300      	movs	r3, #0
 80040a2:	9300      	str	r3, [sp, #0]
 80040a4:	9701      	str	r7, [sp, #4]
 80040a6:	4603      	mov	r3, r0
 80040a8:	4632      	mov	r2, r6
 80040aa:	4629      	mov	r1, r5
 80040ac:	4620      	mov	r0, r4
 80040ae:	f7ff fed7 	bl	8003e60 <FillBuffer>
}
 80040b2:	b003      	add	sp, #12
 80040b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	200006f0 	.word	0x200006f0
 80040bc:	20027b88 	.word	0x20027b88

080040c0 <BSP_LCD_DrawHLine>:
{
 80040c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80040c4:	4d0f      	ldr	r5, [pc, #60]	; (8004104 <BSP_LCD_DrawHLine+0x44>)
{
 80040c6:	4617      	mov	r7, r2
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80040c8:	682b      	ldr	r3, [r5, #0]
 80040ca:	4a0f      	ldr	r2, [pc, #60]	; (8004108 <BSP_LCD_DrawHLine+0x48>)
{
 80040cc:	460c      	mov	r4, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80040ce:	2134      	movs	r1, #52	; 0x34
 80040d0:	fb01 2303 	mla	r3, r1, r3, r2
{
 80040d4:	4680      	mov	r8, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80040d6:	6dde      	ldr	r6, [r3, #92]	; 0x5c
 80040d8:	f7ff fef4 	bl	8003ec4 <BSP_LCD_GetXSize>
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80040dc:	682d      	ldr	r5, [r5, #0]
 80040de:	4a0b      	ldr	r2, [pc, #44]	; (800410c <BSP_LCD_DrawHLine+0x4c>)
 80040e0:	230c      	movs	r3, #12
 80040e2:	436b      	muls	r3, r5
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 80040e4:	fb00 8004 	mla	r0, r0, r4, r8
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, Length, 1, 0, DrawProp[ActiveLayer].TextColor);
 80040e8:	58d3      	ldr	r3, [r2, r3]
 80040ea:	9301      	str	r3, [sp, #4]
 80040ec:	2300      	movs	r3, #0
 80040ee:	9300      	str	r3, [sp, #0]
 80040f0:	eb06 0180 	add.w	r1, r6, r0, lsl #2
 80040f4:	2301      	movs	r3, #1
 80040f6:	463a      	mov	r2, r7
 80040f8:	4628      	mov	r0, r5
 80040fa:	f7ff feb1 	bl	8003e60 <FillBuffer>
}
 80040fe:	b002      	add	sp, #8
 8004100:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004104:	200006f0 	.word	0x200006f0
 8004108:	20027b88 	.word	0x20027b88
 800410c:	20000734 	.word	0x20000734

08004110 <BSP_LCD_DrawVLine>:
{
 8004110:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004114:	4d11      	ldr	r5, [pc, #68]	; (800415c <BSP_LCD_DrawVLine+0x4c>)
 8004116:	4b12      	ldr	r3, [pc, #72]	; (8004160 <BSP_LCD_DrawVLine+0x50>)
{
 8004118:	460c      	mov	r4, r1
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800411a:	6829      	ldr	r1, [r5, #0]
{
 800411c:	4690      	mov	r8, r2
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800411e:	2234      	movs	r2, #52	; 0x34
 8004120:	fb02 3101 	mla	r1, r2, r1, r3
{
 8004124:	4681      	mov	r9, r0
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 8004126:	6dcf      	ldr	r7, [r1, #92]	; 0x5c
 8004128:	f7ff fecc 	bl	8003ec4 <BSP_LCD_GetXSize>
 800412c:	4682      	mov	sl, r0
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800412e:	f7ff fec9 	bl	8003ec4 <BSP_LCD_GetXSize>
 8004132:	682e      	ldr	r6, [r5, #0]
 8004134:	4b0b      	ldr	r3, [pc, #44]	; (8004164 <BSP_LCD_DrawVLine+0x54>)
 8004136:	250c      	movs	r5, #12
 8004138:	4375      	muls	r5, r6
  xaddress = (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress) + 4*(BSP_LCD_GetXSize()*Ypos + Xpos);
 800413a:	fb0a 9404 	mla	r4, sl, r4, r9
  FillBuffer(ActiveLayer, (uint32_t *)xaddress, 1, Length, (BSP_LCD_GetXSize() - 1), DrawProp[ActiveLayer].TextColor);
 800413e:	595b      	ldr	r3, [r3, r5]
 8004140:	9301      	str	r3, [sp, #4]
 8004142:	3801      	subs	r0, #1
 8004144:	9000      	str	r0, [sp, #0]
 8004146:	4643      	mov	r3, r8
 8004148:	2201      	movs	r2, #1
 800414a:	eb07 0184 	add.w	r1, r7, r4, lsl #2
 800414e:	4630      	mov	r0, r6
 8004150:	f7ff fe86 	bl	8003e60 <FillBuffer>
}
 8004154:	b002      	add	sp, #8
 8004156:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800415a:	bf00      	nop
 800415c:	200006f0 	.word	0x200006f0
 8004160:	20027b88 	.word	0x20027b88
 8004164:	20000734 	.word	0x20000734

08004168 <BSP_LCD_DrawRect>:
{
 8004168:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800416a:	461e      	mov	r6, r3
 800416c:	460d      	mov	r5, r1
 800416e:	4604      	mov	r4, r0
 8004170:	4617      	mov	r7, r2
  BSP_LCD_DrawHLine(Xpos, Ypos, Width);
 8004172:	f7ff ffa5 	bl	80040c0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawHLine(Xpos, (Ypos+ Height), Width);
 8004176:	19a9      	adds	r1, r5, r6
 8004178:	463a      	mov	r2, r7
 800417a:	4620      	mov	r0, r4
 800417c:	b289      	uxth	r1, r1
 800417e:	f7ff ff9f 	bl	80040c0 <BSP_LCD_DrawHLine>
  BSP_LCD_DrawVLine(Xpos, Ypos, Height);
 8004182:	4632      	mov	r2, r6
 8004184:	4629      	mov	r1, r5
 8004186:	4620      	mov	r0, r4
 8004188:	f7ff ffc2 	bl	8004110 <BSP_LCD_DrawVLine>
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 800418c:	19e0      	adds	r0, r4, r7
 800418e:	4632      	mov	r2, r6
 8004190:	4629      	mov	r1, r5
 8004192:	b280      	uxth	r0, r0
}
 8004194:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
  BSP_LCD_DrawVLine((Xpos + Width), Ypos, Height);
 8004198:	f7ff bfba 	b.w	8004110 <BSP_LCD_DrawVLine>

0800419c <BSP_LCD_DisplayOn>:
  if(LcdDrv->DisplayOn != NULL)
 800419c:	4b02      	ldr	r3, [pc, #8]	; (80041a8 <BSP_LCD_DisplayOn+0xc>)
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	b103      	cbz	r3, 80041a6 <BSP_LCD_DisplayOn+0xa>
    LcdDrv->DisplayOn();
 80041a4:	4718      	bx	r3
 80041a6:	4770      	bx	lr
 80041a8:	20027c30 	.word	0x20027c30

080041ac <BSP_LCD_MspInit>:
{
 80041ac:	b530      	push	{r4, r5, lr}
 80041ae:	b08f      	sub	sp, #60	; 0x3c
  __HAL_RCC_LTDC_CLK_ENABLE();
 80041b0:	4b49      	ldr	r3, [pc, #292]	; (80042d8 <BSP_LCD_MspInit+0x12c>)
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80041b2:	4d4a      	ldr	r5, [pc, #296]	; (80042dc <BSP_LCD_MspInit+0x130>)
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 80041b4:	484a      	ldr	r0, [pc, #296]	; (80042e0 <BSP_LCD_MspInit+0x134>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80041b6:	4c4b      	ldr	r4, [pc, #300]	; (80042e4 <BSP_LCD_MspInit+0x138>)
  __HAL_RCC_LTDC_CLK_ENABLE();
 80041b8:	2200      	movs	r2, #0
 80041ba:	9201      	str	r2, [sp, #4]
 80041bc:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80041be:	f041 6180 	orr.w	r1, r1, #67108864	; 0x4000000
 80041c2:	6459      	str	r1, [r3, #68]	; 0x44
 80041c4:	6c59      	ldr	r1, [r3, #68]	; 0x44
 80041c6:	f001 6180 	and.w	r1, r1, #67108864	; 0x4000000
 80041ca:	9101      	str	r1, [sp, #4]
 80041cc:	9901      	ldr	r1, [sp, #4]
  __HAL_RCC_DMA2D_CLK_ENABLE(); 
 80041ce:	9202      	str	r2, [sp, #8]
 80041d0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041d2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 80041d6:	6319      	str	r1, [r3, #48]	; 0x30
 80041d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041da:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 80041de:	9102      	str	r1, [sp, #8]
 80041e0:	9902      	ldr	r1, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80041e2:	9203      	str	r2, [sp, #12]
 80041e4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041e6:	f041 0101 	orr.w	r1, r1, #1
 80041ea:	6319      	str	r1, [r3, #48]	; 0x30
 80041ec:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041ee:	f001 0101 	and.w	r1, r1, #1
 80041f2:	9103      	str	r1, [sp, #12]
 80041f4:	9903      	ldr	r1, [sp, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80041f6:	9204      	str	r2, [sp, #16]
 80041f8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80041fa:	f041 0102 	orr.w	r1, r1, #2
 80041fe:	6319      	str	r1, [r3, #48]	; 0x30
 8004200:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004202:	f001 0102 	and.w	r1, r1, #2
 8004206:	9104      	str	r1, [sp, #16]
 8004208:	9904      	ldr	r1, [sp, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800420a:	9205      	str	r2, [sp, #20]
 800420c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800420e:	f041 0104 	orr.w	r1, r1, #4
 8004212:	6319      	str	r1, [r3, #48]	; 0x30
 8004214:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004216:	f001 0104 	and.w	r1, r1, #4
 800421a:	9105      	str	r1, [sp, #20]
 800421c:	9905      	ldr	r1, [sp, #20]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800421e:	9206      	str	r2, [sp, #24]
 8004220:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004222:	f041 0108 	orr.w	r1, r1, #8
 8004226:	6319      	str	r1, [r3, #48]	; 0x30
 8004228:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800422a:	f001 0108 	and.w	r1, r1, #8
 800422e:	9106      	str	r1, [sp, #24]
 8004230:	9906      	ldr	r1, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8004232:	9207      	str	r2, [sp, #28]
 8004234:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004236:	f041 0120 	orr.w	r1, r1, #32
 800423a:	6319      	str	r1, [r3, #48]	; 0x30
 800423c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800423e:	f001 0120 	and.w	r1, r1, #32
 8004242:	9107      	str	r1, [sp, #28]
 8004244:	9907      	ldr	r1, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004246:	9208      	str	r2, [sp, #32]
 8004248:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800424a:	f041 0140 	orr.w	r1, r1, #64	; 0x40
 800424e:	6319      	str	r1, [r3, #48]	; 0x30
 8004250:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull = GPIO_NOPULL;
 8004252:	920b      	str	r2, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004254:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004258:	9308      	str	r3, [sp, #32]
 800425a:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_6 |
 800425c:	f641 0358 	movw	r3, #6232	; 0x1858
 8004260:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStructure.Mode = GPIO_MODE_AF_PP;
 8004262:	2302      	movs	r3, #2
 8004264:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 8004266:	930c      	str	r3, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 8004268:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF14_LTDC;
 800426a:	230e      	movs	r3, #14
 800426c:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStructure);
 800426e:	f000 fff1 	bl	8005254 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 8004272:	f44f 6370 	mov.w	r3, #3840	; 0xf00
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 8004276:	a909      	add	r1, sp, #36	; 0x24
 8004278:	4628      	mov	r0, r5
  GPIO_InitStructure.Pin = GPIO_PIN_8 | \
 800427a:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 800427c:	f000 ffea 	bl	8005254 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004280:	f44f 6398 	mov.w	r3, #1216	; 0x4c0
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 8004284:	a909      	add	r1, sp, #36	; 0x24
 8004286:	4818      	ldr	r0, [pc, #96]	; (80042e8 <BSP_LCD_MspInit+0x13c>)
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_10;
 8004288:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);
 800428a:	f000 ffe3 	bl	8005254 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 800428e:	2348      	movs	r3, #72	; 0x48
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004290:	a909      	add	r1, sp, #36	; 0x24
 8004292:	4816      	ldr	r0, [pc, #88]	; (80042ec <BSP_LCD_MspInit+0x140>)
  GPIO_InitStructure.Pin = GPIO_PIN_3 | GPIO_PIN_6;
 8004294:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 8004296:	f000 ffdd 	bl	8005254 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 800429a:	f44f 6380 	mov.w	r3, #1024	; 0x400
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 800429e:	a909      	add	r1, sp, #36	; 0x24
 80042a0:	4813      	ldr	r0, [pc, #76]	; (80042f0 <BSP_LCD_MspInit+0x144>)
  GPIO_InitStructure.Pin = GPIO_PIN_10;
 80042a2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);     
 80042a4:	f000 ffd6 	bl	8005254 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80042a8:	f44f 630c 	mov.w	r3, #2240	; 0x8c0
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80042ac:	a909      	add	r1, sp, #36	; 0x24
 80042ae:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_6 | GPIO_PIN_7 | \
 80042b0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80042b2:	f000 ffcf 	bl	8005254 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1;
 80042b6:	2303      	movs	r3, #3
 80042b8:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80042ba:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80042bc:	2309      	movs	r3, #9
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80042be:	4628      	mov	r0, r5
  GPIO_InitStructure.Alternate= GPIO_AF9_LTDC;
 80042c0:	930d      	str	r3, [sp, #52]	; 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);
 80042c2:	f000 ffc7 	bl	8005254 <HAL_GPIO_Init>
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80042c6:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80042ca:	a909      	add	r1, sp, #36	; 0x24
 80042cc:	4620      	mov	r0, r4
  GPIO_InitStructure.Pin = GPIO_PIN_10 | GPIO_PIN_12;
 80042ce:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80042d0:	f000 ffc0 	bl	8005254 <HAL_GPIO_Init>
}
 80042d4:	b00f      	add	sp, #60	; 0x3c
 80042d6:	bd30      	pop	{r4, r5, pc}
 80042d8:	40023800 	.word	0x40023800
 80042dc:	40020400 	.word	0x40020400
 80042e0:	40020000 	.word	0x40020000
 80042e4:	40021800 	.word	0x40021800
 80042e8:	40020800 	.word	0x40020800
 80042ec:	40020c00 	.word	0x40020c00
 80042f0:	40021400 	.word	0x40021400

080042f4 <BSP_LCD_Init>:
{ 
 80042f4:	b538      	push	{r3, r4, r5, lr}
    LtdcHandler.Instance = LTDC;
 80042f6:	4c22      	ldr	r4, [pc, #136]	; (8004380 <BSP_LCD_Init+0x8c>)
 80042f8:	4b22      	ldr	r3, [pc, #136]	; (8004384 <BSP_LCD_Init+0x90>)
 80042fa:	6023      	str	r3, [r4, #0]
    LtdcHandler.Init.HorizontalSync = ILI9341_HSYNC;
 80042fc:	2309      	movs	r3, #9
 80042fe:	6163      	str	r3, [r4, #20]
    LtdcHandler.Init.VerticalSync = ILI9341_VSYNC;
 8004300:	2301      	movs	r3, #1
 8004302:	61a3      	str	r3, [r4, #24]
    LtdcHandler.Init.AccumulatedHBP = ILI9341_HBP;
 8004304:	231d      	movs	r3, #29
 8004306:	61e3      	str	r3, [r4, #28]
    LtdcHandler.Init.AccumulatedVBP = ILI9341_VBP;
 8004308:	2303      	movs	r3, #3
 800430a:	6223      	str	r3, [r4, #32]
    LtdcHandler.Init.AccumulatedActiveW = 269;
 800430c:	f240 130d 	movw	r3, #269	; 0x10d
 8004310:	6263      	str	r3, [r4, #36]	; 0x24
    LtdcHandler.Init.AccumulatedActiveH = 323;
 8004312:	f240 1343 	movw	r3, #323	; 0x143
 8004316:	62a3      	str	r3, [r4, #40]	; 0x28
    LtdcHandler.Init.TotalWidth = 279;
 8004318:	f240 1317 	movw	r3, #279	; 0x117
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800431c:	481a      	ldr	r0, [pc, #104]	; (8004388 <BSP_LCD_Init+0x94>)
    LtdcHandler.Init.TotalWidth = 279;
 800431e:	62e3      	str	r3, [r4, #44]	; 0x2c
    LtdcHandler.Init.TotalHeigh = 327;
 8004320:	f240 1347 	movw	r3, #327	; 0x147
 8004324:	6323      	str	r3, [r4, #48]	; 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8004326:	2308      	movs	r3, #8
 8004328:	6003      	str	r3, [r0, #0]
    PeriphClkInitStruct.PLLSAI.PLLSAIN = 192;
 800432a:	23c0      	movs	r3, #192	; 0xc0
 800432c:	6103      	str	r3, [r0, #16]
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 800432e:	2304      	movs	r3, #4
    LtdcHandler.Init.Backcolor.Red= 0;
 8004330:	2500      	movs	r5, #0
    PeriphClkInitStruct.PLLSAI.PLLSAIR = 4;
 8004332:	6183      	str	r3, [r0, #24]
    PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_8;
 8004334:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004338:	6243      	str	r3, [r0, #36]	; 0x24
    LtdcHandler.Init.Backcolor.Red= 0;
 800433a:	f884 5036 	strb.w	r5, [r4, #54]	; 0x36
    LtdcHandler.Init.Backcolor.Blue= 0;
 800433e:	f884 5034 	strb.w	r5, [r4, #52]	; 0x34
    LtdcHandler.Init.Backcolor.Green= 0;
 8004342:	f884 5035 	strb.w	r5, [r4, #53]	; 0x35
    HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct); 
 8004346:	f002 f9f1 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
    LtdcHandler.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800434a:	6065      	str	r5, [r4, #4]
    LtdcHandler.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800434c:	60a5      	str	r5, [r4, #8]
    LtdcHandler.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800434e:	60e5      	str	r5, [r4, #12]
    LtdcHandler.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8004350:	6125      	str	r5, [r4, #16]
    BSP_LCD_MspInit();
 8004352:	f7ff ff2b 	bl	80041ac <BSP_LCD_MspInit>
    HAL_LTDC_Init(&LtdcHandler); 
 8004356:	4620      	mov	r0, r4
 8004358:	f001 fe00 	bl	8005f5c <HAL_LTDC_Init>
    LcdDrv = &ili9341_drv;
 800435c:	4a0b      	ldr	r2, [pc, #44]	; (800438c <BSP_LCD_Init+0x98>)
 800435e:	4b0c      	ldr	r3, [pc, #48]	; (8004390 <BSP_LCD_Init+0x9c>)
 8004360:	6013      	str	r3, [r2, #0]
    LcdDrv->Init();
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	4798      	blx	r3
    BSP_SDRAM_Init();
 8004366:	f000 fafd 	bl	8004964 <BSP_SDRAM_Init>
  DrawProp[ActiveLayer].pFont = pFonts;
 800436a:	4b0a      	ldr	r3, [pc, #40]	; (8004394 <BSP_LCD_Init+0xa0>)
 800436c:	4a0a      	ldr	r2, [pc, #40]	; (8004398 <BSP_LCD_Init+0xa4>)
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	210c      	movs	r1, #12
 8004372:	fb01 2303 	mla	r3, r1, r3, r2
 8004376:	4a09      	ldr	r2, [pc, #36]	; (800439c <BSP_LCD_Init+0xa8>)
 8004378:	609a      	str	r2, [r3, #8]
}  
 800437a:	4628      	mov	r0, r5
 800437c:	bd38      	pop	{r3, r4, r5, pc}
 800437e:	bf00      	nop
 8004380:	20027b88 	.word	0x20027b88
 8004384:	40016800 	.word	0x40016800
 8004388:	2000074c 	.word	0x2000074c
 800438c:	20027c30 	.word	0x20027c30
 8004390:	20000000 	.word	0x20000000
 8004394:	200006f0 	.word	0x200006f0
 8004398:	20000734 	.word	0x20000734
 800439c:	20000088 	.word	0x20000088

080043a0 <BSP_LCD_DrawPixel>:
{
 80043a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80043a2:	4b08      	ldr	r3, [pc, #32]	; (80043c4 <BSP_LCD_DrawPixel+0x24>)
{
 80043a4:	4616      	mov	r6, r2
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	4a07      	ldr	r2, [pc, #28]	; (80043c8 <BSP_LCD_DrawPixel+0x28>)
{
 80043aa:	460c      	mov	r4, r1
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80043ac:	2134      	movs	r1, #52	; 0x34
 80043ae:	fb01 2303 	mla	r3, r1, r3, r2
{
 80043b2:	4607      	mov	r7, r0
  *(__IO uint32_t*) (LtdcHandler.LayerCfg[ActiveLayer].FBStartAdress + (4*(Ypos*BSP_LCD_GetXSize() + Xpos))) = RGB_Code;
 80043b4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
 80043b6:	f7ff fd85 	bl	8003ec4 <BSP_LCD_GetXSize>
 80043ba:	fb00 7004 	mla	r0, r0, r4, r7
 80043be:	f845 6020 	str.w	r6, [r5, r0, lsl #2]
 80043c2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80043c4:	200006f0 	.word	0x200006f0
 80043c8:	20027b88 	.word	0x20027b88

080043cc <BSP_LCD_DisplayChar>:
{
 80043cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043d0:	4b2f      	ldr	r3, [pc, #188]	; (8004490 <BSP_LCD_DisplayChar+0xc4>)
{
 80043d2:	b085      	sub	sp, #20
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043d4:	681b      	ldr	r3, [r3, #0]
{
 80043d6:	9102      	str	r1, [sp, #8]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043d8:	492e      	ldr	r1, [pc, #184]	; (8004494 <BSP_LCD_DisplayChar+0xc8>)
{
 80043da:	9001      	str	r0, [sp, #4]
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043dc:	200c      	movs	r0, #12
 80043de:	fb00 1303 	mla	r3, r0, r3, r1
 80043e2:	f1a2 0420 	sub.w	r4, r2, #32
 80043e6:	6899      	ldr	r1, [r3, #8]
              DrawProp[ActiveLayer].pFont->Height * ((DrawProp[ActiveLayer].pFont->Width + 7) / 8)]);
 80043e8:	f8b1 a004 	ldrh.w	sl, [r1, #4]
 80043ec:	f8b1 b006 	ldrh.w	fp, [r1, #6]
 80043f0:	680a      	ldr	r2, [r1, #0]
 80043f2:	f10a 0607 	add.w	r6, sl, #7
 80043f6:	10f6      	asrs	r6, r6, #3
  DrawChar(Xpos, Ypos, &DrawProp[ActiveLayer].pFont->table[(Ascii-' ') *\
 80043f8:	fb0b f404 	mul.w	r4, fp, r4
  offset = 8 *((width + 7)/8) -  width ;
 80043fc:	ebca 00c6 	rsb	r0, sl, r6, lsl #3
 8004400:	fb06 2404 	mla	r4, r6, r4, r2
      if(line & (1 << (width- j + offset- 1))) 
 8004404:	f10a 32ff 	add.w	r2, sl, #4294967295
 8004408:	fa52 f380 	uxtab	r3, r2, r0
  for(i = 0; i < height; i++)
 800440c:	f04f 0800 	mov.w	r8, #0
      if(line & (1 << (width- j + offset- 1))) 
 8004410:	9303      	str	r3, [sp, #12]
 8004412:	9b02      	ldr	r3, [sp, #8]
  for(i = 0; i < height; i++)
 8004414:	45d8      	cmp	r8, fp
 8004416:	eb03 0908 	add.w	r9, r3, r8
 800441a:	fa1f f989 	uxth.w	r9, r9
 800441e:	d302      	bcc.n	8004426 <BSP_LCD_DisplayChar+0x5a>
}
 8004420:	b005      	add	sp, #20
 8004422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    switch(((width + 7)/8))
 8004426:	2e01      	cmp	r6, #1
 8004428:	d009      	beq.n	800443e <BSP_LCD_DisplayChar+0x72>
 800442a:	2e02      	cmp	r6, #2
 800442c:	d00f      	beq.n	800444e <BSP_LCD_DisplayChar+0x82>
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];      
 800442e:	7865      	ldrb	r5, [r4, #1]
 8004430:	7822      	ldrb	r2, [r4, #0]
 8004432:	022d      	lsls	r5, r5, #8
 8004434:	ea45 4502 	orr.w	r5, r5, r2, lsl #16
 8004438:	78a2      	ldrb	r2, [r4, #2]
 800443a:	4315      	orrs	r5, r2
 800443c:	e000      	b.n	8004440 <BSP_LCD_DisplayChar+0x74>
      line =  pchar[0];      
 800443e:	7825      	ldrb	r5, [r4, #0]
    for (j = 0; j < width; j++)
 8004440:	2700      	movs	r7, #0
 8004442:	45ba      	cmp	sl, r7
 8004444:	d808      	bhi.n	8004458 <BSP_LCD_DisplayChar+0x8c>
  for(i = 0; i < height; i++)
 8004446:	f108 0801 	add.w	r8, r8, #1
 800444a:	4434      	add	r4, r6
 800444c:	e7e1      	b.n	8004412 <BSP_LCD_DisplayChar+0x46>
      line =  (pchar[0]<< 8) | pchar[1];
 800444e:	7822      	ldrb	r2, [r4, #0]
 8004450:	7865      	ldrb	r5, [r4, #1]
 8004452:	ea45 2502 	orr.w	r5, r5, r2, lsl #8
 8004456:	e7f3      	b.n	8004440 <BSP_LCD_DisplayChar+0x74>
      if(line & (1 << (width- j + offset- 1))) 
 8004458:	9b03      	ldr	r3, [sp, #12]
 800445a:	2201      	movs	r2, #1
 800445c:	1bd9      	subs	r1, r3, r7
 800445e:	408a      	lsls	r2, r1
 8004460:	490b      	ldr	r1, [pc, #44]	; (8004490 <BSP_LCD_DisplayChar+0xc4>)
 8004462:	422a      	tst	r2, r5
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 8004464:	6809      	ldr	r1, [r1, #0]
 8004466:	f04f 020c 	mov.w	r2, #12
      if(line & (1 << (width- j + offset- 1))) 
 800446a:	d00a      	beq.n	8004482 <BSP_LCD_DisplayChar+0xb6>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].TextColor);
 800446c:	9b01      	ldr	r3, [sp, #4]
 800446e:	434a      	muls	r2, r1
 8004470:	19d8      	adds	r0, r3, r7
 8004472:	4b08      	ldr	r3, [pc, #32]	; (8004494 <BSP_LCD_DisplayChar+0xc8>)
 8004474:	589a      	ldr	r2, [r3, r2]
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004476:	4649      	mov	r1, r9
 8004478:	b280      	uxth	r0, r0
 800447a:	f7ff ff91 	bl	80043a0 <BSP_LCD_DrawPixel>
    for (j = 0; j < width; j++)
 800447e:	3701      	adds	r7, #1
 8004480:	e7df      	b.n	8004442 <BSP_LCD_DisplayChar+0x76>
        BSP_LCD_DrawPixel((Xpos + j), Ypos, DrawProp[ActiveLayer].BackColor);
 8004482:	4b04      	ldr	r3, [pc, #16]	; (8004494 <BSP_LCD_DisplayChar+0xc8>)
 8004484:	fb02 3201 	mla	r2, r2, r1, r3
 8004488:	9b01      	ldr	r3, [sp, #4]
 800448a:	6852      	ldr	r2, [r2, #4]
 800448c:	19d8      	adds	r0, r3, r7
 800448e:	e7f2      	b.n	8004476 <BSP_LCD_DisplayChar+0xaa>
 8004490:	200006f0 	.word	0x200006f0
 8004494:	20000734 	.word	0x20000734

08004498 <BSP_LCD_DisplayStringAt>:
{
 8004498:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800449c:	469a      	mov	sl, r3
 800449e:	4604      	mov	r4, r0
 80044a0:	460f      	mov	r7, r1
 80044a2:	4616      	mov	r6, r2
  uint8_t  *ptr = pText;
 80044a4:	4613      	mov	r3, r2
 80044a6:	eba3 0906 	sub.w	r9, r3, r6
  while (*ptr++) size ++ ;
 80044aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 80044ae:	2a00      	cmp	r2, #0
 80044b0:	d1f9      	bne.n	80044a6 <BSP_LCD_DisplayStringAt+0xe>
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80044b2:	f7ff fd07 	bl	8003ec4 <BSP_LCD_GetXSize>
 80044b6:	4b25      	ldr	r3, [pc, #148]	; (800454c <BSP_LCD_DisplayStringAt+0xb4>)
 80044b8:	4d25      	ldr	r5, [pc, #148]	; (8004550 <BSP_LCD_DisplayStringAt+0xb8>)
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	210c      	movs	r1, #12
 80044be:	fb01 5202 	mla	r2, r1, r2, r5
  switch (mode)
 80044c2:	f1ba 0f01 	cmp.w	sl, #1
  xsize = (BSP_LCD_GetXSize()/DrawProp[ActiveLayer].pFont->Width);
 80044c6:	6892      	ldr	r2, [r2, #8]
 80044c8:	4698      	mov	r8, r3
 80044ca:	8892      	ldrh	r2, [r2, #4]
 80044cc:	fbb0 f0f2 	udiv	r0, r0, r2
  switch (mode)
 80044d0:	d021      	beq.n	8004516 <BSP_LCD_DisplayStringAt+0x7e>
 80044d2:	f1ba 0f02 	cmp.w	sl, #2
 80044d6:	d025      	beq.n	8004524 <BSP_LCD_DisplayStringAt+0x8c>
  uint8_t  *ptr = pText;
 80044d8:	46b3      	mov	fp, r6
  while ((*pText != 0) & (((BSP_LCD_GetXSize() - (i*DrawProp[ActiveLayer].pFont->Width)) & 0xFFFF) >= DrawProp[ActiveLayer].pFont->Width))
 80044da:	f04f 0a0c 	mov.w	sl, #12
 80044de:	f89b 2000 	ldrb.w	r2, [fp]
 80044e2:	3200      	adds	r2, #0
 80044e4:	bf18      	it	ne
 80044e6:	2201      	movne	r2, #1
 80044e8:	9201      	str	r2, [sp, #4]
 80044ea:	f7ff fceb 	bl	8003ec4 <BSP_LCD_GetXSize>
 80044ee:	f8d8 3000 	ldr.w	r3, [r8]
 80044f2:	fb0a 5303 	mla	r3, sl, r3, r5
 80044f6:	ebab 0906 	sub.w	r9, fp, r6
 80044fa:	689b      	ldr	r3, [r3, #8]
 80044fc:	889b      	ldrh	r3, [r3, #4]
 80044fe:	fa1f f989 	uxth.w	r9, r9
 8004502:	fb03 0019 	mls	r0, r3, r9, r0
 8004506:	b280      	uxth	r0, r0
 8004508:	4298      	cmp	r0, r3
 800450a:	d301      	bcc.n	8004510 <BSP_LCD_DisplayStringAt+0x78>
 800450c:	9a01      	ldr	r2, [sp, #4]
 800450e:	b972      	cbnz	r2, 800452e <BSP_LCD_DisplayStringAt+0x96>
}
 8004510:	b003      	add	sp, #12
 8004512:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      refcolumn = X+ ((xsize - size)* DrawProp[ActiveLayer].pFont->Width) / 2;
 8004516:	eba0 0009 	sub.w	r0, r0, r9
 800451a:	4350      	muls	r0, r2
 800451c:	eb04 0050 	add.w	r0, r4, r0, lsr #1
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004520:	b284      	uxth	r4, r0
      break;
 8004522:	e7d9      	b.n	80044d8 <BSP_LCD_DisplayStringAt+0x40>
      refcolumn = X + ((xsize - size)*DrawProp[ActiveLayer].pFont->Width);
 8004524:	eba0 0009 	sub.w	r0, r0, r9
 8004528:	fb10 4002 	smlabb	r0, r0, r2, r4
 800452c:	e7f8      	b.n	8004520 <BSP_LCD_DisplayStringAt+0x88>
    BSP_LCD_DisplayChar(refcolumn, Y, *pText);
 800452e:	4620      	mov	r0, r4
 8004530:	f81b 2b01 	ldrb.w	r2, [fp], #1
 8004534:	4639      	mov	r1, r7
 8004536:	f7ff ff49 	bl	80043cc <BSP_LCD_DisplayChar>
    refcolumn += DrawProp[ActiveLayer].pFont->Width;
 800453a:	f8d8 3000 	ldr.w	r3, [r8]
 800453e:	fb0a 5303 	mla	r3, sl, r3, r5
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	8898      	ldrh	r0, [r3, #4]
 8004546:	4420      	add	r0, r4
 8004548:	b284      	uxth	r4, r0
 800454a:	e7c8      	b.n	80044de <BSP_LCD_DisplayStringAt+0x46>
 800454c:	200006f0 	.word	0x200006f0
 8004550:	20000734 	.word	0x20000734

08004554 <BSP_LCD_DrawCircle>:
{
 8004554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004558:	b089      	sub	sp, #36	; 0x24
  d = 3 - (Radius << 1);
 800455a:	0054      	lsls	r4, r2, #1
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 800455c:	4f49      	ldr	r7, [pc, #292]	; (8004684 <BSP_LCD_DrawCircle+0x130>)
 800455e:	f8df 8128 	ldr.w	r8, [pc, #296]	; 8004688 <BSP_LCD_DrawCircle+0x134>
{
 8004562:	9002      	str	r0, [sp, #8]
 8004564:	9103      	str	r1, [sp, #12]
  d = 3 - (Radius << 1);
 8004566:	f1c4 0403 	rsb	r4, r4, #3
  cury = Radius;
 800456a:	4616      	mov	r6, r2
  curx = 0;
 800456c:	f04f 0a00 	mov.w	sl, #0
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 8004570:	f04f 090c 	mov.w	r9, #12
 8004574:	fa1f f38a 	uxth.w	r3, sl
 8004578:	9301      	str	r3, [sp, #4]
 800457a:	9a01      	ldr	r2, [sp, #4]
 800457c:	9b02      	ldr	r3, [sp, #8]
 800457e:	4413      	add	r3, r2
 8004580:	b29b      	uxth	r3, r3
 8004582:	9306      	str	r3, [sp, #24]
 8004584:	9b03      	ldr	r3, [sp, #12]
 8004586:	9806      	ldr	r0, [sp, #24]
 8004588:	b2b5      	uxth	r5, r6
 800458a:	eba3 0b05 	sub.w	fp, r3, r5
 800458e:	f8d8 3000 	ldr.w	r3, [r8]
 8004592:	fb09 f303 	mul.w	r3, r9, r3
 8004596:	fa1f fb8b 	uxth.w	fp, fp
 800459a:	58fa      	ldr	r2, [r7, r3]
 800459c:	4659      	mov	r1, fp
 800459e:	f7ff feff 	bl	80043a0 <BSP_LCD_DrawPixel>
 80045a2:	9a01      	ldr	r2, [sp, #4]
 80045a4:	9b02      	ldr	r3, [sp, #8]
 80045a6:	1a9b      	subs	r3, r3, r2
 80045a8:	b29b      	uxth	r3, r3
 80045aa:	9304      	str	r3, [sp, #16]
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos - cury), DrawProp[ActiveLayer].TextColor);
 80045ac:	f8d8 3000 	ldr.w	r3, [r8]
 80045b0:	9804      	ldr	r0, [sp, #16]
 80045b2:	fb09 f303 	mul.w	r3, r9, r3
 80045b6:	4659      	mov	r1, fp
 80045b8:	58fa      	ldr	r2, [r7, r3]
 80045ba:	f7ff fef1 	bl	80043a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80045be:	9b02      	ldr	r3, [sp, #8]
 80045c0:	9a01      	ldr	r2, [sp, #4]
 80045c2:	442b      	add	r3, r5
 80045c4:	b29b      	uxth	r3, r3
 80045c6:	9305      	str	r3, [sp, #20]
 80045c8:	9b03      	ldr	r3, [sp, #12]
 80045ca:	9805      	ldr	r0, [sp, #20]
 80045cc:	1a9b      	subs	r3, r3, r2
 80045ce:	f8d8 2000 	ldr.w	r2, [r8]
 80045d2:	fb09 f202 	mul.w	r2, r9, r2
 80045d6:	b29b      	uxth	r3, r3
 80045d8:	4619      	mov	r1, r3
 80045da:	58ba      	ldr	r2, [r7, r2]
 80045dc:	9307      	str	r3, [sp, #28]
 80045de:	f7ff fedf 	bl	80043a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos - curx), DrawProp[ActiveLayer].TextColor);
 80045e2:	9b02      	ldr	r3, [sp, #8]
 80045e4:	f8d8 2000 	ldr.w	r2, [r8]
 80045e8:	eba3 0b05 	sub.w	fp, r3, r5
 80045ec:	fb09 f202 	mul.w	r2, r9, r2
 80045f0:	9b07      	ldr	r3, [sp, #28]
 80045f2:	58ba      	ldr	r2, [r7, r2]
 80045f4:	fa1f fb8b 	uxth.w	fp, fp
 80045f8:	4619      	mov	r1, r3
 80045fa:	4658      	mov	r0, fp
 80045fc:	f7ff fed0 	bl	80043a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos + curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8004600:	9b03      	ldr	r3, [sp, #12]
 8004602:	9806      	ldr	r0, [sp, #24]
 8004604:	441d      	add	r5, r3
 8004606:	f8d8 3000 	ldr.w	r3, [r8]
 800460a:	fb09 f303 	mul.w	r3, r9, r3
 800460e:	b2ad      	uxth	r5, r5
 8004610:	58fa      	ldr	r2, [r7, r3]
 8004612:	4629      	mov	r1, r5
 8004614:	f7ff fec4 	bl	80043a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - curx), (Ypos + cury), DrawProp[ActiveLayer].TextColor);
 8004618:	f8d8 3000 	ldr.w	r3, [r8]
 800461c:	9804      	ldr	r0, [sp, #16]
 800461e:	fb09 f303 	mul.w	r3, r9, r3
 8004622:	4629      	mov	r1, r5
 8004624:	58fa      	ldr	r2, [r7, r3]
 8004626:	f7ff febb 	bl	80043a0 <BSP_LCD_DrawPixel>
 800462a:	9b03      	ldr	r3, [sp, #12]
 800462c:	9a01      	ldr	r2, [sp, #4]
    BSP_LCD_DrawPixel((Xpos + cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);
 800462e:	9805      	ldr	r0, [sp, #20]
 8004630:	189d      	adds	r5, r3, r2
 8004632:	f8d8 3000 	ldr.w	r3, [r8]
 8004636:	fb09 f303 	mul.w	r3, r9, r3
 800463a:	b2ad      	uxth	r5, r5
 800463c:	58fa      	ldr	r2, [r7, r3]
 800463e:	4629      	mov	r1, r5
 8004640:	f7ff feae 	bl	80043a0 <BSP_LCD_DrawPixel>
    BSP_LCD_DrawPixel((Xpos - cury), (Ypos + curx), DrawProp[ActiveLayer].TextColor);   
 8004644:	f8d8 3000 	ldr.w	r3, [r8]
 8004648:	fb09 f303 	mul.w	r3, r9, r3
 800464c:	4629      	mov	r1, r5
 800464e:	58fa      	ldr	r2, [r7, r3]
 8004650:	4658      	mov	r0, fp
 8004652:	f7ff fea5 	bl	80043a0 <BSP_LCD_DrawPixel>
    if (d < 0)
 8004656:	2c00      	cmp	r4, #0
      d += (curx << 2) + 6;
 8004658:	bfb5      	itete	lt
 800465a:	3406      	addlt	r4, #6
      d += ((curx - cury) << 2) + 10;
 800465c:	ebaa 0306 	subge.w	r3, sl, r6
      d += (curx << 2) + 6;
 8004660:	eb04 048a 	addlt.w	r4, r4, sl, lsl #2
      d += ((curx - cury) << 2) + 10;
 8004664:	340a      	addge	r4, #10
      cury--;
 8004666:	bfa8      	it	ge
 8004668:	f106 36ff 	addge.w	r6, r6, #4294967295
    curx++;
 800466c:	f10a 0a01 	add.w	sl, sl, #1
      d += ((curx - cury) << 2) + 10;
 8004670:	bfa8      	it	ge
 8004672:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (curx <= cury)
 8004676:	4556      	cmp	r6, sl
 8004678:	f4bf af7c 	bcs.w	8004574 <BSP_LCD_DrawCircle+0x20>
}
 800467c:	b009      	add	sp, #36	; 0x24
 800467e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004682:	bf00      	nop
 8004684:	20000734 	.word	0x20000734
 8004688:	200006f0 	.word	0x200006f0

0800468c <BSP_LCD_FillCircle>:
{
 800468c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  d = 3 - (Radius << 1);
 8004690:	0054      	lsls	r4, r2, #1
{
 8004692:	4682      	mov	sl, r0
 8004694:	4689      	mov	r9, r1
 8004696:	4693      	mov	fp, r2
  d = 3 - (Radius << 1);
 8004698:	f1c4 0403 	rsb	r4, r4, #3
  cury = Radius;
 800469c:	4616      	mov	r6, r2
  curx = 0;
 800469e:	2500      	movs	r5, #0
    if(cury > 0) 
 80046a0:	b1be      	cbz	r6, 80046d2 <BSP_LCD_FillCircle+0x46>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos + curx, 2*cury);
 80046a2:	b2b7      	uxth	r7, r6
 80046a4:	ebaa 0307 	sub.w	r3, sl, r7
 80046a8:	fa1f f885 	uxth.w	r8, r5
 80046ac:	007f      	lsls	r7, r7, #1
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	b2bf      	uxth	r7, r7
 80046b2:	eb09 0108 	add.w	r1, r9, r8
 80046b6:	4618      	mov	r0, r3
 80046b8:	463a      	mov	r2, r7
 80046ba:	b289      	uxth	r1, r1
 80046bc:	9301      	str	r3, [sp, #4]
 80046be:	f7ff fcff 	bl	80040c0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - cury, Ypos - curx, 2*cury);
 80046c2:	9b01      	ldr	r3, [sp, #4]
 80046c4:	eba9 0108 	sub.w	r1, r9, r8
 80046c8:	463a      	mov	r2, r7
 80046ca:	b289      	uxth	r1, r1
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fcf7 	bl	80040c0 <BSP_LCD_DrawHLine>
    if(curx > 0) 
 80046d2:	b1bd      	cbz	r5, 8004704 <BSP_LCD_FillCircle+0x78>
 80046d4:	b2af      	uxth	r7, r5
 80046d6:	ebaa 0307 	sub.w	r3, sl, r7
      BSP_LCD_DrawHLine(Xpos - curx, Ypos - cury, 2*curx);
 80046da:	fa1f f886 	uxth.w	r8, r6
 80046de:	007f      	lsls	r7, r7, #1
 80046e0:	b29b      	uxth	r3, r3
 80046e2:	b2bf      	uxth	r7, r7
 80046e4:	eba9 0108 	sub.w	r1, r9, r8
 80046e8:	4618      	mov	r0, r3
 80046ea:	463a      	mov	r2, r7
 80046ec:	b289      	uxth	r1, r1
 80046ee:	9301      	str	r3, [sp, #4]
 80046f0:	f7ff fce6 	bl	80040c0 <BSP_LCD_DrawHLine>
      BSP_LCD_DrawHLine(Xpos - curx, Ypos + cury, 2*curx);
 80046f4:	9b01      	ldr	r3, [sp, #4]
 80046f6:	eb09 0108 	add.w	r1, r9, r8
 80046fa:	463a      	mov	r2, r7
 80046fc:	b289      	uxth	r1, r1
 80046fe:	4618      	mov	r0, r3
 8004700:	f7ff fcde 	bl	80040c0 <BSP_LCD_DrawHLine>
    if (d < 0)
 8004704:	2c00      	cmp	r4, #0
      d += (curx << 2) + 6;
 8004706:	bfb5      	itete	lt
 8004708:	3406      	addlt	r4, #6
      d += ((curx - cury) << 2) + 10;
 800470a:	1bab      	subge	r3, r5, r6
      d += (curx << 2) + 6;
 800470c:	eb04 0485 	addlt.w	r4, r4, r5, lsl #2
      d += ((curx - cury) << 2) + 10;
 8004710:	340a      	addge	r4, #10
      cury--;
 8004712:	bfa8      	it	ge
 8004714:	f106 36ff 	addge.w	r6, r6, #4294967295
    curx++;
 8004718:	f105 0501 	add.w	r5, r5, #1
      d += ((curx - cury) << 2) + 10;
 800471c:	bfa8      	it	ge
 800471e:	eb04 0483 	addge.w	r4, r4, r3, lsl #2
  while (curx <= cury)
 8004722:	42ae      	cmp	r6, r5
 8004724:	d2bc      	bcs.n	80046a0 <BSP_LCD_FillCircle+0x14>
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004726:	465a      	mov	r2, fp
 8004728:	4649      	mov	r1, r9
 800472a:	4650      	mov	r0, sl
}
 800472c:	b003      	add	sp, #12
 800472e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_DrawCircle(Xpos, Ypos, Radius);
 8004732:	f7ff bf0f 	b.w	8004554 <BSP_LCD_DrawCircle>
	...

08004738 <BSP_SDRAM_Initialization_sequence>:
/**
  * @brief  Programs the SDRAM device.
  * @param  RefreshCount: SDRAM refresh counter value 
  */
void BSP_SDRAM_Initialization_sequence(uint32_t RefreshCount)
{
 8004738:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
  __IO uint32_t tmpmrd =0;
  
  /* Step 1:  Configure a clock configuration enable command */
  Command.CommandMode             = FMC_SDRAM_CMD_CLK_ENABLE;
 800473c:	4c23      	ldr	r4, [pc, #140]	; (80047cc <BSP_SDRAM_Initialization_sequence+0x94>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800473e:	4d24      	ldr	r5, [pc, #144]	; (80047d0 <BSP_SDRAM_Initialization_sequence+0x98>)
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004740:	2601      	movs	r6, #1
  __IO uint32_t tmpmrd =0;
 8004742:	f04f 0800 	mov.w	r8, #0
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004746:	2708      	movs	r7, #8
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004748:	4621      	mov	r1, r4
{
 800474a:	4682      	mov	sl, r0
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800474c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004750:	4628      	mov	r0, r5
  __IO uint32_t tmpmrd =0;
 8004752:	f8cd 8004 	str.w	r8, [sp, #4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004756:	e884 00c0 	stmia.w	r4, {r6, r7}
  Command.AutoRefreshNumber       = 1;
 800475a:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 800475c:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004760:	f002 f91c 	bl	800699c <HAL_SDRAM_SendCommand>

  /* Step 2: Insert 100 us minimum delay */ 
  /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
  HAL_Delay(1);
 8004764:	4630      	mov	r0, r6
 8004766:	f000 fa47 	bl	8004bf8 <HAL_Delay>

  /* Step 3: Configure a PALL (precharge all) command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_PALL;
 800476a:	2302      	movs	r3, #2
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 800476c:	4621      	mov	r1, r4
 800476e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8004772:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004774:	e884 0088 	stmia.w	r4, {r3, r7}
  
  /* Step 4: Configure an Auto Refresh command */ 
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 4;
 8004778:	f04f 0904 	mov.w	r9, #4
  Command.AutoRefreshNumber       = 1;
 800477c:	60a6      	str	r6, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 800477e:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);  
 8004782:	f002 f90b 	bl	800699c <HAL_SDRAM_SendCommand>
  Command.CommandMode             = FMC_SDRAM_CMD_AUTOREFRESH_MODE;
 8004786:	2303      	movs	r3, #3
  Command.ModeRegisterDefinition  = 0;

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 8004788:	4621      	mov	r1, r4
 800478a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800478e:	4628      	mov	r0, r5
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 8004790:	e884 0088 	stmia.w	r4, {r3, r7}
  Command.AutoRefreshNumber       = 4;
 8004794:	f8c4 9008 	str.w	r9, [r4, #8]
  Command.ModeRegisterDefinition  = 0;
 8004798:	f8c4 800c 	str.w	r8, [r4, #12]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 800479c:	f002 f8fe 	bl	800699c <HAL_SDRAM_SendCommand>
  
  /* Step 5: Program the external memory mode register */
  tmpmrd = (uint32_t)SDRAM_MODEREG_BURST_LENGTH_1          |
 80047a0:	f44f 730c 	mov.w	r3, #560	; 0x230
 80047a4:	9301      	str	r3, [sp, #4]
                     SDRAM_MODEREG_WRITEBURST_MODE_SINGLE;
  
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
  Command.AutoRefreshNumber       = 1;
  Command.ModeRegisterDefinition  = tmpmrd;
 80047a6:	9b01      	ldr	r3, [sp, #4]
 80047a8:	60e3      	str	r3, [r4, #12]

  /* Send the command */
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80047aa:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80047ae:	4621      	mov	r1, r4
 80047b0:	4628      	mov	r0, r5
  Command.CommandMode             = FMC_SDRAM_CMD_LOAD_MODE;
 80047b2:	f8c4 9000 	str.w	r9, [r4]
  Command.CommandTarget           = FMC_SDRAM_CMD_TARGET_BANK2;
 80047b6:	6067      	str	r7, [r4, #4]
  Command.AutoRefreshNumber       = 1;
 80047b8:	60a6      	str	r6, [r4, #8]
  HAL_SDRAM_SendCommand(&SdramHandle, &Command, SDRAM_TIMEOUT);
 80047ba:	f002 f8ef 	bl	800699c <HAL_SDRAM_SendCommand>
  
  /* Step 6: Set the refresh rate counter */
  /* Set the device refresh rate */
  HAL_SDRAM_ProgramRefreshRate(&SdramHandle, RefreshCount); 
 80047be:	4651      	mov	r1, sl
 80047c0:	4628      	mov	r0, r5
 80047c2:	f002 f902 	bl	80069ca <HAL_SDRAM_ProgramRefreshRate>
}
 80047c6:	b002      	add	sp, #8
 80047c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047cc:	2000077c 	.word	0x2000077c
 80047d0:	2000078c 	.word	0x2000078c

080047d4 <BSP_SDRAM_MspInit>:
  * @note   This function can be surcharged by application code.
  * @param  hsdram: pointer on SDRAM handle
  * @param  Params: pointer on additional configuration parameters, can be NULL.
  */
__weak void BSP_SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram, void *Params)
{
 80047d4:	b570      	push	{r4, r5, r6, lr}
  static DMA_HandleTypeDef dmaHandle;
  GPIO_InitTypeDef GPIO_InitStructure;

  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80047d6:	4606      	mov	r6, r0
{
 80047d8:	b08e      	sub	sp, #56	; 0x38
  if(hsdram != (SDRAM_HandleTypeDef  *)NULL)
 80047da:	2800      	cmp	r0, #0
 80047dc:	f000 80ad 	beq.w	800493a <BSP_SDRAM_MspInit+0x166>
  {
  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 80047e0:	4b57      	ldr	r3, [pc, #348]	; (8004940 <BSP_SDRAM_MspInit+0x16c>)
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;

  /* GPIOB configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 80047e2:	4858      	ldr	r0, [pc, #352]	; (8004944 <BSP_SDRAM_MspInit+0x170>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80047e4:	2500      	movs	r5, #0
 80047e6:	9501      	str	r5, [sp, #4]
 80047e8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047ea:	f042 0201 	orr.w	r2, r2, #1
 80047ee:	639a      	str	r2, [r3, #56]	; 0x38
 80047f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80047f2:	f002 0201 	and.w	r2, r2, #1
 80047f6:	9201      	str	r2, [sp, #4]
 80047f8:	9a01      	ldr	r2, [sp, #4]
  __DMAx_CLK_ENABLE();
 80047fa:	9502      	str	r5, [sp, #8]
 80047fc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80047fe:	f442 0280 	orr.w	r2, r2, #4194304	; 0x400000
 8004802:	631a      	str	r2, [r3, #48]	; 0x30
 8004804:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004806:	f402 0280 	and.w	r2, r2, #4194304	; 0x400000
 800480a:	9202      	str	r2, [sp, #8]
 800480c:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800480e:	9503      	str	r5, [sp, #12]
 8004810:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004812:	f042 0202 	orr.w	r2, r2, #2
 8004816:	631a      	str	r2, [r3, #48]	; 0x30
 8004818:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800481a:	f002 0202 	and.w	r2, r2, #2
 800481e:	9203      	str	r2, [sp, #12]
 8004820:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004822:	9504      	str	r5, [sp, #16]
 8004824:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004826:	f042 0204 	orr.w	r2, r2, #4
 800482a:	631a      	str	r2, [r3, #48]	; 0x30
 800482c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800482e:	f002 0204 	and.w	r2, r2, #4
 8004832:	9204      	str	r2, [sp, #16]
 8004834:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8004836:	9505      	str	r5, [sp, #20]
 8004838:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800483a:	f042 0208 	orr.w	r2, r2, #8
 800483e:	631a      	str	r2, [r3, #48]	; 0x30
 8004840:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004842:	f002 0208 	and.w	r2, r2, #8
 8004846:	9205      	str	r2, [sp, #20]
 8004848:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800484a:	9506      	str	r5, [sp, #24]
 800484c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800484e:	f042 0210 	orr.w	r2, r2, #16
 8004852:	631a      	str	r2, [r3, #48]	; 0x30
 8004854:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004856:	f002 0210 	and.w	r2, r2, #16
 800485a:	9206      	str	r2, [sp, #24]
 800485c:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800485e:	9507      	str	r5, [sp, #28]
 8004860:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004862:	f042 0220 	orr.w	r2, r2, #32
 8004866:	631a      	str	r2, [r3, #48]	; 0x30
 8004868:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800486a:	f002 0220 	and.w	r2, r2, #32
 800486e:	9207      	str	r2, [sp, #28]
 8004870:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004872:	9508      	str	r5, [sp, #32]
 8004874:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004876:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800487a:	631a      	str	r2, [r3, #48]	; 0x30
 800487c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
  GPIO_InitStructure.Pull  = GPIO_NOPULL;
 800487e:	950b      	str	r5, [sp, #44]	; 0x2c
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8004880:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004884:	9308      	str	r3, [sp, #32]
 8004886:	9b08      	ldr	r3, [sp, #32]
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 8004888:	2302      	movs	r3, #2
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 800488a:	ac0e      	add	r4, sp, #56	; 0x38
  GPIO_InitStructure.Mode  = GPIO_MODE_AF_PP;
 800488c:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStructure.Speed = GPIO_SPEED_FAST;
 800488e:	930c      	str	r3, [sp, #48]	; 0x30
  GPIO_InitStructure.Alternate = GPIO_AF12_FMC;
 8004890:	230c      	movs	r3, #12
 8004892:	930d      	str	r3, [sp, #52]	; 0x34
  GPIO_InitStructure.Pin = GPIO_PIN_5 | GPIO_PIN_6;
 8004894:	2360      	movs	r3, #96	; 0x60
 8004896:	f844 3d14 	str.w	r3, [r4, #-20]!
  HAL_GPIO_Init(GPIOB, &GPIO_InitStructure);  
 800489a:	4621      	mov	r1, r4
 800489c:	f000 fcda 	bl	8005254 <HAL_GPIO_Init>

  /* GPIOC configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80048a0:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80048a2:	4621      	mov	r1, r4
 80048a4:	4828      	ldr	r0, [pc, #160]	; (8004948 <BSP_SDRAM_MspInit+0x174>)
  GPIO_InitStructure.Pin = GPIO_PIN_0;      
 80048a6:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStructure);  
 80048a8:	f000 fcd4 	bl	8005254 <HAL_GPIO_Init>
  
  /* GPIOD configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80048ac:	f24c 7303 	movw	r3, #50947	; 0xc703
                           GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_14 |
                           GPIO_PIN_15;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80048b0:	4621      	mov	r1, r4
 80048b2:	4826      	ldr	r0, [pc, #152]	; (800494c <BSP_SDRAM_MspInit+0x178>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1  | GPIO_PIN_8 |
 80048b4:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStructure);
 80048b6:	f000 fccd 	bl	8005254 <HAL_GPIO_Init>

  /* GPIOE configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80048ba:	f64f 7383 	movw	r3, #65411	; 0xff83
                           GPIO_PIN_8  | GPIO_PIN_9  | GPIO_PIN_10 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80048be:	4621      	mov	r1, r4
 80048c0:	4823      	ldr	r0, [pc, #140]	; (8004950 <BSP_SDRAM_MspInit+0x17c>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1  | GPIO_PIN_7 |
 80048c2:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStructure);
 80048c4:	f000 fcc6 	bl	8005254 <HAL_GPIO_Init>

  /* GPIOF configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80048c8:	f64f 033f 	movw	r3, #63551	; 0xf83f
                           GPIO_PIN_3  | GPIO_PIN_4 | GPIO_PIN_5 |
                           GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 |
                           GPIO_PIN_14 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80048cc:	4621      	mov	r1, r4
 80048ce:	4821      	ldr	r0, [pc, #132]	; (8004954 <BSP_SDRAM_MspInit+0x180>)
  GPIO_InitStructure.Pin = GPIO_PIN_0  | GPIO_PIN_1 | GPIO_PIN_2 | 
 80048d0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOF, &GPIO_InitStructure);
 80048d2:	f000 fcbf 	bl	8005254 <HAL_GPIO_Init>

  /* GPIOG configuration */
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
                           GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80048d6:	4621      	mov	r1, r4
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80048d8:	f248 1333 	movw	r3, #33075	; 0x8133

  /* Configure common DMA parameters */
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 80048dc:	4c1e      	ldr	r4, [pc, #120]	; (8004958 <BSP_SDRAM_MspInit+0x184>)
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80048de:	481f      	ldr	r0, [pc, #124]	; (800495c <BSP_SDRAM_MspInit+0x188>)
  GPIO_InitStructure.Pin = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_4 |
 80048e0:	9309      	str	r3, [sp, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStructure);
 80048e2:	f000 fcb7 	bl	8005254 <HAL_GPIO_Init>
  dmaHandle.Init.Direction           = DMA_MEMORY_TO_MEMORY;
 80048e6:	2380      	movs	r3, #128	; 0x80
 80048e8:	60a3      	str	r3, [r4, #8]
  dmaHandle.Init.PeriphInc           = DMA_PINC_ENABLE;
 80048ea:	f44f 7300 	mov.w	r3, #512	; 0x200
 80048ee:	60e3      	str	r3, [r4, #12]
  dmaHandle.Init.MemInc              = DMA_MINC_ENABLE;
 80048f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80048f4:	6123      	str	r3, [r4, #16]
  dmaHandle.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80048f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80048fa:	6163      	str	r3, [r4, #20]
  dmaHandle.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80048fc:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8004900:	61a3      	str	r3, [r4, #24]
  dmaHandle.Init.Mode                = DMA_NORMAL;
  dmaHandle.Init.Priority            = DMA_PRIORITY_HIGH;
 8004902:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004906:	6223      	str	r3, [r4, #32]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
  dmaHandle.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004908:	2303      	movs	r3, #3
 800490a:	62a3      	str	r3, [r4, #40]	; 0x28
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
  dmaHandle.Init.PeriphBurst         = DMA_PBURST_SINGLE; 
 800490c:	6325      	str	r5, [r4, #48]	; 0x30
  
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 800490e:	4b14      	ldr	r3, [pc, #80]	; (8004960 <BSP_SDRAM_MspInit+0x18c>)
  
  /* Associate the DMA handle */
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 8004910:	6334      	str	r4, [r6, #48]	; 0x30
  
  /* Deinitialize the stream for new transfer */
  HAL_DMA_DeInit(&dmaHandle);
 8004912:	4620      	mov	r0, r4
  dmaHandle.Instance = SDRAM_DMAx_STREAM;
 8004914:	6023      	str	r3, [r4, #0]
  dmaHandle.Init.Channel             = SDRAM_DMAx_CHANNEL;
 8004916:	6065      	str	r5, [r4, #4]
  dmaHandle.Init.Mode                = DMA_NORMAL;
 8004918:	61e5      	str	r5, [r4, #28]
  dmaHandle.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800491a:	6265      	str	r5, [r4, #36]	; 0x24
  dmaHandle.Init.MemBurst            = DMA_MBURST_SINGLE;
 800491c:	62e5      	str	r5, [r4, #44]	; 0x2c
  __HAL_LINKDMA(hsdram, hdma, dmaHandle);
 800491e:	63a6      	str	r6, [r4, #56]	; 0x38
  HAL_DMA_DeInit(&dmaHandle);
 8004920:	f000 fa8e 	bl	8004e40 <HAL_DMA_DeInit>
  
  /* Configure the DMA stream */
  HAL_DMA_Init(&dmaHandle); 
 8004924:	4620      	mov	r0, r4
 8004926:	f000 fa0d 	bl	8004d44 <HAL_DMA_Init>
  
  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_DMAx_IRQn, 0x0F, 0);
 800492a:	2038      	movs	r0, #56	; 0x38
 800492c:	462a      	mov	r2, r5
 800492e:	210f      	movs	r1, #15
 8004930:	f000 f988 	bl	8004c44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_DMAx_IRQn);
 8004934:	2038      	movs	r0, #56	; 0x38
 8004936:	f000 f9b9 	bl	8004cac <HAL_NVIC_EnableIRQ>
  } /* of if(hsdram != (SDRAM_HandleTypeDef  *)NULL) */
}
 800493a:	b00e      	add	sp, #56	; 0x38
 800493c:	bd70      	pop	{r4, r5, r6, pc}
 800493e:	bf00      	nop
 8004940:	40023800 	.word	0x40023800
 8004944:	40020400 	.word	0x40020400
 8004948:	40020800 	.word	0x40020800
 800494c:	40020c00 	.word	0x40020c00
 8004950:	40021000 	.word	0x40021000
 8004954:	40021400 	.word	0x40021400
 8004958:	200007dc 	.word	0x200007dc
 800495c:	40021800 	.word	0x40021800
 8004960:	40026410 	.word	0x40026410

08004964 <BSP_SDRAM_Init>:
{
 8004964:	b570      	push	{r4, r5, r6, lr}
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 8004966:	4c1a      	ldr	r4, [pc, #104]	; (80049d0 <BSP_SDRAM_Init+0x6c>)
  Timing.LoadToActiveDelay    = 2;
 8004968:	4d1a      	ldr	r5, [pc, #104]	; (80049d4 <BSP_SDRAM_Init+0x70>)
  SdramHandle.Instance = FMC_SDRAM_DEVICE;
 800496a:	4b1b      	ldr	r3, [pc, #108]	; (80049d8 <BSP_SDRAM_Init+0x74>)
 800496c:	6023      	str	r3, [r4, #0]
  Timing.LoadToActiveDelay    = 2;
 800496e:	2302      	movs	r3, #2
 8004970:	602b      	str	r3, [r5, #0]
  Timing.WriteRecoveryTime    = 2;
 8004972:	612b      	str	r3, [r5, #16]
  Timing.RPDelay              = 2;
 8004974:	616b      	str	r3, [r5, #20]
  Timing.RCDDelay             = 2;
 8004976:	61ab      	str	r3, [r5, #24]
  SdramHandle.Init.MemoryDataWidth    = SDRAM_MEMORY_WIDTH;
 8004978:	2310      	movs	r3, #16
 800497a:	6123      	str	r3, [r4, #16]
  SdramHandle.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800497c:	2340      	movs	r3, #64	; 0x40
 800497e:	6163      	str	r3, [r4, #20]
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004980:	f44f 73c0 	mov.w	r3, #384	; 0x180
  Timing.ExitSelfRefreshDelay = 7;
 8004984:	2107      	movs	r1, #7
  SdramHandle.Init.CASLatency         = SDRAM_CAS_LATENCY;
 8004986:	61a3      	str	r3, [r4, #24]
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004988:	f44f 6300 	mov.w	r3, #2048	; 0x800
  Timing.SelfRefreshTime      = 4;
 800498c:	2204      	movs	r2, #4
  Timing.ExitSelfRefreshDelay = 7;
 800498e:	6069      	str	r1, [r5, #4]
  Timing.RowCycleDelay        = 7;
 8004990:	60e9      	str	r1, [r5, #12]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 8004992:	2601      	movs	r6, #1
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 8004994:	2100      	movs	r1, #0
  SdramHandle.Init.SDClockPeriod      = SDCLOCK_PERIOD;
 8004996:	6223      	str	r3, [r4, #32]
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 8004998:	4620      	mov	r0, r4
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 800499a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  SdramHandle.Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 800499e:	60e2      	str	r2, [r4, #12]
  SdramHandle.Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_1;
 80049a0:	62a3      	str	r3, [r4, #40]	; 0x28
  Timing.SelfRefreshTime      = 4;
 80049a2:	60aa      	str	r2, [r5, #8]
  SdramHandle.Init.SDBank             = FMC_SDRAM_BANK2;
 80049a4:	6066      	str	r6, [r4, #4]
  SdramHandle.Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80049a6:	60a1      	str	r1, [r4, #8]
  SdramHandle.Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80049a8:	61e1      	str	r1, [r4, #28]
  SdramHandle.Init.ReadBurst          = SDRAM_READBURST;
 80049aa:	6261      	str	r1, [r4, #36]	; 0x24
  BSP_SDRAM_MspInit(&SdramHandle, (void *)NULL);
 80049ac:	f7ff ff12 	bl	80047d4 <BSP_SDRAM_MspInit>
  if(HAL_SDRAM_Init(&SdramHandle, &Timing) != HAL_OK)
 80049b0:	4629      	mov	r1, r5
 80049b2:	4620      	mov	r0, r4
 80049b4:	f001 ffd2 	bl	800695c <HAL_SDRAM_Init>
 80049b8:	4c08      	ldr	r4, [pc, #32]	; (80049dc <BSP_SDRAM_Init+0x78>)
    sdramstatus = SDRAM_ERROR;
 80049ba:	2800      	cmp	r0, #0
 80049bc:	bf14      	ite	ne
 80049be:	4630      	movne	r0, r6
 80049c0:	2000      	moveq	r0, #0
 80049c2:	7020      	strb	r0, [r4, #0]
  BSP_SDRAM_Initialization_sequence(REFRESH_COUNT);
 80049c4:	f240 506a 	movw	r0, #1386	; 0x56a
 80049c8:	f7ff feb6 	bl	8004738 <BSP_SDRAM_Initialization_sequence>
}
 80049cc:	7820      	ldrb	r0, [r4, #0]
 80049ce:	bd70      	pop	{r4, r5, r6, pc}
 80049d0:	2000078c 	.word	0x2000078c
 80049d4:	200007c0 	.word	0x200007c0
 80049d8:	a0000140 	.word	0xa0000140
 80049dc:	20000070 	.word	0x20000070

080049e0 <BSP_TS_Init>:
  * @param  XSize: The maximum X size of the TS area on LCD
  * @param  YSize: The maximum Y size of the TS area on LCD  
  * @retval TS_OK: if all initializations are OK. Other value if error.
  */
uint8_t BSP_TS_Init(uint16_t XSize, uint16_t YSize)
{
 80049e0:	b538      	push	{r3, r4, r5, lr}
  uint8_t ret = TS_ERROR;

  /* Initialize x and y positions boundaries */
  TsXBoundary = XSize;
 80049e2:	4b0c      	ldr	r3, [pc, #48]	; (8004a14 <BSP_TS_Init+0x34>)
  TsYBoundary = YSize;

  /* Read ID and verify if the IO expander is ready */
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80049e4:	4c0c      	ldr	r4, [pc, #48]	; (8004a18 <BSP_TS_Init+0x38>)
  TsXBoundary = XSize;
 80049e6:	8018      	strh	r0, [r3, #0]
  TsYBoundary = YSize;
 80049e8:	4b0c      	ldr	r3, [pc, #48]	; (8004a1c <BSP_TS_Init+0x3c>)
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80049ea:	2082      	movs	r0, #130	; 0x82
  TsYBoundary = YSize;
 80049ec:	8019      	strh	r1, [r3, #0]
  if(stmpe811_ts_drv.ReadID(TS_I2C_ADDRESS) == STMPE811_ID)
 80049ee:	6863      	ldr	r3, [r4, #4]
 80049f0:	4798      	blx	r3
 80049f2:	f640 0311 	movw	r3, #2065	; 0x811
 80049f6:	4298      	cmp	r0, r3
 80049f8:	d10a      	bne.n	8004a10 <BSP_TS_Init+0x30>
  {
    /* Initialize the TS driver structure */
    TsDrv = &stmpe811_ts_drv;
 80049fa:	4d09      	ldr	r5, [pc, #36]	; (8004a20 <BSP_TS_Init+0x40>)
  }

  if(ret == TS_OK)
  {
    /* Initialize the LL TS Driver */
    TsDrv->Init(TS_I2C_ADDRESS);
 80049fc:	6823      	ldr	r3, [r4, #0]
    TsDrv = &stmpe811_ts_drv;
 80049fe:	602c      	str	r4, [r5, #0]
    TsDrv->Init(TS_I2C_ADDRESS);
 8004a00:	2082      	movs	r0, #130	; 0x82
 8004a02:	4798      	blx	r3
    TsDrv->Start(TS_I2C_ADDRESS);
 8004a04:	682b      	ldr	r3, [r5, #0]
 8004a06:	2082      	movs	r0, #130	; 0x82
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	4798      	blx	r3
    ret = TS_OK;
 8004a0c:	2000      	movs	r0, #0
 8004a0e:	bd38      	pop	{r3, r4, r5, pc}
  uint8_t ret = TS_ERROR;
 8004a10:	2001      	movs	r0, #1
  }

  return ret;
}
 8004a12:	bd38      	pop	{r3, r4, r5, pc}
 8004a14:	20000840 	.word	0x20000840
 8004a18:	20000038 	.word	0x20000038
 8004a1c:	20000842 	.word	0x20000842
 8004a20:	2000083c 	.word	0x2000083c

08004a24 <BSP_TS_GetState>:
/**
  * @brief  Returns status and positions of the touch screen.
  * @param  TsState: Pointer to touch screen current state structure
  */
void BSP_TS_GetState(TS_StateTypeDef* TsState)
{
 8004a24:	b573      	push	{r0, r1, r4, r5, r6, lr}
  static uint32_t _x = 0, _y = 0;
  uint16_t xDiff, yDiff , x , y, xr, yr;
  
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004a26:	4d2a      	ldr	r5, [pc, #168]	; (8004ad0 <BSP_TS_GetState+0xac>)
 8004a28:	682b      	ldr	r3, [r5, #0]
{
 8004a2a:	4604      	mov	r4, r0
  TsState->TouchDetected = TsDrv->DetectTouch(TS_I2C_ADDRESS);
 8004a2c:	691b      	ldr	r3, [r3, #16]
 8004a2e:	2082      	movs	r0, #130	; 0x82
 8004a30:	4798      	blx	r3
 8004a32:	b280      	uxth	r0, r0
 8004a34:	8020      	strh	r0, [r4, #0]
  
  if(TsState->TouchDetected)
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d048      	beq.n	8004acc <BSP_TS_GetState+0xa8>
  {
    TsDrv->GetXY(TS_I2C_ADDRESS, &x, &y);
 8004a3a:	682b      	ldr	r3, [r5, #0]
 8004a3c:	f10d 0206 	add.w	r2, sp, #6
 8004a40:	695b      	ldr	r3, [r3, #20]
 8004a42:	a901      	add	r1, sp, #4
 8004a44:	2082      	movs	r0, #130	; 0x82
 8004a46:	4798      	blx	r3
    
    /* Y value first correction */
    y -= 360;  
 8004a48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8004a4c:	f5a3 73b4 	sub.w	r3, r3, #360	; 0x168
    
    /* Y value second correction */
    yr = y / 11;
 8004a50:	b29b      	uxth	r3, r3
 8004a52:	220b      	movs	r2, #11
 8004a54:	fbb3 f3f2 	udiv	r3, r3, r2
    
    /* Return y position value */
    if(yr <= 0)
 8004a58:	b133      	cbz	r3, 8004a68 <BSP_TS_GetState+0x44>
    {
      yr = 0;
    }
    else if (yr > TsYBoundary)
 8004a5a:	4a1e      	ldr	r2, [pc, #120]	; (8004ad4 <BSP_TS_GetState+0xb0>)
 8004a5c:	8812      	ldrh	r2, [r2, #0]
 8004a5e:	4293      	cmp	r3, r2
    {
      yr = TsYBoundary - 1;
 8004a60:	bf84      	itt	hi
 8004a62:	f102 33ff 	addhi.w	r3, r2, #4294967295
 8004a66:	b29b      	uxthhi	r3, r3
    else
    {}
    y = yr;
    
    /* X value first correction */
    if(x <= 3000)
 8004a68:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004a6c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8004a70:	428a      	cmp	r2, r1
    {
      x = 3870 - x;
 8004a72:	bf95      	itete	ls
 8004a74:	f5c2 6271 	rsbls	r2, r2, #3856	; 0xf10
    }
    else
    {
      x = 3800 - x;
 8004a78:	f5c2 626d 	rsbhi	r2, r2, #3792	; 0xed0
      x = 3870 - x;
 8004a7c:	320e      	addls	r2, #14
      x = 3800 - x;
 8004a7e:	3208      	addhi	r2, #8
 8004a80:	f8ad 2004 	strh.w	r2, [sp, #4]
    }
    
    /* X value second correction */  
    xr = x / 15;
 8004a84:	f8bd 0004 	ldrh.w	r0, [sp, #4]
 8004a88:	220f      	movs	r2, #15
 8004a8a:	fbb0 f0f2 	udiv	r0, r0, r2
    
    /* Return X position value */
    if(xr <= 0)
 8004a8e:	b130      	cbz	r0, 8004a9e <BSP_TS_GetState+0x7a>
    {
      xr = 0;
    }
    else if (xr > TsXBoundary)
 8004a90:	4a11      	ldr	r2, [pc, #68]	; (8004ad8 <BSP_TS_GetState+0xb4>)
 8004a92:	8812      	ldrh	r2, [r2, #0]
 8004a94:	4290      	cmp	r0, r2
    {
      xr = TsXBoundary - 1;
 8004a96:	bf84      	itt	hi
 8004a98:	f102 30ff 	addhi.w	r0, r2, #4294967295
 8004a9c:	b280      	uxthhi	r0, r0
    }
    else 
    {}
    
    x = xr;
    xDiff = x > _x? (x - _x): (_x - x);
 8004a9e:	4e0f      	ldr	r6, [pc, #60]	; (8004adc <BSP_TS_GetState+0xb8>)
    yDiff = y > _y? (y - _y): (_y - y); 
 8004aa0:	4d0f      	ldr	r5, [pc, #60]	; (8004ae0 <BSP_TS_GetState+0xbc>)
    xDiff = x > _x? (x - _x): (_x - x);
 8004aa2:	6832      	ldr	r2, [r6, #0]
    yDiff = y > _y? (y - _y): (_y - y); 
 8004aa4:	6829      	ldr	r1, [r5, #0]
    xDiff = x > _x? (x - _x): (_x - x);
 8004aa6:	4290      	cmp	r0, r2
 8004aa8:	bf8c      	ite	hi
 8004aaa:	1a82      	subhi	r2, r0, r2
 8004aac:	1a12      	subls	r2, r2, r0
    yDiff = y > _y? (y - _y): (_y - y); 
 8004aae:	428b      	cmp	r3, r1
 8004ab0:	bf8c      	ite	hi
 8004ab2:	1a59      	subhi	r1, r3, r1
 8004ab4:	1ac9      	subls	r1, r1, r3
    xDiff = x > _x? (x - _x): (_x - x);
 8004ab6:	b292      	uxth	r2, r2
    yDiff = y > _y? (y - _y): (_y - y); 
 8004ab8:	b289      	uxth	r1, r1
    
    if (xDiff + yDiff > 5)
 8004aba:	440a      	add	r2, r1
 8004abc:	2a05      	cmp	r2, #5
    {
      _x = x;
 8004abe:	bfc4      	itt	gt
 8004ac0:	6030      	strgt	r0, [r6, #0]
      _y = y; 
 8004ac2:	602b      	strgt	r3, [r5, #0]
    }
    
    /* Update the X position */
    TsState->X = _x;
 8004ac4:	6833      	ldr	r3, [r6, #0]
 8004ac6:	8063      	strh	r3, [r4, #2]
    
    /* Update the Y position */  
    TsState->Y = _y;
 8004ac8:	682b      	ldr	r3, [r5, #0]
 8004aca:	80a3      	strh	r3, [r4, #4]
  }
}
 8004acc:	b002      	add	sp, #8
 8004ace:	bd70      	pop	{r4, r5, r6, pc}
 8004ad0:	2000083c 	.word	0x2000083c
 8004ad4:	20000842 	.word	0x20000842
 8004ad8:	20000840 	.word	0x20000840
 8004adc:	20000844 	.word	0x20000844
 8004ae0:	20000848 	.word	0x20000848

08004ae4 <arm_dot_prod_f32>:
void arm_dot_prod_f32(
  float32_t * pSrcA,
  float32_t * pSrcB,
  uint32_t blockSize,
  float32_t * result)
{
 8004ae4:	b5f0      	push	{r4, r5, r6, r7, lr}
  float32_t sum = 0.0f;                          /* Temporary result storage */
 8004ae6:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8004b54 <arm_dot_prod_f32+0x70>

#if defined (ARM_MATH_DSP)

/* Run the below code for Cortex-M4 and Cortex-M3 */
  /*loop Unrolling */
  blkCnt = blockSize >> 2U;
 8004aea:	0896      	lsrs	r6, r2, #2
 8004aec:	4605      	mov	r5, r0
 8004aee:	460c      	mov	r4, r1
 8004af0:	4637      	mov	r7, r6
 8004af2:	3510      	adds	r5, #16
 8004af4:	3410      	adds	r4, #16

  /* First part of the processing with loop unrolling.  Compute 4 outputs at a time.
   ** a second loop below computes the remaining 1 to 3 samples. */
  while (blkCnt > 0U)
 8004af6:	b95f      	cbnz	r7, 8004b10 <arm_dot_prod_f32+0x2c>
 8004af8:	0134      	lsls	r4, r6, #4
 8004afa:	4421      	add	r1, r4
    blkCnt--;
  }

  /* If the blockSize is not a multiple of 4, compute any remaining output samples here.
   ** No loop unrolling is used. */
  blkCnt = blockSize % 0x4U;
 8004afc:	f002 0203 	and.w	r2, r2, #3
 8004b00:	4420      	add	r0, r4
 8004b02:	eb01 0282 	add.w	r2, r1, r2, lsl #2
  blkCnt = blockSize;

#endif /* #if defined (ARM_MATH_DSP) */


  while (blkCnt > 0U)
 8004b06:	4291      	cmp	r1, r2
 8004b08:	d11c      	bne.n	8004b44 <arm_dot_prod_f32+0x60>

    /* Decrement the loop counter */
    blkCnt--;
  }
  /* Store the result back in the destination buffer */
  *result = sum;
 8004b0a:	edc3 7a00 	vstr	s15, [r3]
 8004b0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    sum += (*pSrcA++) * (*pSrcB++);
 8004b10:	ed55 6a04 	vldr	s13, [r5, #-16]
 8004b14:	ed14 7a04 	vldr	s14, [r4, #-16]
 8004b18:	eee6 7a87 	vfma.f32	s15, s13, s14
    blkCnt--;
 8004b1c:	3f01      	subs	r7, #1
    sum += (*pSrcA++) * (*pSrcB++);
 8004b1e:	ed55 6a03 	vldr	s13, [r5, #-12]
 8004b22:	ed14 7a03 	vldr	s14, [r4, #-12]
 8004b26:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8004b2a:	ed55 6a02 	vldr	s13, [r5, #-8]
 8004b2e:	ed14 7a02 	vldr	s14, [r4, #-8]
 8004b32:	eee6 7a87 	vfma.f32	s15, s13, s14
    sum += (*pSrcA++) * (*pSrcB++);
 8004b36:	ed55 6a01 	vldr	s13, [r5, #-4]
 8004b3a:	ed14 7a01 	vldr	s14, [r4, #-4]
 8004b3e:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b42:	e7d6      	b.n	8004af2 <arm_dot_prod_f32+0xe>
    sum += (*pSrcA++) * (*pSrcB++);
 8004b44:	ecf0 6a01 	vldmia	r0!, {s13}
 8004b48:	ecb1 7a01 	vldmia	r1!, {s14}
 8004b4c:	eee6 7a87 	vfma.f32	s15, s13, s14
 8004b50:	e7d9      	b.n	8004b06 <arm_dot_prod_f32+0x22>
 8004b52:	bf00      	nop
 8004b54:	00000000 	.word	0x00000000

08004b58 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004b58:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b5a:	4a0e      	ldr	r2, [pc, #56]	; (8004b94 <HAL_InitTick+0x3c>)
 8004b5c:	4b0e      	ldr	r3, [pc, #56]	; (8004b98 <HAL_InitTick+0x40>)
{
 8004b5e:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004b60:	7818      	ldrb	r0, [r3, #0]
 8004b62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8004b66:	fbb3 f3f0 	udiv	r3, r3, r0
 8004b6a:	6810      	ldr	r0, [r2, #0]
 8004b6c:	fbb0 f0f3 	udiv	r0, r0, r3
 8004b70:	f000 f8aa 	bl	8004cc8 <HAL_SYSTICK_Config>
 8004b74:	4604      	mov	r4, r0
 8004b76:	b958      	cbnz	r0, 8004b90 <HAL_InitTick+0x38>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004b78:	2d0f      	cmp	r5, #15
 8004b7a:	d809      	bhi.n	8004b90 <HAL_InitTick+0x38>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	4629      	mov	r1, r5
 8004b80:	f04f 30ff 	mov.w	r0, #4294967295
 8004b84:	f000 f85e 	bl	8004c44 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004b88:	4b04      	ldr	r3, [pc, #16]	; (8004b9c <HAL_InitTick+0x44>)
 8004b8a:	4620      	mov	r0, r4
 8004b8c:	601d      	str	r5, [r3, #0]
 8004b8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004b90:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8004b92:	bd38      	pop	{r3, r4, r5, pc}
 8004b94:	2000060c 	.word	0x2000060c
 8004b98:	20000071 	.word	0x20000071
 8004b9c:	20000074 	.word	0x20000074

08004ba0 <HAL_Init>:
{
 8004ba0:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ba2:	4b0b      	ldr	r3, [pc, #44]	; (8004bd0 <HAL_Init+0x30>)
 8004ba4:	681a      	ldr	r2, [r3, #0]
 8004ba6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004baa:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bac:	681a      	ldr	r2, [r3, #0]
 8004bae:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004bb2:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004bba:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bbc:	2003      	movs	r0, #3
 8004bbe:	f000 f82f 	bl	8004c20 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bc2:	2000      	movs	r0, #0
 8004bc4:	f7ff ffc8 	bl	8004b58 <HAL_InitTick>
  HAL_MspInit();
 8004bc8:	f003 fb40 	bl	800824c <HAL_MspInit>
}
 8004bcc:	2000      	movs	r0, #0
 8004bce:	bd08      	pop	{r3, pc}
 8004bd0:	40023c00 	.word	0x40023c00

08004bd4 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004bd4:	4a03      	ldr	r2, [pc, #12]	; (8004be4 <HAL_IncTick+0x10>)
 8004bd6:	4b04      	ldr	r3, [pc, #16]	; (8004be8 <HAL_IncTick+0x14>)
 8004bd8:	6811      	ldr	r1, [r2, #0]
 8004bda:	781b      	ldrb	r3, [r3, #0]
 8004bdc:	440b      	add	r3, r1
 8004bde:	6013      	str	r3, [r2, #0]
 8004be0:	4770      	bx	lr
 8004be2:	bf00      	nop
 8004be4:	20027c34 	.word	0x20027c34
 8004be8:	20000071 	.word	0x20000071

08004bec <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004bec:	4b01      	ldr	r3, [pc, #4]	; (8004bf4 <HAL_GetTick+0x8>)
 8004bee:	6818      	ldr	r0, [r3, #0]
}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	20027c34 	.word	0x20027c34

08004bf8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004bf8:	b538      	push	{r3, r4, r5, lr}
 8004bfa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004bfc:	f7ff fff6 	bl	8004bec <HAL_GetTick>
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c00:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8004c02:	bf1c      	itt	ne
 8004c04:	4b05      	ldrne	r3, [pc, #20]	; (8004c1c <HAL_Delay+0x24>)
 8004c06:	781b      	ldrbne	r3, [r3, #0]
  uint32_t tickstart = HAL_GetTick();
 8004c08:	4605      	mov	r5, r0
    wait += (uint32_t)(uwTickFreq);
 8004c0a:	bf18      	it	ne
 8004c0c:	18e4      	addne	r4, r4, r3
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c0e:	f7ff ffed 	bl	8004bec <HAL_GetTick>
 8004c12:	1b40      	subs	r0, r0, r5
 8004c14:	4284      	cmp	r4, r0
 8004c16:	d8fa      	bhi.n	8004c0e <HAL_Delay+0x16>
  {
  }
}
 8004c18:	bd38      	pop	{r3, r4, r5, pc}
 8004c1a:	bf00      	nop
 8004c1c:	20000071 	.word	0x20000071

08004c20 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004c20:	4a07      	ldr	r2, [pc, #28]	; (8004c40 <HAL_NVIC_SetPriorityGrouping+0x20>)
 8004c22:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004c24:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8004c28:	041b      	lsls	r3, r3, #16
 8004c2a:	0c1b      	lsrs	r3, r3, #16
 8004c2c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004c30:	0200      	lsls	r0, r0, #8
 8004c32:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004c36:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
  reg_value  =  (reg_value                                   |
 8004c3a:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8004c3c:	60d3      	str	r3, [r2, #12]
 8004c3e:	4770      	bx	lr
 8004c40:	e000ed00 	.word	0xe000ed00

08004c44 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004c44:	4b17      	ldr	r3, [pc, #92]	; (8004ca4 <HAL_NVIC_SetPriority+0x60>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004c46:	b530      	push	{r4, r5, lr}
 8004c48:	68dc      	ldr	r4, [r3, #12]
 8004c4a:	f3c4 2402 	ubfx	r4, r4, #8, #3
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c4e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c52:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c54:	2b04      	cmp	r3, #4
 8004c56:	bf28      	it	cs
 8004c58:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c5a:	2d06      	cmp	r5, #6

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c5c:	f04f 0501 	mov.w	r5, #1
 8004c60:	fa05 f303 	lsl.w	r3, r5, r3
 8004c64:	f103 33ff 	add.w	r3, r3, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c68:	bf8c      	ite	hi
 8004c6a:	3c03      	subhi	r4, #3
 8004c6c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c6e:	4019      	ands	r1, r3
 8004c70:	40a1      	lsls	r1, r4
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c72:	fa05 f404 	lsl.w	r4, r5, r4
 8004c76:	3c01      	subs	r4, #1
 8004c78:	4022      	ands	r2, r4
  if ((int32_t)(IRQn) >= 0)
 8004c7a:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c7c:	ea42 0201 	orr.w	r2, r2, r1
 8004c80:	ea4f 1202 	mov.w	r2, r2, lsl #4
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c84:	bfad      	iteet	ge
 8004c86:	f100 4060 	addge.w	r0, r0, #3758096384	; 0xe0000000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c8a:	f000 000f 	andlt.w	r0, r0, #15
 8004c8e:	4b06      	ldrlt	r3, [pc, #24]	; (8004ca8 <HAL_NVIC_SetPriority+0x64>)
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c90:	f500 4061 	addge.w	r0, r0, #57600	; 0xe100
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c94:	bfb5      	itete	lt
 8004c96:	b2d2      	uxtblt	r2, r2
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c98:	b2d2      	uxtbge	r2, r2
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9a:	541a      	strblt	r2, [r3, r0]
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004c9c:	f880 2300 	strbge.w	r2, [r0, #768]	; 0x300
 8004ca0:	bd30      	pop	{r4, r5, pc}
 8004ca2:	bf00      	nop
 8004ca4:	e000ed00 	.word	0xe000ed00
 8004ca8:	e000ed14 	.word	0xe000ed14

08004cac <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004cac:	2800      	cmp	r0, #0
 8004cae:	db08      	blt.n	8004cc2 <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004cb0:	0942      	lsrs	r2, r0, #5
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	f000 001f 	and.w	r0, r0, #31
 8004cb8:	fa03 f000 	lsl.w	r0, r3, r0
 8004cbc:	4b01      	ldr	r3, [pc, #4]	; (8004cc4 <HAL_NVIC_EnableIRQ+0x18>)
 8004cbe:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8004cc2:	4770      	bx	lr
 8004cc4:	e000e100 	.word	0xe000e100

08004cc8 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004cc8:	3801      	subs	r0, #1
 8004cca:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004cce:	d20a      	bcs.n	8004ce6 <HAL_SYSTICK_Config+0x1e>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cd0:	4b06      	ldr	r3, [pc, #24]	; (8004cec <HAL_SYSTICK_Config+0x24>)
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd2:	4a07      	ldr	r2, [pc, #28]	; (8004cf0 <HAL_SYSTICK_Config+0x28>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004cd4:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004cd6:	21f0      	movs	r1, #240	; 0xf0
 8004cd8:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004cdc:	2000      	movs	r0, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004cde:	2207      	movs	r2, #7
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ce0:	6098      	str	r0, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ce2:	601a      	str	r2, [r3, #0]
 8004ce4:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004ce6:	2001      	movs	r0, #1
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
   return SysTick_Config(TicksNumb);
}
 8004ce8:	4770      	bx	lr
 8004cea:	bf00      	nop
 8004cec:	e000e010 	.word	0xe000e010
 8004cf0:	e000ed00 	.word	0xe000ed00

08004cf4 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8004cf4:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8004cf6:	4604      	mov	r4, r0
 8004cf8:	b160      	cbz	r0, 8004d14 <HAL_CRC_Init+0x20>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8004cfa:	7943      	ldrb	r3, [r0, #5]
 8004cfc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d00:	b913      	cbnz	r3, 8004d08 <HAL_CRC_Init+0x14>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8004d02:	7102      	strb	r2, [r0, #4]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8004d04:	f002 fdec 	bl	80078e0 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8004d08:	2302      	movs	r3, #2
 8004d0a:	7163      	strb	r3, [r4, #5]

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	7163      	strb	r3, [r4, #5]

  /* Return function status */
  return HAL_OK;
 8004d10:	2000      	movs	r0, #0
 8004d12:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8004d14:	2001      	movs	r0, #1
}
 8004d16:	bd10      	pop	{r4, pc}

08004d18 <DMA_CalcBaseAndBitshift>:
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004d18:	6803      	ldr	r3, [r0, #0]
 8004d1a:	b2da      	uxtb	r2, r3
 8004d1c:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004d20:	f023 0303 	bic.w	r3, r3, #3
 8004d24:	2118      	movs	r1, #24
 8004d26:	3a10      	subs	r2, #16
 8004d28:	fbb2 f2f1 	udiv	r2, r2, r1
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d2c:	4904      	ldr	r1, [pc, #16]	; (8004d40 <DMA_CalcBaseAndBitshift+0x28>)
  
  if (stream_number > 3U)
 8004d2e:	2a03      	cmp	r2, #3
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d30:	bf88      	it	hi
 8004d32:	3304      	addhi	r3, #4
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d34:	5c89      	ldrb	r1, [r1, r2]
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d36:	6583      	str	r3, [r0, #88]	; 0x58
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004d38:	65c1      	str	r1, [r0, #92]	; 0x5c
  }
  
  return hdma->StreamBaseAddress;
}
 8004d3a:	6d80      	ldr	r0, [r0, #88]	; 0x58
 8004d3c:	4770      	bx	lr
 8004d3e:	bf00      	nop
 8004d40:	0800aabc 	.word	0x0800aabc

08004d44 <HAL_DMA_Init>:
{
 8004d44:	b570      	push	{r4, r5, r6, lr}
 8004d46:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8004d48:	f7ff ff50 	bl	8004bec <HAL_GetTick>
 8004d4c:	4605      	mov	r5, r0
  if(hdma == NULL)
 8004d4e:	2c00      	cmp	r4, #0
 8004d50:	d071      	beq.n	8004e36 <HAL_DMA_Init+0xf2>
  __HAL_UNLOCK(hdma);
 8004d52:	2300      	movs	r3, #0
 8004d54:	f884 3034 	strb.w	r3, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004d58:	6822      	ldr	r2, [r4, #0]
  hdma->State = HAL_DMA_STATE_BUSY;
 8004d5a:	2302      	movs	r3, #2
 8004d5c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  __HAL_DMA_DISABLE(hdma);
 8004d60:	6813      	ldr	r3, [r2, #0]
 8004d62:	f023 0301 	bic.w	r3, r3, #1
 8004d66:	6013      	str	r3, [r2, #0]
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004d68:	6821      	ldr	r1, [r4, #0]
 8004d6a:	680b      	ldr	r3, [r1, #0]
 8004d6c:	07d8      	lsls	r0, r3, #31
 8004d6e:	d43c      	bmi.n	8004dea <HAL_DMA_Init+0xa6>
  tmp = hdma->Instance->CR;
 8004d70:	680b      	ldr	r3, [r1, #0]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d72:	4d32      	ldr	r5, [pc, #200]	; (8004e3c <HAL_DMA_Init+0xf8>)
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d74:	6862      	ldr	r2, [r4, #4]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d76:	69a0      	ldr	r0, [r4, #24]
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004d78:	401d      	ands	r5, r3
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d7a:	68a3      	ldr	r3, [r4, #8]
 8004d7c:	4313      	orrs	r3, r2
 8004d7e:	68e2      	ldr	r2, [r4, #12]
 8004d80:	4313      	orrs	r3, r2
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004d82:	6922      	ldr	r2, [r4, #16]
 8004d84:	4313      	orrs	r3, r2
 8004d86:	6962      	ldr	r2, [r4, #20]
 8004d88:	4313      	orrs	r3, r2
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004d8a:	69e2      	ldr	r2, [r4, #28]
 8004d8c:	4303      	orrs	r3, r0
 8004d8e:	4313      	orrs	r3, r2
          hdma->Init.Mode                | hdma->Init.Priority;
 8004d90:	6a22      	ldr	r2, [r4, #32]
 8004d92:	4313      	orrs	r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004d94:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004d96:	2a04      	cmp	r2, #4
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004d98:	ea43 0305 	orr.w	r3, r3, r5
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004d9c:	bf01      	itttt	eq
 8004d9e:	6b26      	ldreq	r6, [r4, #48]	; 0x30
 8004da0:	6ae5      	ldreq	r5, [r4, #44]	; 0x2c
 8004da2:	4335      	orreq	r5, r6
 8004da4:	432b      	orreq	r3, r5
  hdma->Instance->CR = tmp;  
 8004da6:	600b      	str	r3, [r1, #0]
  tmp = hdma->Instance->FCR;
 8004da8:	694b      	ldr	r3, [r1, #20]
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004daa:	2a04      	cmp	r2, #4
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004dac:	f023 0307 	bic.w	r3, r3, #7
  tmp |= hdma->Init.FIFOMode;
 8004db0:	ea43 0302 	orr.w	r3, r3, r2
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004db4:	d10b      	bne.n	8004dce <HAL_DMA_Init+0x8a>
    tmp |= hdma->Init.FIFOThreshold;
 8004db6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004db8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    tmp |= hdma->Init.FIFOThreshold;
 8004dba:	4313      	orrs	r3, r2
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004dbc:	b13d      	cbz	r5, 8004dce <HAL_DMA_Init+0x8a>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004dbe:	b9f8      	cbnz	r0, 8004e00 <HAL_DMA_Init+0xbc>
  {
    switch (tmp)
 8004dc0:	2a01      	cmp	r2, #1
 8004dc2:	d02d      	beq.n	8004e20 <HAL_DMA_Init+0xdc>
 8004dc4:	d301      	bcc.n	8004dca <HAL_DMA_Init+0x86>
 8004dc6:	2a02      	cmp	r2, #2
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004dc8:	d101      	bne.n	8004dce <HAL_DMA_Init+0x8a>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dca:	01ea      	lsls	r2, r5, #7
 8004dcc:	d42b      	bmi.n	8004e26 <HAL_DMA_Init+0xe2>
  hdma->Instance->FCR = tmp;
 8004dce:	614b      	str	r3, [r1, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004dd0:	4620      	mov	r0, r4
 8004dd2:	f7ff ffa1 	bl	8004d18 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004dd6:	6de2      	ldr	r2, [r4, #92]	; 0x5c
 8004dd8:	233f      	movs	r3, #63	; 0x3f
 8004dda:	4093      	lsls	r3, r2
 8004ddc:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004dde:	2000      	movs	r0, #0
  hdma->State = HAL_DMA_STATE_READY;
 8004de0:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004de2:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004de4:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
  return HAL_OK;
 8004de8:	bd70      	pop	{r4, r5, r6, pc}
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004dea:	f7ff feff 	bl	8004bec <HAL_GetTick>
 8004dee:	1b40      	subs	r0, r0, r5
 8004df0:	2805      	cmp	r0, #5
 8004df2:	d9b9      	bls.n	8004d68 <HAL_DMA_Init+0x24>
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004df4:	2320      	movs	r3, #32
 8004df6:	6563      	str	r3, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004df8:	2003      	movs	r0, #3
        hdma->State = HAL_DMA_STATE_READY;
 8004dfa:	f884 0035 	strb.w	r0, [r4, #53]	; 0x35
}
 8004dfe:	bd70      	pop	{r4, r5, r6, pc}
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004e00:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004e04:	d113      	bne.n	8004e2e <HAL_DMA_Init+0xea>
    switch (tmp)
 8004e06:	2a03      	cmp	r2, #3
 8004e08:	d8e1      	bhi.n	8004dce <HAL_DMA_Init+0x8a>
 8004e0a:	a001      	add	r0, pc, #4	; (adr r0, 8004e10 <HAL_DMA_Init+0xcc>)
 8004e0c:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004e10:	08004e27 	.word	0x08004e27
 8004e14:	08004dcb 	.word	0x08004dcb
 8004e18:	08004e27 	.word	0x08004e27
 8004e1c:	08004e21 	.word	0x08004e21
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004e20:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004e24:	d1d3      	bne.n	8004dce <HAL_DMA_Init+0x8a>
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004e26:	2340      	movs	r3, #64	; 0x40
 8004e28:	6563      	str	r3, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004e2a:	2001      	movs	r0, #1
 8004e2c:	e7e5      	b.n	8004dfa <HAL_DMA_Init+0xb6>
    switch (tmp)
 8004e2e:	2a02      	cmp	r2, #2
 8004e30:	d9f9      	bls.n	8004e26 <HAL_DMA_Init+0xe2>
 8004e32:	2a03      	cmp	r2, #3
 8004e34:	e7c8      	b.n	8004dc8 <HAL_DMA_Init+0x84>
    return HAL_ERROR;
 8004e36:	2001      	movs	r0, #1
 8004e38:	bd70      	pop	{r4, r5, r6, pc}
 8004e3a:	bf00      	nop
 8004e3c:	f010803f 	.word	0xf010803f

08004e40 <HAL_DMA_DeInit>:
{
 8004e40:	b538      	push	{r3, r4, r5, lr}
  if(hdma == NULL)
 8004e42:	4605      	mov	r5, r0
 8004e44:	b320      	cbz	r0, 8004e90 <HAL_DMA_DeInit+0x50>
  if(hdma->State == HAL_DMA_STATE_BUSY)
 8004e46:	f890 4035 	ldrb.w	r4, [r0, #53]	; 0x35
 8004e4a:	b2e4      	uxtb	r4, r4
 8004e4c:	2c02      	cmp	r4, #2
 8004e4e:	d01d      	beq.n	8004e8c <HAL_DMA_DeInit+0x4c>
  __HAL_DMA_DISABLE(hdma);
 8004e50:	6803      	ldr	r3, [r0, #0]
 8004e52:	681a      	ldr	r2, [r3, #0]
 8004e54:	f022 0201 	bic.w	r2, r2, #1
  hdma->Instance->CR   = 0U;
 8004e58:	2400      	movs	r4, #0
  __HAL_DMA_DISABLE(hdma);
 8004e5a:	601a      	str	r2, [r3, #0]
  hdma->Instance->FCR  = 0x00000021U;
 8004e5c:	2221      	movs	r2, #33	; 0x21
  hdma->Instance->CR   = 0U;
 8004e5e:	601c      	str	r4, [r3, #0]
  hdma->Instance->NDTR = 0U;
 8004e60:	605c      	str	r4, [r3, #4]
  hdma->Instance->PAR  = 0U;
 8004e62:	609c      	str	r4, [r3, #8]
  hdma->Instance->M0AR = 0U;
 8004e64:	60dc      	str	r4, [r3, #12]
  hdma->Instance->M1AR = 0U;
 8004e66:	611c      	str	r4, [r3, #16]
  hdma->Instance->FCR  = 0x00000021U;
 8004e68:	615a      	str	r2, [r3, #20]
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004e6a:	f7ff ff55 	bl	8004d18 <DMA_CalcBaseAndBitshift>
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e6e:	6dea      	ldr	r2, [r5, #92]	; 0x5c
  hdma->XferCpltCallback = NULL;
 8004e70:	63ec      	str	r4, [r5, #60]	; 0x3c
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e72:	233f      	movs	r3, #63	; 0x3f
 8004e74:	4093      	lsls	r3, r2
  hdma->XferHalfCpltCallback = NULL;
 8004e76:	642c      	str	r4, [r5, #64]	; 0x40
  hdma->XferM1CpltCallback = NULL;
 8004e78:	646c      	str	r4, [r5, #68]	; 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8004e7a:	64ac      	str	r4, [r5, #72]	; 0x48
  hdma->XferErrorCallback = NULL;
 8004e7c:	64ec      	str	r4, [r5, #76]	; 0x4c
  hdma->XferAbortCallback = NULL;
 8004e7e:	652c      	str	r4, [r5, #80]	; 0x50
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004e80:	6083      	str	r3, [r0, #8]
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004e82:	656c      	str	r4, [r5, #84]	; 0x54
  __HAL_UNLOCK(hdma);
 8004e84:	f885 4034 	strb.w	r4, [r5, #52]	; 0x34
  hdma->State = HAL_DMA_STATE_RESET;
 8004e88:	f885 4035 	strb.w	r4, [r5, #53]	; 0x35
    return HAL_BUSY;
 8004e8c:	4620      	mov	r0, r4
}
 8004e8e:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004e90:	2001      	movs	r0, #1
 8004e92:	bd38      	pop	{r3, r4, r5, pc}

08004e94 <DMA2D_SetConfig>:
  * @param  Width      The width of data to be transferred from source to destination.
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width, uint32_t Height)
{
 8004e94:	b570      	push	{r4, r5, r6, lr}
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL|DMA2D_NLR_PL), (Height| (Width << DMA2D_NLR_PL_Pos)));
 8004e96:	6804      	ldr	r4, [r0, #0]
 8004e98:	9d04      	ldr	r5, [sp, #16]
 8004e9a:	6c66      	ldr	r6, [r4, #68]	; 0x44
 8004e9c:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8004ea0:	f006 4640 	and.w	r6, r6, #3221225472	; 0xc0000000
 8004ea4:	4333      	orrs	r3, r6
 8004ea6:	6463      	str	r3, [r4, #68]	; 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004ea8:	6843      	ldr	r3, [r0, #4]
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 8004eaa:	63e2      	str	r2, [r4, #60]	; 0x3c
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8004eac:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8004eb0:	d130      	bne.n	8004f14 <DMA2D_SetConfig+0x80>
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 8004eb2:	6886      	ldr	r6, [r0, #8]
 8004eb4:	b11e      	cbz	r6, 8004ebe <DMA2D_SetConfig+0x2a>
    {
      tmp = (tmp3 | tmp2 | tmp1| tmp4);
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8004eb6:	2e01      	cmp	r6, #1
 8004eb8:	d103      	bne.n	8004ec2 <DMA2D_SetConfig+0x2e>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 8004eba:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
      tmp3 = (tmp3 >> 12U);
      tmp4 = (tmp4 >> 4U );
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 8004ebe:	63a1      	str	r1, [r4, #56]	; 0x38
 8004ec0:	bd70      	pop	{r4, r5, r6, pc}
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004ec2:	2e02      	cmp	r6, #2
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8004ec4:	f401 037f 	and.w	r3, r1, #16711680	; 0xff0000
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 8004ec8:	f401 457f 	and.w	r5, r1, #65280	; 0xff00
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8004ecc:	b2c8      	uxtb	r0, r1
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 8004ece:	d107      	bne.n	8004ee0 <DMA2D_SetConfig+0x4c>
      tmp2 = (tmp2 >> 19U);
 8004ed0:	0cd9      	lsrs	r1, r3, #19
      tmp3 = (tmp3 >> 10U);
 8004ed2:	0aad      	lsrs	r5, r5, #10
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 8004ed4:	02c9      	lsls	r1, r1, #11
 8004ed6:	ea41 1145 	orr.w	r1, r1, r5, lsl #5
 8004eda:	ea41 01d0 	orr.w	r1, r1, r0, lsr #3
 8004ede:	e7ee      	b.n	8004ebe <DMA2D_SetConfig+0x2a>
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004ee0:	2e03      	cmp	r6, #3
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 8004ee2:	f001 427f 	and.w	r2, r1, #4278190080	; 0xff000000
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 8004ee6:	d10a      	bne.n	8004efe <DMA2D_SetConfig+0x6a>
      tmp2 = (tmp2 >> 19U);
 8004ee8:	0cdb      	lsrs	r3, r3, #19
      tmp3 = (tmp3 >> 11U);
 8004eea:	0aed      	lsrs	r5, r5, #11
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004eec:	029b      	lsls	r3, r3, #10
 8004eee:	ea43 1345 	orr.w	r3, r3, r5, lsl #5
 8004ef2:	ea43 03d0 	orr.w	r3, r3, r0, lsr #3
      tmp1 = (tmp1 >> 31U);
 8004ef6:	0fd1      	lsrs	r1, r2, #31
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 8004ef8:	ea43 31c1 	orr.w	r1, r3, r1, lsl #15
 8004efc:	e7df      	b.n	8004ebe <DMA2D_SetConfig+0x2a>
      tmp2 = (tmp2 >> 20U);
 8004efe:	0d19      	lsrs	r1, r3, #20
      tmp3 = (tmp3 >> 12U);
 8004f00:	0b2d      	lsrs	r5, r5, #12
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004f02:	0209      	lsls	r1, r1, #8
 8004f04:	ea41 1105 	orr.w	r1, r1, r5, lsl #4
 8004f08:	ea41 1110 	orr.w	r1, r1, r0, lsr #4
      tmp1 = (tmp1 >> 28U);
 8004f0c:	0f13      	lsrs	r3, r2, #28
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8004f0e:	ea41 3103 	orr.w	r1, r1, r3, lsl #12
 8004f12:	e7d4      	b.n	8004ebe <DMA2D_SetConfig+0x2a>
  }
  else /* M2M, M2M_PFC or M2M_Blending DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 8004f14:	60e1      	str	r1, [r4, #12]
 8004f16:	bd70      	pop	{r4, r5, r6, pc}

08004f18 <HAL_DMA2D_Init>:
{
 8004f18:	b510      	push	{r4, lr}
  if(hdma2d == NULL)
 8004f1a:	4604      	mov	r4, r0
 8004f1c:	b330      	cbz	r0, 8004f6c <HAL_DMA2D_Init+0x54>
  if(hdma2d->State == HAL_DMA2D_STATE_RESET)
 8004f1e:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 8004f22:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004f26:	b91b      	cbnz	r3, 8004f30 <HAL_DMA2D_Init+0x18>
    hdma2d->Lock = HAL_UNLOCKED;
 8004f28:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_DMA2D_MspInit(hdma2d);
 8004f2c:	f002 fd10 	bl	8007950 <HAL_DMA2D_MspInit>
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f30:	6822      	ldr	r2, [r4, #0]
 8004f32:	6861      	ldr	r1, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f34:	2302      	movs	r3, #2
 8004f36:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE, hdma2d->Init.Mode);
 8004f3a:	6813      	ldr	r3, [r2, #0]
 8004f3c:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 8004f40:	430b      	orrs	r3, r1
 8004f42:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM, hdma2d->Init.ColorMode);
 8004f44:	6b53      	ldr	r3, [r2, #52]	; 0x34
 8004f46:	68a1      	ldr	r1, [r4, #8]
 8004f48:	f023 0307 	bic.w	r3, r3, #7
 8004f4c:	430b      	orrs	r3, r1
 8004f4e:	6353      	str	r3, [r2, #52]	; 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8004f50:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004f52:	68e1      	ldr	r1, [r4, #12]
 8004f54:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8004f58:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8004f5c:	430b      	orrs	r3, r1
 8004f5e:	6413      	str	r3, [r2, #64]	; 0x40
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f60:	2000      	movs	r0, #0
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f62:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8004f64:	63e0      	str	r0, [r4, #60]	; 0x3c
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8004f66:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  return HAL_OK;
 8004f6a:	bd10      	pop	{r4, pc}
     return HAL_ERROR;
 8004f6c:	2001      	movs	r0, #1
}
 8004f6e:	bd10      	pop	{r4, pc}

08004f70 <HAL_DMA2D_Start>:
{
 8004f70:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __HAL_LOCK(hdma2d);
 8004f72:	f890 4038 	ldrb.w	r4, [r0, #56]	; 0x38
 8004f76:	2c01      	cmp	r4, #1
{
 8004f78:	4605      	mov	r5, r0
 8004f7a:	f04f 0402 	mov.w	r4, #2
  __HAL_LOCK(hdma2d);
 8004f7e:	d00f      	beq.n	8004fa0 <HAL_DMA2D_Start+0x30>
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8004f80:	f880 4039 	strb.w	r4, [r0, #57]	; 0x39
  __HAL_LOCK(hdma2d);
 8004f84:	2601      	movs	r6, #1
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004f86:	9c06      	ldr	r4, [sp, #24]
  __HAL_LOCK(hdma2d);
 8004f88:	f880 6038 	strb.w	r6, [r0, #56]	; 0x38
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8004f8c:	9400      	str	r4, [sp, #0]
 8004f8e:	f7ff ff81 	bl	8004e94 <DMA2D_SetConfig>
  __HAL_DMA2D_ENABLE(hdma2d);
 8004f92:	682a      	ldr	r2, [r5, #0]
 8004f94:	6813      	ldr	r3, [r2, #0]
 8004f96:	4333      	orrs	r3, r6
 8004f98:	6013      	str	r3, [r2, #0]
  return HAL_OK;
 8004f9a:	2000      	movs	r0, #0
}
 8004f9c:	b002      	add	sp, #8
 8004f9e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(hdma2d);
 8004fa0:	4620      	mov	r0, r4
 8004fa2:	e7fb      	b.n	8004f9c <HAL_DMA2D_Start+0x2c>

08004fa4 <HAL_DMA2D_PollForTransfer>:
{
 8004fa4:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t isrflags = 0x0U;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	9301      	str	r3, [sp, #4]
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004faa:	6803      	ldr	r3, [r0, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	07db      	lsls	r3, r3, #31
{
 8004fb0:	4604      	mov	r4, r0
 8004fb2:	460d      	mov	r5, r1
  if((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8004fb4:	d417      	bmi.n	8004fe6 <HAL_DMA2D_PollForTransfer+0x42>
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8004fb6:	6822      	ldr	r2, [r4, #0]
 8004fb8:	69d3      	ldr	r3, [r2, #28]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8004fba:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004fbc:	4313      	orrs	r3, r2
  if (layer_start != 0U)
 8004fbe:	069e      	lsls	r6, r3, #26
 8004fc0:	d506      	bpl.n	8004fd0 <HAL_DMA2D_PollForTransfer+0x2c>
    tickstart = HAL_GetTick();
 8004fc2:	f7ff fe13 	bl	8004bec <HAL_GetTick>
 8004fc6:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8004fc8:	6823      	ldr	r3, [r4, #0]
 8004fca:	685a      	ldr	r2, [r3, #4]
 8004fcc:	06d2      	lsls	r2, r2, #27
 8004fce:	d543      	bpl.n	8005058 <HAL_DMA2D_PollForTransfer+0xb4>
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC|DMA2D_FLAG_CTC);
 8004fd0:	6823      	ldr	r3, [r4, #0]
 8004fd2:	2212      	movs	r2, #18
 8004fd4:	609a      	str	r2, [r3, #8]
  __HAL_UNLOCK(hdma2d);
 8004fd6:	2000      	movs	r0, #0
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8004fde:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
}
 8004fe2:	b002      	add	sp, #8
 8004fe4:	bd70      	pop	{r4, r5, r6, pc}
   tickstart = HAL_GetTick();
 8004fe6:	f7ff fe01 	bl	8004bec <HAL_GetTick>
 8004fea:	4606      	mov	r6, r0
    while(__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8004fec:	6823      	ldr	r3, [r4, #0]
 8004fee:	685a      	ldr	r2, [r3, #4]
 8004ff0:	0792      	lsls	r2, r2, #30
 8004ff2:	d4e0      	bmi.n	8004fb6 <HAL_DMA2D_PollForTransfer+0x12>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8004ff4:	685a      	ldr	r2, [r3, #4]
 8004ff6:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 8004ff8:	9a01      	ldr	r2, [sp, #4]
 8004ffa:	f012 0f21 	tst.w	r2, #33	; 0x21
 8004ffe:	d017      	beq.n	8005030 <HAL_DMA2D_PollForTransfer+0x8c>
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005000:	9a01      	ldr	r2, [sp, #4]
 8005002:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005004:	bf42      	ittt	mi
 8005006:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8005008:	f042 0202 	orrmi.w	r2, r2, #2
 800500c:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800500e:	9a01      	ldr	r2, [sp, #4]
 8005010:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005012:	bf42      	ittt	mi
 8005014:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8005016:	f042 0201 	orrmi.w	r2, r2, #1
 800501a:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800501c:	2221      	movs	r2, #33	; 0x21
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800501e:	609a      	str	r2, [r3, #8]
        hdma2d->State= HAL_DMA2D_STATE_ERROR;
 8005020:	2304      	movs	r3, #4
 8005022:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        __HAL_UNLOCK(hdma2d);
 8005026:	2300      	movs	r3, #0
 8005028:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
        return HAL_ERROR;
 800502c:	2001      	movs	r0, #1
 800502e:	e7d8      	b.n	8004fe2 <HAL_DMA2D_PollForTransfer+0x3e>
      if(Timeout != HAL_MAX_DELAY)
 8005030:	1c69      	adds	r1, r5, #1
 8005032:	d0dc      	beq.n	8004fee <HAL_DMA2D_PollForTransfer+0x4a>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005034:	f7ff fdda 	bl	8004bec <HAL_GetTick>
 8005038:	1b80      	subs	r0, r0, r6
 800503a:	4285      	cmp	r5, r0
 800503c:	d301      	bcc.n	8005042 <HAL_DMA2D_PollForTransfer+0x9e>
 800503e:	2d00      	cmp	r5, #0
 8005040:	d1d4      	bne.n	8004fec <HAL_DMA2D_PollForTransfer+0x48>
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8005042:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8005044:	f043 0320 	orr.w	r3, r3, #32
 8005048:	63e3      	str	r3, [r4, #60]	; 0x3c
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800504a:	2003      	movs	r0, #3
          __HAL_UNLOCK(hdma2d);
 800504c:	2300      	movs	r3, #0
          hdma2d->State= HAL_DMA2D_STATE_TIMEOUT;
 800504e:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
          __HAL_UNLOCK(hdma2d);
 8005052:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
          return HAL_TIMEOUT;
 8005056:	e7c4      	b.n	8004fe2 <HAL_DMA2D_PollForTransfer+0x3e>
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8005058:	685a      	ldr	r2, [r3, #4]
 800505a:	9201      	str	r2, [sp, #4]
      if ((isrflags & (DMA2D_FLAG_CAE|DMA2D_FLAG_CE|DMA2D_FLAG_TE)) != 0U)
 800505c:	9a01      	ldr	r2, [sp, #4]
 800505e:	f012 0f29 	tst.w	r2, #41	; 0x29
 8005062:	d016      	beq.n	8005092 <HAL_DMA2D_PollForTransfer+0xee>
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005064:	9a01      	ldr	r2, [sp, #4]
 8005066:	0716      	lsls	r6, r2, #28
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8005068:	bf42      	ittt	mi
 800506a:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800506c:	f042 0204 	orrmi.w	r2, r2, #4
 8005070:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8005072:	9a01      	ldr	r2, [sp, #4]
 8005074:	0695      	lsls	r5, r2, #26
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8005076:	bf42      	ittt	mi
 8005078:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 800507a:	f042 0202 	orrmi.w	r2, r2, #2
 800507e:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8005080:	9a01      	ldr	r2, [sp, #4]
 8005082:	07d0      	lsls	r0, r2, #31
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8005084:	bf42      	ittt	mi
 8005086:	6be2      	ldrmi	r2, [r4, #60]	; 0x3c
 8005088:	f042 0201 	orrmi.w	r2, r2, #1
 800508c:	63e2      	strmi	r2, [r4, #60]	; 0x3c
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800508e:	2229      	movs	r2, #41	; 0x29
 8005090:	e7c5      	b.n	800501e <HAL_DMA2D_PollForTransfer+0x7a>
      if(Timeout != HAL_MAX_DELAY)
 8005092:	1c69      	adds	r1, r5, #1
 8005094:	d099      	beq.n	8004fca <HAL_DMA2D_PollForTransfer+0x26>
        if(((HAL_GetTick() - tickstart ) > Timeout)||(Timeout == 0U))
 8005096:	f7ff fda9 	bl	8004bec <HAL_GetTick>
 800509a:	1b80      	subs	r0, r0, r6
 800509c:	4285      	cmp	r5, r0
 800509e:	d3d0      	bcc.n	8005042 <HAL_DMA2D_PollForTransfer+0x9e>
 80050a0:	2d00      	cmp	r5, #0
 80050a2:	d191      	bne.n	8004fc8 <HAL_DMA2D_PollForTransfer+0x24>
 80050a4:	e7cd      	b.n	8005042 <HAL_DMA2D_PollForTransfer+0x9e>

080050a6 <HAL_DMA2D_LineEventCallback>:
 80050a6:	4770      	bx	lr

080050a8 <HAL_DMA2D_CLUTLoadingCpltCallback>:
{
 80050a8:	4770      	bx	lr

080050aa <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80050aa:	6803      	ldr	r3, [r0, #0]
{
 80050ac:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80050ae:	685e      	ldr	r6, [r3, #4]
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80050b0:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80050b2:	07f2      	lsls	r2, r6, #31
{
 80050b4:	4604      	mov	r4, r0
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80050b6:	d514      	bpl.n	80050e2 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 80050b8:	05e9      	lsls	r1, r5, #23
 80050ba:	d512      	bpl.n	80050e2 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 80050bc:	681a      	ldr	r2, [r3, #0]
 80050be:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050c2:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 80050c4:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 80050c6:	f042 0201 	orr.w	r2, r2, #1
 80050ca:	63c2      	str	r2, [r0, #60]	; 0x3c
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 80050cc:	2201      	movs	r2, #1
 80050ce:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 80050d0:	2304      	movs	r3, #4
 80050d2:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80050d6:	2300      	movs	r3, #0
 80050d8:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 80050dc:	6943      	ldr	r3, [r0, #20]
 80050de:	b103      	cbz	r3, 80050e2 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 80050e0:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 80050e2:	06b2      	lsls	r2, r6, #26
 80050e4:	d516      	bpl.n	8005114 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 80050e6:	04ab      	lsls	r3, r5, #18
 80050e8:	d514      	bpl.n	8005114 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 80050ea:	6823      	ldr	r3, [r4, #0]
 80050ec:	681a      	ldr	r2, [r3, #0]
 80050ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80050f2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 80050f4:	2220      	movs	r2, #32
 80050f6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 80050f8:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80050fa:	f043 0302 	orr.w	r3, r3, #2
 80050fe:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005100:	2304      	movs	r3, #4
 8005102:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005106:	2300      	movs	r3, #0
 8005108:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800510c:	6963      	ldr	r3, [r4, #20]
 800510e:	b10b      	cbz	r3, 8005114 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8005110:	4620      	mov	r0, r4
 8005112:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8005114:	0730      	lsls	r0, r6, #28
 8005116:	d516      	bpl.n	8005146 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8005118:	0529      	lsls	r1, r5, #20
 800511a:	d514      	bpl.n	8005146 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 800511c:	6823      	ldr	r3, [r4, #0]
 800511e:	681a      	ldr	r2, [r3, #0]
 8005120:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005124:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8005126:	2208      	movs	r2, #8
 8005128:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800512a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800512c:	f043 0304 	orr.w	r3, r3, #4
 8005130:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8005132:	2304      	movs	r3, #4
 8005134:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005138:	2300      	movs	r3, #0
 800513a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferErrorCallback != NULL)
 800513e:	6963      	ldr	r3, [r4, #20]
 8005140:	b10b      	cbz	r3, 8005146 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8005142:	4620      	mov	r0, r4
 8005144:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8005146:	0772      	lsls	r2, r6, #29
 8005148:	d50b      	bpl.n	8005162 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 800514a:	056b      	lsls	r3, r5, #21
 800514c:	d509      	bpl.n	8005162 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 800514e:	6823      	ldr	r3, [r4, #0]
 8005150:	681a      	ldr	r2, [r3, #0]
 8005152:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005156:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8005158:	2204      	movs	r2, #4
 800515a:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 800515c:	4620      	mov	r0, r4
 800515e:	f7ff ffa2 	bl	80050a6 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8005162:	07b0      	lsls	r0, r6, #30
 8005164:	d514      	bpl.n	8005190 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8005166:	05a9      	lsls	r1, r5, #22
 8005168:	d512      	bpl.n	8005190 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 800516a:	6823      	ldr	r3, [r4, #0]
 800516c:	681a      	ldr	r2, [r3, #0]
 800516e:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8005172:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8005174:	2202      	movs	r2, #2
 8005176:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8005178:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 800517a:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 800517c:	2301      	movs	r3, #1
 800517e:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 8005182:	2300      	movs	r3, #0
 8005184:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      if(hdma2d->XferCpltCallback != NULL)
 8005188:	6923      	ldr	r3, [r4, #16]
 800518a:	b10b      	cbz	r3, 8005190 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 800518c:	4620      	mov	r0, r4
 800518e:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8005190:	06f2      	lsls	r2, r6, #27
 8005192:	d513      	bpl.n	80051bc <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8005194:	04eb      	lsls	r3, r5, #19
 8005196:	d511      	bpl.n	80051bc <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8005198:	6823      	ldr	r3, [r4, #0]
 800519a:	681a      	ldr	r2, [r3, #0]
 800519c:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80051a0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 80051a2:	2210      	movs	r2, #16
 80051a4:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 80051a6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 80051a8:	63e3      	str	r3, [r4, #60]	; 0x3c
      hdma2d->State = HAL_DMA2D_STATE_READY;
 80051aa:	2301      	movs	r3, #1
 80051ac:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
      __HAL_UNLOCK(hdma2d);
 80051b0:	2300      	movs	r3, #0
 80051b2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 80051b6:	4620      	mov	r0, r4
 80051b8:	f7ff ff76 	bl	80050a8 <HAL_DMA2D_CLUTLoadingCpltCallback>
 80051bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080051c0 <HAL_DMA2D_ConfigLayer>:
  __HAL_LOCK(hdma2d);
 80051c0:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 80051c4:	2b01      	cmp	r3, #1
{
 80051c6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051c8:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hdma2d);
 80051cc:	d036      	beq.n	800523c <HAL_DMA2D_ConfigLayer+0x7c>
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80051ce:	010e      	lsls	r6, r1, #4
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80051d0:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80051d4:	1983      	adds	r3, r0, r6
  __HAL_LOCK(hdma2d);
 80051d6:	2201      	movs	r2, #1
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80051d8:	69dd      	ldr	r5, [r3, #28]
  __HAL_LOCK(hdma2d);
 80051da:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos);
 80051de:	6a1a      	ldr	r2, [r3, #32]
 80051e0:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 80051e2:	4f1b      	ldr	r7, [pc, #108]	; (8005250 <HAL_DMA2D_ConfigLayer+0x90>)
 80051e4:	6803      	ldr	r3, [r0, #0]
 80051e6:	ea45 4202 	orr.w	r2, r5, r2, lsl #16
  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80051ea:	3d09      	subs	r5, #9
 80051ec:	2d01      	cmp	r5, #1
 80051ee:	d80f      	bhi.n	8005210 <HAL_DMA2D_ConfigLayer+0x50>
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 80051f0:	f004 4e7f 	and.w	lr, r4, #4278190080	; 0xff000000
 80051f4:	ea4e 0202 	orr.w	r2, lr, r2
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 80051f8:	b969      	cbnz	r1, 8005216 <HAL_DMA2D_ConfigLayer+0x56>
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 80051fa:	6a59      	ldr	r1, [r3, #36]	; 0x24
 80051fc:	4039      	ands	r1, r7
 80051fe:	430a      	orrs	r2, r1
 8005200:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005202:	6982      	ldr	r2, [r0, #24]
 8005204:	619a      	str	r2, [r3, #24]
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE|DMA2D_BGCOLR_GREEN|DMA2D_BGCOLR_RED));
 8005206:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8005208:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
 800520c:	629a      	str	r2, [r3, #40]	; 0x28
 800520e:	e00f      	b.n	8005230 <HAL_DMA2D_ConfigLayer+0x70>
    regValue |=  (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8005210:	ea42 6204 	orr.w	r2, r2, r4, lsl #24
  if(LayerIdx == DMA2D_BACKGROUND_LAYER)
 8005214:	b1a1      	cbz	r1, 8005240 <HAL_DMA2D_ConfigLayer+0x80>
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005216:	69d9      	ldr	r1, [r3, #28]
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005218:	4406      	add	r6, r0
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800521a:	4039      	ands	r1, r7
 800521c:	430a      	orrs	r2, r1
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800521e:	2d01      	cmp	r5, #1
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 8005220:	61da      	str	r2, [r3, #28]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 8005222:	bf98      	it	ls
 8005224:	f024 447f 	bicls.w	r4, r4, #4278190080	; 0xff000000
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 8005228:	69b2      	ldr	r2, [r6, #24]
 800522a:	611a      	str	r2, [r3, #16]
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE|DMA2D_FGCOLR_GREEN|DMA2D_FGCOLR_RED));
 800522c:	bf98      	it	ls
 800522e:	621c      	strls	r4, [r3, #32]
  hdma2d->State = HAL_DMA2D_STATE_READY;
 8005230:	2301      	movs	r3, #1
 8005232:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
  __HAL_UNLOCK(hdma2d);
 8005236:	2300      	movs	r3, #0
 8005238:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
  __HAL_LOCK(hdma2d);
 800523c:	4618      	mov	r0, r3
 800523e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8005240:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8005242:	4039      	ands	r1, r7
 8005244:	430a      	orrs	r2, r1
 8005246:	625a      	str	r2, [r3, #36]	; 0x24
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 8005248:	6982      	ldr	r2, [r0, #24]
 800524a:	619a      	str	r2, [r3, #24]
 800524c:	e7f0      	b.n	8005230 <HAL_DMA2D_ConfigLayer+0x70>
 800524e:	bf00      	nop
 8005250:	00fcfff0 	.word	0x00fcfff0

08005254 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005254:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005258:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800525a:	680b      	ldr	r3, [r1, #0]
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800525c:	f8df 81c4 	ldr.w	r8, [pc, #452]	; 8005424 <HAL_GPIO_Init+0x1d0>
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005260:	4a6e      	ldr	r2, [pc, #440]	; (800541c <HAL_GPIO_Init+0x1c8>)
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005262:	f8df 91c4 	ldr.w	r9, [pc, #452]	; 8005428 <HAL_GPIO_Init+0x1d4>
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005266:	9301      	str	r3, [sp, #4]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005268:	2300      	movs	r3, #0
    ioposition = 0x01U << position;
 800526a:	f04f 0e01 	mov.w	lr, #1
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800526e:	9c01      	ldr	r4, [sp, #4]
    ioposition = 0x01U << position;
 8005270:	fa0e fe03 	lsl.w	lr, lr, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8005274:	ea0e 0604 	and.w	r6, lr, r4
    if(iocurrent == ioposition)
 8005278:	45b6      	cmp	lr, r6
 800527a:	f040 80b6 	bne.w	80053ea <HAL_GPIO_Init+0x196>
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800527e:	684c      	ldr	r4, [r1, #4]
 8005280:	f024 0710 	bic.w	r7, r4, #16
 8005284:	2f02      	cmp	r7, #2
 8005286:	d116      	bne.n	80052b6 <HAL_GPIO_Init+0x62>
        temp = GPIOx->AFR[position >> 3U];
 8005288:	ea4f 0ad3 	mov.w	sl, r3, lsr #3
 800528c:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005290:	f003 0b07 	and.w	fp, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8005294:	f8da 5020 	ldr.w	r5, [sl, #32]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8005298:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 800529c:	f04f 0c0f 	mov.w	ip, #15
 80052a0:	fa0c fc0b 	lsl.w	ip, ip, fp
 80052a4:	ea25 0c0c 	bic.w	ip, r5, ip
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80052a8:	690d      	ldr	r5, [r1, #16]
 80052aa:	fa05 f50b 	lsl.w	r5, r5, fp
 80052ae:	ea45 050c 	orr.w	r5, r5, ip
        GPIOx->AFR[position >> 3U] = temp;
 80052b2:	f8ca 5020 	str.w	r5, [sl, #32]
 80052b6:	ea4f 0a43 	mov.w	sl, r3, lsl #1
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ba:	2503      	movs	r5, #3
      temp = GPIOx->MODER;
 80052bc:	f8d0 b000 	ldr.w	fp, [r0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052c0:	fa05 f50a 	lsl.w	r5, r5, sl
 80052c4:	43ed      	mvns	r5, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052c6:	f004 0c03 	and.w	ip, r4, #3
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80052ca:	ea0b 0b05 	and.w	fp, fp, r5
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052ce:	fa0c fc0a 	lsl.w	ip, ip, sl
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052d2:	3f01      	subs	r7, #1
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80052d4:	ea4c 0c0b 	orr.w	ip, ip, fp
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052d8:	2f01      	cmp	r7, #1
      GPIOx->MODER = temp;
 80052da:	f8c0 c000 	str.w	ip, [r0]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80052de:	d811      	bhi.n	8005304 <HAL_GPIO_Init+0xb0>
        temp = GPIOx->OSPEEDR; 
 80052e0:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80052e2:	ea07 0b05 	and.w	fp, r7, r5
        temp |= (GPIO_Init->Speed << (position * 2U));
 80052e6:	68cf      	ldr	r7, [r1, #12]
 80052e8:	fa07 fc0a 	lsl.w	ip, r7, sl
 80052ec:	ea4c 070b 	orr.w	r7, ip, fp
        GPIOx->OSPEEDR = temp;
 80052f0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80052f2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80052f4:	ea27 0e0e 	bic.w	lr, r7, lr
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80052f8:	f3c4 1700 	ubfx	r7, r4, #4, #1
 80052fc:	409f      	lsls	r7, r3
 80052fe:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8005302:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8005304:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005306:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8005308:	688f      	ldr	r7, [r1, #8]
 800530a:	fa07 f70a 	lsl.w	r7, r7, sl
 800530e:	433d      	orrs	r5, r7
      GPIOx->PUPDR = temp;
 8005310:	60c5      	str	r5, [r0, #12]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8005312:	00e5      	lsls	r5, r4, #3
 8005314:	d569      	bpl.n	80053ea <HAL_GPIO_Init+0x196>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005316:	f04f 0b00 	mov.w	fp, #0
 800531a:	f8cd b00c 	str.w	fp, [sp, #12]
 800531e:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005322:	4d3f      	ldr	r5, [pc, #252]	; (8005420 <HAL_GPIO_Init+0x1cc>)
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005324:	f447 4780 	orr.w	r7, r7, #16384	; 0x4000
 8005328:	f8c8 7044 	str.w	r7, [r8, #68]	; 0x44
 800532c:	f8d8 7044 	ldr.w	r7, [r8, #68]	; 0x44
 8005330:	f407 4780 	and.w	r7, r7, #16384	; 0x4000
 8005334:	9703      	str	r7, [sp, #12]
 8005336:	9f03      	ldr	r7, [sp, #12]
 8005338:	f023 0703 	bic.w	r7, r3, #3
 800533c:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
 8005340:	f507 379c 	add.w	r7, r7, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005344:	f003 0c03 	and.w	ip, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8005348:	f8d7 a008 	ldr.w	sl, [r7, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800534c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8005350:	f04f 0e0f 	mov.w	lr, #15
 8005354:	fa0e fe0c 	lsl.w	lr, lr, ip
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005358:	42a8      	cmp	r0, r5
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800535a:	ea2a 0e0e 	bic.w	lr, sl, lr
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800535e:	d04b      	beq.n	80053f8 <HAL_GPIO_Init+0x1a4>
 8005360:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005364:	42a8      	cmp	r0, r5
 8005366:	d049      	beq.n	80053fc <HAL_GPIO_Init+0x1a8>
 8005368:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800536c:	42a8      	cmp	r0, r5
 800536e:	d047      	beq.n	8005400 <HAL_GPIO_Init+0x1ac>
 8005370:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005374:	42a8      	cmp	r0, r5
 8005376:	d045      	beq.n	8005404 <HAL_GPIO_Init+0x1b0>
 8005378:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 800537c:	42a8      	cmp	r0, r5
 800537e:	d043      	beq.n	8005408 <HAL_GPIO_Init+0x1b4>
 8005380:	4548      	cmp	r0, r9
 8005382:	d043      	beq.n	800540c <HAL_GPIO_Init+0x1b8>
 8005384:	f505 6500 	add.w	r5, r5, #2048	; 0x800
 8005388:	42a8      	cmp	r0, r5
 800538a:	d041      	beq.n	8005410 <HAL_GPIO_Init+0x1bc>
 800538c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005390:	42a8      	cmp	r0, r5
 8005392:	d03f      	beq.n	8005414 <HAL_GPIO_Init+0x1c0>
 8005394:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8005398:	42a8      	cmp	r0, r5
 800539a:	d03d      	beq.n	8005418 <HAL_GPIO_Init+0x1c4>
 800539c:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 80053a0:	42a8      	cmp	r0, r5
 80053a2:	bf14      	ite	ne
 80053a4:	250a      	movne	r5, #10
 80053a6:	2509      	moveq	r5, #9
 80053a8:	fa05 f50c 	lsl.w	r5, r5, ip
 80053ac:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80053b0:	60bd      	str	r5, [r7, #8]
        temp = EXTI->IMR;
 80053b2:	6815      	ldr	r5, [r2, #0]
        temp &= ~((uint32_t)iocurrent);
 80053b4:	43f7      	mvns	r7, r6
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80053b6:	f414 3f80 	tst.w	r4, #65536	; 0x10000
        temp &= ~((uint32_t)iocurrent);
 80053ba:	bf0c      	ite	eq
 80053bc:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80053be:	4335      	orrne	r5, r6
        }
        EXTI->IMR = temp;
 80053c0:	6015      	str	r5, [r2, #0]

        temp = EXTI->EMR;
 80053c2:	6855      	ldr	r5, [r2, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80053c4:	f414 3f00 	tst.w	r4, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80053c8:	bf0c      	ite	eq
 80053ca:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80053cc:	4335      	orrne	r5, r6
        }
        EXTI->EMR = temp;
 80053ce:	6055      	str	r5, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80053d0:	6895      	ldr	r5, [r2, #8]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80053d2:	f414 1f80 	tst.w	r4, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 80053d6:	bf0c      	ite	eq
 80053d8:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80053da:	4335      	orrne	r5, r6
        }
        EXTI->RTSR = temp;
 80053dc:	6095      	str	r5, [r2, #8]

        temp = EXTI->FTSR;
 80053de:	68d5      	ldr	r5, [r2, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80053e0:	02a4      	lsls	r4, r4, #10
        temp &= ~((uint32_t)iocurrent);
 80053e2:	bf54      	ite	pl
 80053e4:	403d      	andpl	r5, r7
        {
          temp |= iocurrent;
 80053e6:	4335      	orrmi	r5, r6
        }
        EXTI->FTSR = temp;
 80053e8:	60d5      	str	r5, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80053ea:	3301      	adds	r3, #1
 80053ec:	2b10      	cmp	r3, #16
 80053ee:	f47f af3c 	bne.w	800526a <HAL_GPIO_Init+0x16>
      }
    }
  }
}
 80053f2:	b005      	add	sp, #20
 80053f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80053f8:	465d      	mov	r5, fp
 80053fa:	e7d5      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 80053fc:	2501      	movs	r5, #1
 80053fe:	e7d3      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 8005400:	2502      	movs	r5, #2
 8005402:	e7d1      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 8005404:	2503      	movs	r5, #3
 8005406:	e7cf      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 8005408:	2504      	movs	r5, #4
 800540a:	e7cd      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 800540c:	2505      	movs	r5, #5
 800540e:	e7cb      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 8005410:	2506      	movs	r5, #6
 8005412:	e7c9      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 8005414:	2507      	movs	r5, #7
 8005416:	e7c7      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 8005418:	2508      	movs	r5, #8
 800541a:	e7c5      	b.n	80053a8 <HAL_GPIO_Init+0x154>
 800541c:	40013c00 	.word	0x40013c00
 8005420:	40020000 	.word	0x40020000
 8005424:	40023800 	.word	0x40023800
 8005428:	40021400 	.word	0x40021400

0800542c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800542c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;

        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8005430:	4d46      	ldr	r5, [pc, #280]	; (800554c <HAL_GPIO_DeInit+0x120>)
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005432:	f8df 9120 	ldr.w	r9, [pc, #288]	; 8005554 <HAL_GPIO_DeInit+0x128>
 8005436:	f8df a120 	ldr.w	sl, [pc, #288]	; 8005558 <HAL_GPIO_DeInit+0x12c>
 800543a:	f8df b120 	ldr.w	fp, [pc, #288]	; 800555c <HAL_GPIO_DeInit+0x130>
  for(position = 0U; position < GPIO_NUMBER; position++)
 800543e:	2200      	movs	r2, #0
    ioposition = 0x01U << position;
 8005440:	2301      	movs	r3, #1
 8005442:	fa03 fc02 	lsl.w	ip, r3, r2
    iocurrent = (GPIO_Pin) & ioposition;
 8005446:	ea0c 0401 	and.w	r4, ip, r1
    if(iocurrent == ioposition)
 800544a:	45a4      	cmp	ip, r4
 800544c:	d167      	bne.n	800551e <HAL_GPIO_DeInit+0xf2>
 800544e:	f022 0603 	bic.w	r6, r2, #3
 8005452:	f106 4680 	add.w	r6, r6, #1073741824	; 0x40000000
 8005456:	f506 369c 	add.w	r6, r6, #79872	; 0x13800
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800545a:	f002 0e03 	and.w	lr, r2, #3
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800545e:	4b3c      	ldr	r3, [pc, #240]	; (8005550 <HAL_GPIO_DeInit+0x124>)
      tmp = SYSCFG->EXTICR[position >> 2U];
 8005460:	f8d6 8008 	ldr.w	r8, [r6, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005464:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8005468:	270f      	movs	r7, #15
 800546a:	fa07 f70e 	lsl.w	r7, r7, lr
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800546e:	4298      	cmp	r0, r3
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 8005470:	ea08 0807 	and.w	r8, r8, r7
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005474:	d058      	beq.n	8005528 <HAL_GPIO_DeInit+0xfc>
 8005476:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800547a:	4298      	cmp	r0, r3
 800547c:	d056      	beq.n	800552c <HAL_GPIO_DeInit+0x100>
 800547e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005482:	4298      	cmp	r0, r3
 8005484:	d054      	beq.n	8005530 <HAL_GPIO_DeInit+0x104>
 8005486:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800548a:	4298      	cmp	r0, r3
 800548c:	d052      	beq.n	8005534 <HAL_GPIO_DeInit+0x108>
 800548e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8005492:	4298      	cmp	r0, r3
 8005494:	d050      	beq.n	8005538 <HAL_GPIO_DeInit+0x10c>
 8005496:	4548      	cmp	r0, r9
 8005498:	d050      	beq.n	800553c <HAL_GPIO_DeInit+0x110>
 800549a:	4550      	cmp	r0, sl
 800549c:	d050      	beq.n	8005540 <HAL_GPIO_DeInit+0x114>
 800549e:	4558      	cmp	r0, fp
 80054a0:	d050      	beq.n	8005544 <HAL_GPIO_DeInit+0x118>
 80054a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054a6:	4298      	cmp	r0, r3
 80054a8:	d04e      	beq.n	8005548 <HAL_GPIO_DeInit+0x11c>
 80054aa:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80054ae:	4298      	cmp	r0, r3
 80054b0:	bf0c      	ite	eq
 80054b2:	2309      	moveq	r3, #9
 80054b4:	230a      	movne	r3, #10
 80054b6:	fa03 f30e 	lsl.w	r3, r3, lr
 80054ba:	4598      	cmp	r8, r3
 80054bc:	d110      	bne.n	80054e0 <HAL_GPIO_DeInit+0xb4>
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80054be:	68b3      	ldr	r3, [r6, #8]
 80054c0:	ea23 0707 	bic.w	r7, r3, r7
 80054c4:	60b7      	str	r7, [r6, #8]
        EXTI->IMR &= ~((uint32_t)iocurrent);
 80054c6:	682b      	ldr	r3, [r5, #0]
 80054c8:	43e4      	mvns	r4, r4
 80054ca:	4023      	ands	r3, r4
 80054cc:	602b      	str	r3, [r5, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 80054ce:	686b      	ldr	r3, [r5, #4]
 80054d0:	4023      	ands	r3, r4
 80054d2:	606b      	str	r3, [r5, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80054d4:	68ab      	ldr	r3, [r5, #8]
 80054d6:	4023      	ands	r3, r4
 80054d8:	60ab      	str	r3, [r5, #8]
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80054da:	68eb      	ldr	r3, [r5, #12]
 80054dc:	401c      	ands	r4, r3
 80054de:	60ec      	str	r4, [r5, #12]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80054e0:	0056      	lsls	r6, r2, #1
 80054e2:	2303      	movs	r3, #3
 80054e4:	6804      	ldr	r4, [r0, #0]
 80054e6:	40b3      	lsls	r3, r6
 80054e8:	43db      	mvns	r3, r3
 80054ea:	401c      	ands	r4, r3
 80054ec:	6004      	str	r4, [r0, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80054ee:	08d4      	lsrs	r4, r2, #3
 80054f0:	eb00 0484 	add.w	r4, r0, r4, lsl #2
 80054f4:	f002 0e07 	and.w	lr, r2, #7
 80054f8:	6a26      	ldr	r6, [r4, #32]
 80054fa:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 80054fe:	270f      	movs	r7, #15
 8005500:	fa07 f70e 	lsl.w	r7, r7, lr
 8005504:	ea26 0707 	bic.w	r7, r6, r7
 8005508:	6227      	str	r7, [r4, #32]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800550a:	6884      	ldr	r4, [r0, #8]
 800550c:	401c      	ands	r4, r3
 800550e:	6084      	str	r4, [r0, #8]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 8005510:	6844      	ldr	r4, [r0, #4]
 8005512:	ea24 040c 	bic.w	r4, r4, ip
 8005516:	6044      	str	r4, [r0, #4]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8005518:	68c4      	ldr	r4, [r0, #12]
 800551a:	4023      	ands	r3, r4
 800551c:	60c3      	str	r3, [r0, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800551e:	3201      	adds	r2, #1
 8005520:	2a10      	cmp	r2, #16
 8005522:	d18d      	bne.n	8005440 <HAL_GPIO_DeInit+0x14>
    }
  }
}
 8005524:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 8005528:	2300      	movs	r3, #0
 800552a:	e7c4      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 800552c:	2301      	movs	r3, #1
 800552e:	e7c2      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 8005530:	2302      	movs	r3, #2
 8005532:	e7c0      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 8005534:	2303      	movs	r3, #3
 8005536:	e7be      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 8005538:	2304      	movs	r3, #4
 800553a:	e7bc      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 800553c:	2305      	movs	r3, #5
 800553e:	e7ba      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 8005540:	2306      	movs	r3, #6
 8005542:	e7b8      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 8005544:	2307      	movs	r3, #7
 8005546:	e7b6      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 8005548:	2308      	movs	r3, #8
 800554a:	e7b4      	b.n	80054b6 <HAL_GPIO_DeInit+0x8a>
 800554c:	40013c00 	.word	0x40013c00
 8005550:	40020000 	.word	0x40020000
 8005554:	40021400 	.word	0x40021400
 8005558:	40021800 	.word	0x40021800
 800555c:	40021c00 	.word	0x40021c00

08005560 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005560:	b10a      	cbz	r2, 8005566 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005562:	6181      	str	r1, [r0, #24]
 8005564:	4770      	bx	lr
 8005566:	0409      	lsls	r1, r1, #16
 8005568:	e7fb      	b.n	8005562 <HAL_GPIO_WritePin+0x2>

0800556a <HAL_GPIO_TogglePin>:
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 800556a:	6943      	ldr	r3, [r0, #20]
 800556c:	ea31 0303 	bics.w	r3, r1, r3
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8005570:	bf08      	it	eq
 8005572:	0409      	lsleq	r1, r1, #16
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
 8005574:	6181      	str	r1, [r0, #24]
 8005576:	4770      	bx	lr

08005578 <I2C_IsAcknowledgeFailed>:
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005578:	6801      	ldr	r1, [r0, #0]
 800557a:	694b      	ldr	r3, [r1, #20]
 800557c:	f413 6380 	ands.w	r3, r3, #1024	; 0x400
 8005580:	f04f 0200 	mov.w	r2, #0
 8005584:	d010      	beq.n	80055a8 <I2C_IsAcknowledgeFailed+0x30>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005586:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 800558a:	614b      	str	r3, [r1, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
    hi2c->State               = HAL_I2C_STATE_READY;
 800558c:	2320      	movs	r3, #32
    hi2c->PreviousState       = I2C_STATE_NONE;
 800558e:	6302      	str	r2, [r0, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005590:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005594:	f880 203e 	strb.w	r2, [r0, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005598:	6c03      	ldr	r3, [r0, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800559a:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800559e:	f043 0304 	orr.w	r3, r3, #4
 80055a2:	6403      	str	r3, [r0, #64]	; 0x40

    return HAL_ERROR;
 80055a4:	2001      	movs	r0, #1
 80055a6:	4770      	bx	lr
  }
  return HAL_OK;
 80055a8:	4618      	mov	r0, r3
}
 80055aa:	4770      	bx	lr

080055ac <I2C_WaitOnMasterAddressFlagUntilTimeout>:
{
 80055ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80055b0:	4604      	mov	r4, r0
 80055b2:	4617      	mov	r7, r2
 80055b4:	4699      	mov	r9, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80055b6:	f3c1 4807 	ubfx	r8, r1, #16, #8
 80055ba:	b28e      	uxth	r6, r1
 80055bc:	6825      	ldr	r5, [r4, #0]
 80055be:	f1b8 0f01 	cmp.w	r8, #1
 80055c2:	bf0c      	ite	eq
 80055c4:	696b      	ldreq	r3, [r5, #20]
 80055c6:	69ab      	ldrne	r3, [r5, #24]
 80055c8:	ea36 0303 	bics.w	r3, r6, r3
 80055cc:	bf14      	ite	ne
 80055ce:	2001      	movne	r0, #1
 80055d0:	2000      	moveq	r0, #0
 80055d2:	b908      	cbnz	r0, 80055d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x2c>
}
 80055d4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80055d8:	696b      	ldr	r3, [r5, #20]
 80055da:	055a      	lsls	r2, r3, #21
 80055dc:	d516      	bpl.n	800560c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x60>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055de:	682b      	ldr	r3, [r5, #0]
 80055e0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80055e4:	602b      	str	r3, [r5, #0]
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80055e6:	f46f 6380 	mvn.w	r3, #1024	; 0x400
 80055ea:	616b      	str	r3, [r5, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80055ec:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80055ee:	2300      	movs	r3, #0
 80055f0:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80055f2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80055f6:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80055fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80055fc:	f042 0204 	orr.w	r2, r2, #4
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005600:	6422      	str	r2, [r4, #64]	; 0x40
        __HAL_UNLOCK(hi2c);
 8005602:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
        return HAL_ERROR;
 8005606:	2001      	movs	r0, #1
 8005608:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 800560c:	1c7b      	adds	r3, r7, #1
 800560e:	d0d5      	beq.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005610:	f7ff faec 	bl	8004bec <HAL_GetTick>
 8005614:	eba0 0009 	sub.w	r0, r0, r9
 8005618:	4287      	cmp	r7, r0
 800561a:	d301      	bcc.n	8005620 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x74>
 800561c:	2f00      	cmp	r7, #0
 800561e:	d1cd      	bne.n	80055bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005620:	2300      	movs	r3, #0
        hi2c->State               = HAL_I2C_STATE_READY;
 8005622:	2220      	movs	r2, #32
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005624:	6323      	str	r3, [r4, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005626:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800562a:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800562e:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8005630:	f042 0220 	orr.w	r2, r2, #32
 8005634:	e7e4      	b.n	8005600 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x54>

08005636 <I2C_WaitOnBTFFlagUntilTimeout>:
{
 8005636:	b570      	push	{r4, r5, r6, lr}
 8005638:	4604      	mov	r4, r0
 800563a:	460d      	mov	r5, r1
 800563c:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800563e:	6823      	ldr	r3, [r4, #0]
 8005640:	695b      	ldr	r3, [r3, #20]
 8005642:	075b      	lsls	r3, r3, #29
 8005644:	d501      	bpl.n	800564a <I2C_WaitOnBTFFlagUntilTimeout+0x14>
  return HAL_OK;
 8005646:	2000      	movs	r0, #0
 8005648:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800564a:	4620      	mov	r0, r4
 800564c:	f7ff ff94 	bl	8005578 <I2C_IsAcknowledgeFailed>
 8005650:	b9a8      	cbnz	r0, 800567e <I2C_WaitOnBTFFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005652:	1c6a      	adds	r2, r5, #1
 8005654:	d0f3      	beq.n	800563e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005656:	f7ff fac9 	bl	8004bec <HAL_GetTick>
 800565a:	1b80      	subs	r0, r0, r6
 800565c:	4285      	cmp	r5, r0
 800565e:	d301      	bcc.n	8005664 <I2C_WaitOnBTFFlagUntilTimeout+0x2e>
 8005660:	2d00      	cmp	r5, #0
 8005662:	d1ec      	bne.n	800563e <I2C_WaitOnBTFFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005664:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005666:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005668:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800566a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800566e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005672:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005674:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005678:	f042 0220 	orr.w	r2, r2, #32
 800567c:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800567e:	2001      	movs	r0, #1
}
 8005680:	bd70      	pop	{r4, r5, r6, pc}

08005682 <I2C_WaitOnRXNEFlagUntilTimeout>:
{
 8005682:	b570      	push	{r4, r5, r6, lr}
 8005684:	4604      	mov	r4, r0
 8005686:	460d      	mov	r5, r1
 8005688:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800568a:	6820      	ldr	r0, [r4, #0]
 800568c:	6943      	ldr	r3, [r0, #20]
 800568e:	f013 0340 	ands.w	r3, r3, #64	; 0x40
 8005692:	d001      	beq.n	8005698 <I2C_WaitOnRXNEFlagUntilTimeout+0x16>
  return HAL_OK;
 8005694:	2000      	movs	r0, #0
}
 8005696:	bd70      	pop	{r4, r5, r6, pc}
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005698:	6942      	ldr	r2, [r0, #20]
 800569a:	06d2      	lsls	r2, r2, #27
 800569c:	d50e      	bpl.n	80056bc <I2C_WaitOnRXNEFlagUntilTimeout+0x3a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800569e:	f06f 0210 	mvn.w	r2, #16
 80056a2:	6142      	str	r2, [r0, #20]
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a4:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056a6:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056a8:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056ac:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80056b0:	6c22      	ldr	r2, [r4, #64]	; 0x40
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056b2:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 80056b4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
 80056b8:	2001      	movs	r0, #1
 80056ba:	bd70      	pop	{r4, r5, r6, pc}
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80056bc:	f7ff fa96 	bl	8004bec <HAL_GetTick>
 80056c0:	1b80      	subs	r0, r0, r6
 80056c2:	42a8      	cmp	r0, r5
 80056c4:	d801      	bhi.n	80056ca <I2C_WaitOnRXNEFlagUntilTimeout+0x48>
 80056c6:	2d00      	cmp	r5, #0
 80056c8:	d1df      	bne.n	800568a <I2C_WaitOnRXNEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ca:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 80056cc:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 80056ce:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80056d0:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80056d4:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80056d8:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80056da:	f042 0220 	orr.w	r2, r2, #32
 80056de:	e7e8      	b.n	80056b2 <I2C_WaitOnRXNEFlagUntilTimeout+0x30>

080056e0 <I2C_WaitOnFlagUntilTimeout>:
{
 80056e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80056e4:	9e08      	ldr	r6, [sp, #32]
 80056e6:	4604      	mov	r4, r0
 80056e8:	4690      	mov	r8, r2
 80056ea:	461f      	mov	r7, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80056ec:	f3c1 4907 	ubfx	r9, r1, #16, #8
 80056f0:	b28d      	uxth	r5, r1
 80056f2:	6823      	ldr	r3, [r4, #0]
 80056f4:	f1b9 0f01 	cmp.w	r9, #1
 80056f8:	bf0c      	ite	eq
 80056fa:	695b      	ldreq	r3, [r3, #20]
 80056fc:	699b      	ldrne	r3, [r3, #24]
 80056fe:	ea35 0303 	bics.w	r3, r5, r3
 8005702:	bf0c      	ite	eq
 8005704:	2301      	moveq	r3, #1
 8005706:	2300      	movne	r3, #0
 8005708:	4543      	cmp	r3, r8
 800570a:	d002      	beq.n	8005712 <I2C_WaitOnFlagUntilTimeout+0x32>
  return HAL_OK;
 800570c:	2000      	movs	r0, #0
}
 800570e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    if (Timeout != HAL_MAX_DELAY)
 8005712:	1c7b      	adds	r3, r7, #1
 8005714:	d0ed      	beq.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005716:	f7ff fa69 	bl	8004bec <HAL_GetTick>
 800571a:	1b80      	subs	r0, r0, r6
 800571c:	4287      	cmp	r7, r0
 800571e:	d301      	bcc.n	8005724 <I2C_WaitOnFlagUntilTimeout+0x44>
 8005720:	2f00      	cmp	r7, #0
 8005722:	d1e6      	bne.n	80056f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005724:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005726:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005728:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800572a:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800572e:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005732:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005734:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005738:	f042 0220 	orr.w	r2, r2, #32
 800573c:	6422      	str	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 800573e:	2001      	movs	r0, #1
 8005740:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

08005744 <I2C_WaitOnTXEFlagUntilTimeout>:
{
 8005744:	b570      	push	{r4, r5, r6, lr}
 8005746:	4604      	mov	r4, r0
 8005748:	460d      	mov	r5, r1
 800574a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800574c:	6823      	ldr	r3, [r4, #0]
 800574e:	695b      	ldr	r3, [r3, #20]
 8005750:	061b      	lsls	r3, r3, #24
 8005752:	d501      	bpl.n	8005758 <I2C_WaitOnTXEFlagUntilTimeout+0x14>
  return HAL_OK;
 8005754:	2000      	movs	r0, #0
 8005756:	bd70      	pop	{r4, r5, r6, pc}
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005758:	4620      	mov	r0, r4
 800575a:	f7ff ff0d 	bl	8005578 <I2C_IsAcknowledgeFailed>
 800575e:	b9a8      	cbnz	r0, 800578c <I2C_WaitOnTXEFlagUntilTimeout+0x48>
    if (Timeout != HAL_MAX_DELAY)
 8005760:	1c6a      	adds	r2, r5, #1
 8005762:	d0f3      	beq.n	800574c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005764:	f7ff fa42 	bl	8004bec <HAL_GetTick>
 8005768:	1b80      	subs	r0, r0, r6
 800576a:	4285      	cmp	r5, r0
 800576c:	d301      	bcc.n	8005772 <I2C_WaitOnTXEFlagUntilTimeout+0x2e>
 800576e:	2d00      	cmp	r5, #0
 8005770:	d1ec      	bne.n	800574c <I2C_WaitOnTXEFlagUntilTimeout+0x8>
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005772:	2300      	movs	r3, #0
      hi2c->State               = HAL_I2C_STATE_READY;
 8005774:	2220      	movs	r2, #32
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005776:	6323      	str	r3, [r4, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005778:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800577c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005780:	6c22      	ldr	r2, [r4, #64]	; 0x40
      __HAL_UNLOCK(hi2c);
 8005782:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005786:	f042 0220 	orr.w	r2, r2, #32
 800578a:	6422      	str	r2, [r4, #64]	; 0x40
      return HAL_ERROR;
 800578c:	2001      	movs	r0, #1
}
 800578e:	bd70      	pop	{r4, r5, r6, pc}

08005790 <I2C_RequestMemoryWrite>:
{
 8005790:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005794:	4615      	mov	r5, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005796:	6802      	ldr	r2, [r0, #0]
{
 8005798:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800579a:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800579c:	6813      	ldr	r3, [r2, #0]
 800579e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057a2:	6013      	str	r3, [r2, #0]
{
 80057a4:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057a6:	9600      	str	r6, [sp, #0]
 80057a8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80057aa:	2200      	movs	r2, #0
 80057ac:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 80057b0:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80057b2:	f7ff ff95 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 80057b6:	b118      	cbz	r0, 80057c0 <I2C_RequestMemoryWrite+0x30>
      return HAL_ERROR;
 80057b8:	2001      	movs	r0, #1
}
 80057ba:	b004      	add	sp, #16
 80057bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057c0:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057c2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80057c4:	4918      	ldr	r1, [pc, #96]	; (8005828 <I2C_RequestMemoryWrite+0x98>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80057c6:	f007 07fe 	and.w	r7, r7, #254	; 0xfe
 80057ca:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80057cc:	4620      	mov	r0, r4
 80057ce:	4633      	mov	r3, r6
 80057d0:	f7ff feec 	bl	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80057d4:	2800      	cmp	r0, #0
 80057d6:	d1ef      	bne.n	80057b8 <I2C_RequestMemoryWrite+0x28>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057d8:	6823      	ldr	r3, [r4, #0]
 80057da:	9003      	str	r0, [sp, #12]
 80057dc:	695a      	ldr	r2, [r3, #20]
 80057de:	9203      	str	r2, [sp, #12]
 80057e0:	699b      	ldr	r3, [r3, #24]
 80057e2:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057e4:	4632      	mov	r2, r6
 80057e6:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80057e8:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80057ea:	4620      	mov	r0, r4
 80057ec:	f7ff ffaa 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 80057f0:	b140      	cbz	r0, 8005804 <I2C_RequestMemoryWrite+0x74>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057f2:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80057f4:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057f6:	bf01      	itttt	eq
 80057f8:	6822      	ldreq	r2, [r4, #0]
 80057fa:	6813      	ldreq	r3, [r2, #0]
 80057fc:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005800:	6013      	streq	r3, [r2, #0]
 8005802:	e7d9      	b.n	80057b8 <I2C_RequestMemoryWrite+0x28>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8005804:	f1b8 0f01 	cmp.w	r8, #1
 8005808:	6823      	ldr	r3, [r4, #0]
 800580a:	d102      	bne.n	8005812 <I2C_RequestMemoryWrite+0x82>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800580c:	b2ed      	uxtb	r5, r5
 800580e:	611d      	str	r5, [r3, #16]
 8005810:	e7d3      	b.n	80057ba <I2C_RequestMemoryWrite+0x2a>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005812:	0a2a      	lsrs	r2, r5, #8
 8005814:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005816:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005818:	4632      	mov	r2, r6
 800581a:	4620      	mov	r0, r4
 800581c:	f7ff ff92 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 8005820:	2800      	cmp	r0, #0
 8005822:	d1e6      	bne.n	80057f2 <I2C_RequestMemoryWrite+0x62>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005824:	6823      	ldr	r3, [r4, #0]
 8005826:	e7f1      	b.n	800580c <I2C_RequestMemoryWrite+0x7c>
 8005828:	00010002 	.word	0x00010002

0800582c <I2C_RequestMemoryRead>:
{
 800582c:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8005830:	4698      	mov	r8, r3
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005832:	6803      	ldr	r3, [r0, #0]
{
 8005834:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 8005836:	4616      	mov	r6, r2
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800583e:	601a      	str	r2, [r3, #0]
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005840:	681a      	ldr	r2, [r3, #0]
 8005842:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005846:	601a      	str	r2, [r3, #0]
{
 8005848:	460f      	mov	r7, r1
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800584a:	9500      	str	r5, [sp, #0]
 800584c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800584e:	2200      	movs	r2, #0
 8005850:	f04f 1101 	mov.w	r1, #65537	; 0x10001
{
 8005854:	4604      	mov	r4, r0
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005856:	f7ff ff43 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 800585a:	b118      	cbz	r0, 8005864 <I2C_RequestMemoryRead+0x38>
    return HAL_ERROR;
 800585c:	2001      	movs	r0, #1
}
 800585e:	b004      	add	sp, #16
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005864:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005866:	492b      	ldr	r1, [pc, #172]	; (8005914 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005868:	b2ff      	uxtb	r7, r7
 800586a:	f007 02fe 	and.w	r2, r7, #254	; 0xfe
 800586e:	611a      	str	r2, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005870:	4620      	mov	r0, r4
 8005872:	462b      	mov	r3, r5
 8005874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005876:	f7ff fe99 	bl	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800587a:	2800      	cmp	r0, #0
 800587c:	d1ee      	bne.n	800585c <I2C_RequestMemoryRead+0x30>
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800587e:	6823      	ldr	r3, [r4, #0]
 8005880:	9003      	str	r0, [sp, #12]
 8005882:	695a      	ldr	r2, [r3, #20]
 8005884:	9203      	str	r2, [sp, #12]
 8005886:	699b      	ldr	r3, [r3, #24]
 8005888:	9303      	str	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800588a:	462a      	mov	r2, r5
 800588c:	990a      	ldr	r1, [sp, #40]	; 0x28
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800588e:	9b03      	ldr	r3, [sp, #12]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005890:	4620      	mov	r0, r4
 8005892:	f7ff ff57 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 8005896:	b140      	cbz	r0, 80058aa <I2C_RequestMemoryRead+0x7e>
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005898:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800589a:	2b04      	cmp	r3, #4
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589c:	bf01      	itttt	eq
 800589e:	6822      	ldreq	r2, [r4, #0]
 80058a0:	6813      	ldreq	r3, [r2, #0]
 80058a2:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 80058a6:	6013      	streq	r3, [r2, #0]
 80058a8:	e7d8      	b.n	800585c <I2C_RequestMemoryRead+0x30>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80058aa:	f1b8 0f01 	cmp.w	r8, #1
 80058ae:	6823      	ldr	r3, [r4, #0]
 80058b0:	d125      	bne.n	80058fe <I2C_RequestMemoryRead+0xd2>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80058b2:	b2f6      	uxtb	r6, r6
 80058b4:	611e      	str	r6, [r3, #16]
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80058b6:	462a      	mov	r2, r5
 80058b8:	990a      	ldr	r1, [sp, #40]	; 0x28
 80058ba:	4620      	mov	r0, r4
 80058bc:	f7ff ff42 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 80058c0:	4602      	mov	r2, r0
 80058c2:	2800      	cmp	r0, #0
 80058c4:	d1e8      	bne.n	8005898 <I2C_RequestMemoryRead+0x6c>
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80058c6:	6821      	ldr	r1, [r4, #0]
 80058c8:	680b      	ldr	r3, [r1, #0]
 80058ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80058ce:	600b      	str	r3, [r1, #0]
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80058d0:	4620      	mov	r0, r4
 80058d2:	9500      	str	r5, [sp, #0]
 80058d4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80058d6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80058da:	f7ff ff01 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 80058de:	2800      	cmp	r0, #0
 80058e0:	d1bc      	bne.n	800585c <I2C_RequestMemoryRead+0x30>
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058e2:	6823      	ldr	r3, [r4, #0]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058e4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80058e6:	490b      	ldr	r1, [pc, #44]	; (8005914 <I2C_RequestMemoryRead+0xe8>)
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80058e8:	f047 0701 	orr.w	r7, r7, #1
 80058ec:	611f      	str	r7, [r3, #16]
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80058ee:	4620      	mov	r0, r4
 80058f0:	462b      	mov	r3, r5
 80058f2:	f7ff fe5b 	bl	80055ac <I2C_WaitOnMasterAddressFlagUntilTimeout>
    return HAL_ERROR;
 80058f6:	3000      	adds	r0, #0
 80058f8:	bf18      	it	ne
 80058fa:	2001      	movne	r0, #1
 80058fc:	e7af      	b.n	800585e <I2C_RequestMemoryRead+0x32>
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80058fe:	0a32      	lsrs	r2, r6, #8
 8005900:	611a      	str	r2, [r3, #16]
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8005902:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005904:	462a      	mov	r2, r5
 8005906:	4620      	mov	r0, r4
 8005908:	f7ff ff1c 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 800590c:	2800      	cmp	r0, #0
 800590e:	d1c3      	bne.n	8005898 <I2C_RequestMemoryRead+0x6c>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005910:	6823      	ldr	r3, [r4, #0]
 8005912:	e7ce      	b.n	80058b2 <I2C_RequestMemoryRead+0x86>
 8005914:	00010002 	.word	0x00010002

08005918 <HAL_I2C_Init>:
{
 8005918:	b570      	push	{r4, r5, r6, lr}
  if (hi2c == NULL)
 800591a:	4604      	mov	r4, r0
 800591c:	b908      	cbnz	r0, 8005922 <HAL_I2C_Init+0xa>
    return HAL_ERROR;
 800591e:	2001      	movs	r0, #1
 8005920:	bd70      	pop	{r4, r5, r6, pc}
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005922:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005926:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800592a:	b91b      	cbnz	r3, 8005934 <HAL_I2C_Init+0x1c>
    hi2c->Lock = HAL_UNLOCKED;
 800592c:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_I2C_MspInit(hi2c);
 8005930:	f002 f942 	bl	8007bb8 <HAL_I2C_MspInit>
  __HAL_I2C_DISABLE(hi2c);
 8005934:	6822      	ldr	r2, [r4, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005936:	2324      	movs	r3, #36	; 0x24
 8005938:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 800593c:	6813      	ldr	r3, [r2, #0]
 800593e:	f023 0301 	bic.w	r3, r3, #1
 8005942:	6013      	str	r3, [r2, #0]
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005944:	f000 fed2 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8005948:	6865      	ldr	r5, [r4, #4]
 800594a:	4b41      	ldr	r3, [pc, #260]	; (8005a50 <HAL_I2C_Init+0x138>)
 800594c:	429d      	cmp	r5, r3
 800594e:	d84d      	bhi.n	80059ec <HAL_I2C_Init+0xd4>
 8005950:	4b40      	ldr	r3, [pc, #256]	; (8005a54 <HAL_I2C_Init+0x13c>)
 8005952:	4298      	cmp	r0, r3
 8005954:	d9e3      	bls.n	800591e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005956:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 8005958:	493f      	ldr	r1, [pc, #252]	; (8005a58 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800595a:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 800595c:	fbb0 f1f1 	udiv	r1, r0, r1
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005960:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005964:	430b      	orrs	r3, r1
 8005966:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005968:	6a13      	ldr	r3, [r2, #32]
 800596a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800596e:	3101      	adds	r1, #1
 8005970:	4319      	orrs	r1, r3
 8005972:	6211      	str	r1, [r2, #32]
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005974:	69d1      	ldr	r1, [r2, #28]
 8005976:	4b36      	ldr	r3, [pc, #216]	; (8005a50 <HAL_I2C_Init+0x138>)
 8005978:	f421 414f 	bic.w	r1, r1, #52992	; 0xcf00
 800597c:	429d      	cmp	r5, r3
 800597e:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 8005982:	f100 30ff 	add.w	r0, r0, #4294967295
 8005986:	d848      	bhi.n	8005a1a <HAL_I2C_Init+0x102>
 8005988:	006d      	lsls	r5, r5, #1
 800598a:	fbb0 f0f5 	udiv	r0, r0, r5
 800598e:	3001      	adds	r0, #1
 8005990:	f3c0 030b 	ubfx	r3, r0, #0, #12
 8005994:	2b04      	cmp	r3, #4
 8005996:	bf38      	it	cc
 8005998:	2304      	movcc	r3, #4
 800599a:	430b      	orrs	r3, r1
 800599c:	61d3      	str	r3, [r2, #28]
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800599e:	6811      	ldr	r1, [r2, #0]
 80059a0:	6a20      	ldr	r0, [r4, #32]
 80059a2:	69e3      	ldr	r3, [r4, #28]
 80059a4:	f021 01c0 	bic.w	r1, r1, #192	; 0xc0
 80059a8:	4303      	orrs	r3, r0
 80059aa:	430b      	orrs	r3, r1
 80059ac:	6013      	str	r3, [r2, #0]
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80059ae:	6891      	ldr	r1, [r2, #8]
 80059b0:	68e0      	ldr	r0, [r4, #12]
 80059b2:	6923      	ldr	r3, [r4, #16]
 80059b4:	f421 4103 	bic.w	r1, r1, #33536	; 0x8300
 80059b8:	4303      	orrs	r3, r0
 80059ba:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80059be:	430b      	orrs	r3, r1
 80059c0:	6093      	str	r3, [r2, #8]
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80059c2:	68d1      	ldr	r1, [r2, #12]
 80059c4:	69a0      	ldr	r0, [r4, #24]
 80059c6:	6963      	ldr	r3, [r4, #20]
 80059c8:	f021 01ff 	bic.w	r1, r1, #255	; 0xff
 80059cc:	4303      	orrs	r3, r0
 80059ce:	430b      	orrs	r3, r1
 80059d0:	60d3      	str	r3, [r2, #12]
  __HAL_I2C_ENABLE(hi2c);
 80059d2:	6813      	ldr	r3, [r2, #0]
 80059d4:	f043 0301 	orr.w	r3, r3, #1
 80059d8:	6013      	str	r3, [r2, #0]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059da:	2000      	movs	r0, #0
  hi2c->State = HAL_I2C_STATE_READY;
 80059dc:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059de:	6420      	str	r0, [r4, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80059e0:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80059e4:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80059e6:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 80059ea:	bd70      	pop	{r4, r5, r6, pc}
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80059ec:	4b1b      	ldr	r3, [pc, #108]	; (8005a5c <HAL_I2C_Init+0x144>)
 80059ee:	4298      	cmp	r0, r3
 80059f0:	d995      	bls.n	800591e <HAL_I2C_Init+0x6>
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059f2:	6822      	ldr	r2, [r4, #0]
  freqrange = I2C_FREQRANGE(pclk1);
 80059f4:	4e18      	ldr	r6, [pc, #96]	; (8005a58 <HAL_I2C_Init+0x140>)
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059f6:	6853      	ldr	r3, [r2, #4]
  freqrange = I2C_FREQRANGE(pclk1);
 80059f8:	fbb0 f6f6 	udiv	r6, r0, r6
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80059fc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a00:	4333      	orrs	r3, r6
 8005a02:	6053      	str	r3, [r2, #4]
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005a04:	6a13      	ldr	r3, [r2, #32]
 8005a06:	f44f 7196 	mov.w	r1, #300	; 0x12c
 8005a0a:	4371      	muls	r1, r6
 8005a0c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8005a10:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
 8005a14:	fbb1 f1f6 	udiv	r1, r1, r6
 8005a18:	e7a9      	b.n	800596e <HAL_I2C_Init+0x56>
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005a1a:	68a3      	ldr	r3, [r4, #8]
 8005a1c:	b953      	cbnz	r3, 8005a34 <HAL_I2C_Init+0x11c>
 8005a1e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
 8005a22:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a26:	1c43      	adds	r3, r0, #1
 8005a28:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a2c:	b16b      	cbz	r3, 8005a4a <HAL_I2C_Init+0x132>
 8005a2e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005a32:	e7b2      	b.n	800599a <HAL_I2C_Init+0x82>
 8005a34:	2319      	movs	r3, #25
 8005a36:	436b      	muls	r3, r5
 8005a38:	fbb0 f0f3 	udiv	r0, r0, r3
 8005a3c:	1c43      	adds	r3, r0, #1
 8005a3e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005a42:	b113      	cbz	r3, 8005a4a <HAL_I2C_Init+0x132>
 8005a44:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8005a48:	e7a7      	b.n	800599a <HAL_I2C_Init+0x82>
 8005a4a:	2301      	movs	r3, #1
 8005a4c:	e7a5      	b.n	800599a <HAL_I2C_Init+0x82>
 8005a4e:	bf00      	nop
 8005a50:	000186a0 	.word	0x000186a0
 8005a54:	001e847f 	.word	0x001e847f
 8005a58:	000f4240 	.word	0x000f4240
 8005a5c:	003d08ff 	.word	0x003d08ff

08005a60 <HAL_I2C_DeInit>:
{
 8005a60:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8005a62:	4604      	mov	r4, r0
 8005a64:	b198      	cbz	r0, 8005a8e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8005a66:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8005a68:	2324      	movs	r3, #36	; 0x24
 8005a6a:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
  __HAL_I2C_DISABLE(hi2c);
 8005a6e:	6813      	ldr	r3, [r2, #0]
 8005a70:	f023 0301 	bic.w	r3, r3, #1
 8005a74:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8005a76:	f002 f8a1 	bl	8007bbc <HAL_I2C_MspDeInit>
  hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005a7a:	2000      	movs	r0, #0
 8005a7c:	6420      	str	r0, [r4, #64]	; 0x40
  __HAL_UNLOCK(hi2c);
 8005a7e:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
  hi2c->State         = HAL_I2C_STATE_RESET;
 8005a82:	f884 003d 	strb.w	r0, [r4, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8005a86:	6320      	str	r0, [r4, #48]	; 0x30
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005a88:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
  return HAL_OK;
 8005a8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8005a8e:	2001      	movs	r0, #1
}
 8005a90:	bd10      	pop	{r4, pc}
	...

08005a94 <HAL_I2C_Mem_Write>:
{
 8005a94:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005a98:	4604      	mov	r4, r0
 8005a9a:	4699      	mov	r9, r3
 8005a9c:	460f      	mov	r7, r1
 8005a9e:	4690      	mov	r8, r2
 8005aa0:	9e0c      	ldr	r6, [sp, #48]	; 0x30
  uint32_t tickstart = HAL_GetTick();
 8005aa2:	f7ff f8a3 	bl	8004bec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aa6:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005aaa:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005aac:	4605      	mov	r5, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005aae:	d003      	beq.n	8005ab8 <HAL_I2C_Mem_Write+0x24>
    return HAL_BUSY;
 8005ab0:	2002      	movs	r0, #2
}
 8005ab2:	b003      	add	sp, #12
 8005ab4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ab8:	9000      	str	r0, [sp, #0]
 8005aba:	2319      	movs	r3, #25
 8005abc:	2201      	movs	r2, #1
 8005abe:	493b      	ldr	r1, [pc, #236]	; (8005bac <HAL_I2C_Mem_Write+0x118>)
 8005ac0:	4620      	mov	r0, r4
 8005ac2:	f7ff fe0d 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 8005ac6:	2800      	cmp	r0, #0
 8005ac8:	d1f2      	bne.n	8005ab0 <HAL_I2C_Mem_Write+0x1c>
    __HAL_LOCK(hi2c);
 8005aca:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005ace:	2b01      	cmp	r3, #1
 8005ad0:	d0ee      	beq.n	8005ab0 <HAL_I2C_Mem_Write+0x1c>
 8005ad2:	2301      	movs	r3, #1
 8005ad4:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005ad8:	6823      	ldr	r3, [r4, #0]
 8005ada:	681a      	ldr	r2, [r3, #0]
 8005adc:	07d1      	lsls	r1, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005ade:	bf5e      	ittt	pl
 8005ae0:	681a      	ldrpl	r2, [r3, #0]
 8005ae2:	f042 0201 	orrpl.w	r2, r2, #1
 8005ae6:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005aee:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005af0:	2321      	movs	r3, #33	; 0x21
 8005af2:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005af6:	2340      	movs	r3, #64	; 0x40
 8005af8:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005afc:	2300      	movs	r3, #0
 8005afe:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005b00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005b02:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005b04:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 8005b08:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005b0a:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b0c:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005b0e:	4b28      	ldr	r3, [pc, #160]	; (8005bb0 <HAL_I2C_Mem_Write+0x11c>)
 8005b10:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005b12:	9501      	str	r5, [sp, #4]
 8005b14:	9600      	str	r6, [sp, #0]
 8005b16:	464b      	mov	r3, r9
 8005b18:	4642      	mov	r2, r8
 8005b1a:	4639      	mov	r1, r7
 8005b1c:	4620      	mov	r0, r4
 8005b1e:	f7ff fe37 	bl	8005790 <I2C_RequestMemoryWrite>
 8005b22:	2800      	cmp	r0, #0
 8005b24:	d02a      	beq.n	8005b7c <HAL_I2C_Mem_Write+0xe8>
      return HAL_ERROR;
 8005b26:	2001      	movs	r0, #1
 8005b28:	e7c3      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e>
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b2a:	f7ff fe0b 	bl	8005744 <I2C_WaitOnTXEFlagUntilTimeout>
 8005b2e:	b140      	cbz	r0, 8005b42 <HAL_I2C_Mem_Write+0xae>
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005b30:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8005b32:	2b04      	cmp	r3, #4
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b34:	bf01      	itttt	eq
 8005b36:	6822      	ldreq	r2, [r4, #0]
 8005b38:	6813      	ldreq	r3, [r2, #0]
 8005b3a:	f443 7300 	orreq.w	r3, r3, #512	; 0x200
 8005b3e:	6013      	streq	r3, [r2, #0]
 8005b40:	e7f1      	b.n	8005b26 <HAL_I2C_Mem_Write+0x92>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005b44:	6827      	ldr	r7, [r4, #0]
 8005b46:	461a      	mov	r2, r3
 8005b48:	f812 1b01 	ldrb.w	r1, [r2], #1
 8005b4c:	6139      	str	r1, [r7, #16]
      hi2c->pBuffPtr++;
 8005b4e:	6262      	str	r2, [r4, #36]	; 0x24
      hi2c->XferCount--;
 8005b50:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
      hi2c->XferSize--;
 8005b52:	8d21      	ldrh	r1, [r4, #40]	; 0x28
      hi2c->XferCount--;
 8005b54:	3a01      	subs	r2, #1
 8005b56:	b292      	uxth	r2, r2
 8005b58:	8562      	strh	r2, [r4, #42]	; 0x2a
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b5a:	697a      	ldr	r2, [r7, #20]
      hi2c->XferSize--;
 8005b5c:	1e48      	subs	r0, r1, #1
 8005b5e:	b280      	uxth	r0, r0
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b60:	0752      	lsls	r2, r2, #29
      hi2c->XferSize--;
 8005b62:	8520      	strh	r0, [r4, #40]	; 0x28
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005b64:	d50a      	bpl.n	8005b7c <HAL_I2C_Mem_Write+0xe8>
 8005b66:	b148      	cbz	r0, 8005b7c <HAL_I2C_Mem_Write+0xe8>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005b68:	785a      	ldrb	r2, [r3, #1]
 8005b6a:	613a      	str	r2, [r7, #16]
        hi2c->pBuffPtr++;
 8005b6c:	3302      	adds	r3, #2
 8005b6e:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferCount--;
 8005b70:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005b72:	3b01      	subs	r3, #1
        hi2c->XferSize--;
 8005b74:	3902      	subs	r1, #2
        hi2c->XferCount--;
 8005b76:	b29b      	uxth	r3, r3
        hi2c->XferSize--;
 8005b78:	8521      	strh	r1, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005b7a:	8563      	strh	r3, [r4, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005b7c:	8d23      	ldrh	r3, [r4, #40]	; 0x28
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b7e:	462a      	mov	r2, r5
 8005b80:	4631      	mov	r1, r6
 8005b82:	4620      	mov	r0, r4
    while (hi2c->XferSize > 0U)
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1d0      	bne.n	8005b2a <HAL_I2C_Mem_Write+0x96>
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005b88:	f7ff fd55 	bl	8005636 <I2C_WaitOnBTFFlagUntilTimeout>
 8005b8c:	2800      	cmp	r0, #0
 8005b8e:	d1cf      	bne.n	8005b30 <HAL_I2C_Mem_Write+0x9c>
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b90:	6822      	ldr	r2, [r4, #0]
 8005b92:	6813      	ldr	r3, [r2, #0]
 8005b94:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005b98:	6013      	str	r3, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005b9a:	2320      	movs	r3, #32
 8005b9c:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    __HAL_UNLOCK(hi2c);
 8005ba0:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ba4:	f884 003e 	strb.w	r0, [r4, #62]	; 0x3e
    return HAL_OK;
 8005ba8:	e783      	b.n	8005ab2 <HAL_I2C_Mem_Write+0x1e>
 8005baa:	bf00      	nop
 8005bac:	00100002 	.word	0x00100002
 8005bb0:	ffff0000 	.word	0xffff0000

08005bb4 <HAL_I2C_Mem_Read>:
{
 8005bb4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005bb8:	4604      	mov	r4, r0
 8005bba:	b087      	sub	sp, #28
 8005bbc:	4699      	mov	r9, r3
 8005bbe:	460d      	mov	r5, r1
 8005bc0:	4690      	mov	r8, r2
 8005bc2:	9f10      	ldr	r7, [sp, #64]	; 0x40
  uint32_t tickstart = HAL_GetTick();
 8005bc4:	f7ff f812 	bl	8004bec <HAL_GetTick>
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bc8:	f894 303d 	ldrb.w	r3, [r4, #61]	; 0x3d
 8005bcc:	2b20      	cmp	r3, #32
  uint32_t tickstart = HAL_GetTick();
 8005bce:	4606      	mov	r6, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005bd0:	d004      	beq.n	8005bdc <HAL_I2C_Mem_Read+0x28>
    return HAL_BUSY;
 8005bd2:	2502      	movs	r5, #2
}
 8005bd4:	4628      	mov	r0, r5
 8005bd6:	b007      	add	sp, #28
 8005bd8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005bdc:	9000      	str	r0, [sp, #0]
 8005bde:	2319      	movs	r3, #25
 8005be0:	2201      	movs	r2, #1
 8005be2:	4977      	ldr	r1, [pc, #476]	; (8005dc0 <HAL_I2C_Mem_Read+0x20c>)
 8005be4:	4620      	mov	r0, r4
 8005be6:	f7ff fd7b 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d1f1      	bne.n	8005bd2 <HAL_I2C_Mem_Read+0x1e>
    __HAL_LOCK(hi2c);
 8005bee:	f894 303c 	ldrb.w	r3, [r4, #60]	; 0x3c
 8005bf2:	2b01      	cmp	r3, #1
 8005bf4:	d0ed      	beq.n	8005bd2 <HAL_I2C_Mem_Read+0x1e>
 8005bf6:	2301      	movs	r3, #1
 8005bf8:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005bfc:	6823      	ldr	r3, [r4, #0]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	07d0      	lsls	r0, r2, #31
      __HAL_I2C_ENABLE(hi2c);
 8005c02:	bf5e      	ittt	pl
 8005c04:	681a      	ldrpl	r2, [r3, #0]
 8005c06:	f042 0201 	orrpl.w	r2, r2, #1
 8005c0a:	601a      	strpl	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c0c:	681a      	ldr	r2, [r3, #0]
 8005c0e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005c12:	601a      	str	r2, [r3, #0]
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005c14:	2322      	movs	r3, #34	; 0x22
 8005c16:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005c1a:	2340      	movs	r3, #64	; 0x40
 8005c1c:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005c20:	2300      	movs	r3, #0
 8005c22:	6423      	str	r3, [r4, #64]	; 0x40
    hi2c->pBuffPtr    = pData;
 8005c24:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005c26:	6263      	str	r3, [r4, #36]	; 0x24
    hi2c->XferCount   = Size;
 8005c28:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
 8005c2c:	8563      	strh	r3, [r4, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005c2e:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005c30:	8523      	strh	r3, [r4, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005c32:	4b64      	ldr	r3, [pc, #400]	; (8005dc4 <HAL_I2C_Mem_Read+0x210>)
 8005c34:	62e3      	str	r3, [r4, #44]	; 0x2c
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005c36:	4629      	mov	r1, r5
 8005c38:	9601      	str	r6, [sp, #4]
 8005c3a:	9700      	str	r7, [sp, #0]
 8005c3c:	464b      	mov	r3, r9
 8005c3e:	4642      	mov	r2, r8
 8005c40:	4620      	mov	r0, r4
 8005c42:	f7ff fdf3 	bl	800582c <I2C_RequestMemoryRead>
 8005c46:	4605      	mov	r5, r0
 8005c48:	b108      	cbz	r0, 8005c4e <HAL_I2C_Mem_Read+0x9a>
      return HAL_ERROR;
 8005c4a:	2501      	movs	r5, #1
 8005c4c:	e7c2      	b.n	8005bd4 <HAL_I2C_Mem_Read+0x20>
    if (hi2c->XferSize == 0U)
 8005c4e:	8d22      	ldrh	r2, [r4, #40]	; 0x28
 8005c50:	6823      	ldr	r3, [r4, #0]
 8005c52:	b992      	cbnz	r2, 8005c7a <HAL_I2C_Mem_Read+0xc6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c54:	9002      	str	r0, [sp, #8]
 8005c56:	695a      	ldr	r2, [r3, #20]
 8005c58:	9202      	str	r2, [sp, #8]
 8005c5a:	699a      	ldr	r2, [r3, #24]
 8005c5c:	9202      	str	r2, [sp, #8]
 8005c5e:	9a02      	ldr	r2, [sp, #8]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c60:	681a      	ldr	r2, [r3, #0]
 8005c62:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c66:	601a      	str	r2, [r3, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8005c68:	2320      	movs	r3, #32
 8005c6a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c6e:	2300      	movs	r3, #0
 8005c70:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
    __HAL_UNLOCK(hi2c);
 8005c74:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    return HAL_OK;
 8005c78:	e7ac      	b.n	8005bd4 <HAL_I2C_Mem_Read+0x20>
    else if (hi2c->XferSize == 1U)
 8005c7a:	2a01      	cmp	r2, #1
 8005c7c:	d12c      	bne.n	8005cd8 <HAL_I2C_Mem_Read+0x124>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c7e:	681a      	ldr	r2, [r3, #0]
 8005c80:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c84:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c86:	9003      	str	r0, [sp, #12]
 8005c88:	695a      	ldr	r2, [r3, #20]
 8005c8a:	9203      	str	r2, [sp, #12]
 8005c8c:	699a      	ldr	r2, [r3, #24]
 8005c8e:	9203      	str	r2, [sp, #12]
 8005c90:	9a03      	ldr	r2, [sp, #12]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c92:	681a      	ldr	r2, [r3, #0]
 8005c94:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c98:	601a      	str	r2, [r3, #0]
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005c9a:	f8df 812c 	ldr.w	r8, [pc, #300]	; 8005dc8 <HAL_I2C_Mem_Read+0x214>
    while (hi2c->XferSize > 0U)
 8005c9e:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d0e1      	beq.n	8005c68 <HAL_I2C_Mem_Read+0xb4>
      if (hi2c->XferSize <= 3U)
 8005ca4:	2b03      	cmp	r3, #3
 8005ca6:	d86e      	bhi.n	8005d86 <HAL_I2C_Mem_Read+0x1d2>
        if (hi2c->XferSize == 1U)
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d12d      	bne.n	8005d08 <HAL_I2C_Mem_Read+0x154>
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005cac:	4632      	mov	r2, r6
 8005cae:	4639      	mov	r1, r7
 8005cb0:	4620      	mov	r0, r4
 8005cb2:	f7ff fce6 	bl	8005682 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005cb6:	2800      	cmp	r0, #0
 8005cb8:	d1c7      	bne.n	8005c4a <HAL_I2C_Mem_Read+0x96>
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005cba:	6822      	ldr	r2, [r4, #0]
 8005cbc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cbe:	6912      	ldr	r2, [r2, #16]
 8005cc0:	701a      	strb	r2, [r3, #0]
          hi2c->pBuffPtr++;
 8005cc2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005cc4:	3301      	adds	r3, #1
 8005cc6:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005cc8:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005cca:	3b01      	subs	r3, #1
 8005ccc:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005cce:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005cd0:	3b01      	subs	r3, #1
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	8563      	strh	r3, [r4, #42]	; 0x2a
 8005cd6:	e7e2      	b.n	8005c9e <HAL_I2C_Mem_Read+0xea>
    else if (hi2c->XferSize == 2U)
 8005cd8:	2a02      	cmp	r2, #2
 8005cda:	d10e      	bne.n	8005cfa <HAL_I2C_Mem_Read+0x146>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cea:	601a      	str	r2, [r3, #0]
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cec:	9004      	str	r0, [sp, #16]
 8005cee:	695a      	ldr	r2, [r3, #20]
 8005cf0:	9204      	str	r2, [sp, #16]
 8005cf2:	699b      	ldr	r3, [r3, #24]
 8005cf4:	9304      	str	r3, [sp, #16]
 8005cf6:	9b04      	ldr	r3, [sp, #16]
 8005cf8:	e7cf      	b.n	8005c9a <HAL_I2C_Mem_Read+0xe6>
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005cfa:	9005      	str	r0, [sp, #20]
 8005cfc:	695a      	ldr	r2, [r3, #20]
 8005cfe:	9205      	str	r2, [sp, #20]
 8005d00:	699b      	ldr	r3, [r3, #24]
 8005d02:	9305      	str	r3, [sp, #20]
 8005d04:	9b05      	ldr	r3, [sp, #20]
 8005d06:	e7c8      	b.n	8005c9a <HAL_I2C_Mem_Read+0xe6>
        else if (hi2c->XferSize == 2U)
 8005d08:	2b02      	cmp	r3, #2
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d0a:	9600      	str	r6, [sp, #0]
 8005d0c:	463b      	mov	r3, r7
 8005d0e:	f04f 0200 	mov.w	r2, #0
 8005d12:	4641      	mov	r1, r8
 8005d14:	4620      	mov	r0, r4
        else if (hi2c->XferSize == 2U)
 8005d16:	d119      	bne.n	8005d4c <HAL_I2C_Mem_Read+0x198>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d18:	f7ff fce2 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 8005d1c:	2800      	cmp	r0, #0
 8005d1e:	d194      	bne.n	8005c4a <HAL_I2C_Mem_Read+0x96>
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d20:	6823      	ldr	r3, [r4, #0]
 8005d22:	681a      	ldr	r2, [r3, #0]
 8005d24:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d28:	601a      	str	r2, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d2a:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d2c:	691b      	ldr	r3, [r3, #16]
 8005d2e:	7013      	strb	r3, [r2, #0]
          hi2c->pBuffPtr++;
 8005d30:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005d32:	1c53      	adds	r3, r2, #1
 8005d34:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005d36:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d38:	3b01      	subs	r3, #1
 8005d3a:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005d3c:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d3e:	3b01      	subs	r3, #1
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	8563      	strh	r3, [r4, #42]	; 0x2a
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d44:	6823      	ldr	r3, [r4, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d46:	691b      	ldr	r3, [r3, #16]
 8005d48:	7053      	strb	r3, [r2, #1]
 8005d4a:	e7ba      	b.n	8005cc2 <HAL_I2C_Mem_Read+0x10e>
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d4c:	f7ff fcc8 	bl	80056e0 <I2C_WaitOnFlagUntilTimeout>
 8005d50:	4602      	mov	r2, r0
 8005d52:	2800      	cmp	r0, #0
 8005d54:	f47f af79 	bne.w	8005c4a <HAL_I2C_Mem_Read+0x96>
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d58:	6823      	ldr	r3, [r4, #0]
 8005d5a:	6819      	ldr	r1, [r3, #0]
 8005d5c:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 8005d60:	6019      	str	r1, [r3, #0]
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d62:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8005d64:	691b      	ldr	r3, [r3, #16]
 8005d66:	700b      	strb	r3, [r1, #0]
          hi2c->pBuffPtr++;
 8005d68:	6a63      	ldr	r3, [r4, #36]	; 0x24
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d6a:	9600      	str	r6, [sp, #0]
          hi2c->pBuffPtr++;
 8005d6c:	3301      	adds	r3, #1
 8005d6e:	6263      	str	r3, [r4, #36]	; 0x24
          hi2c->XferSize--;
 8005d70:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005d72:	3b01      	subs	r3, #1
 8005d74:	8523      	strh	r3, [r4, #40]	; 0x28
          hi2c->XferCount--;
 8005d76:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005d78:	3b01      	subs	r3, #1
 8005d7a:	b29b      	uxth	r3, r3
 8005d7c:	8563      	strh	r3, [r4, #42]	; 0x2a
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005d7e:	4641      	mov	r1, r8
 8005d80:	463b      	mov	r3, r7
 8005d82:	4620      	mov	r0, r4
 8005d84:	e7c8      	b.n	8005d18 <HAL_I2C_Mem_Read+0x164>
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005d86:	4632      	mov	r2, r6
 8005d88:	4639      	mov	r1, r7
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	f7ff fc79 	bl	8005682 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005d90:	2800      	cmp	r0, #0
 8005d92:	f47f af5a 	bne.w	8005c4a <HAL_I2C_Mem_Read+0x96>
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005d96:	6822      	ldr	r2, [r4, #0]
 8005d98:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005d9a:	6912      	ldr	r2, [r2, #16]
 8005d9c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005d9e:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8005da0:	1c53      	adds	r3, r2, #1
 8005da2:	6263      	str	r3, [r4, #36]	; 0x24
        hi2c->XferSize--;
 8005da4:	8d23      	ldrh	r3, [r4, #40]	; 0x28
 8005da6:	3b01      	subs	r3, #1
 8005da8:	8523      	strh	r3, [r4, #40]	; 0x28
        hi2c->XferCount--;
 8005daa:	8d63      	ldrh	r3, [r4, #42]	; 0x2a
 8005dac:	3b01      	subs	r3, #1
 8005dae:	b29b      	uxth	r3, r3
 8005db0:	8563      	strh	r3, [r4, #42]	; 0x2a
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	6959      	ldr	r1, [r3, #20]
 8005db6:	0749      	lsls	r1, r1, #29
 8005db8:	f57f af71 	bpl.w	8005c9e <HAL_I2C_Mem_Read+0xea>
 8005dbc:	e7c3      	b.n	8005d46 <HAL_I2C_Mem_Read+0x192>
 8005dbe:	bf00      	nop
 8005dc0:	00100002 	.word	0x00100002
 8005dc4:	ffff0000 	.word	0xffff0000
 8005dc8:	00010004 	.word	0x00010004

08005dcc <HAL_I2C_GetState>:
  return hi2c->State;
 8005dcc:	f890 003d 	ldrb.w	r0, [r0, #61]	; 0x3d
}
 8005dd0:	4770      	bx	lr

08005dd2 <HAL_I2CEx_ConfigAnalogFilter>:
{
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005dd2:	f890 203d 	ldrb.w	r2, [r0, #61]	; 0x3d
 8005dd6:	b2d2      	uxtb	r2, r2
 8005dd8:	2a20      	cmp	r2, #32
{
 8005dda:	b510      	push	{r4, lr}
  if (hi2c->State == HAL_I2C_STATE_READY)
 8005ddc:	d116      	bne.n	8005e0c <HAL_I2CEx_ConfigAnalogFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dde:	2324      	movs	r3, #36	; 0x24
 8005de0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005de4:	6803      	ldr	r3, [r0, #0]
 8005de6:	681c      	ldr	r4, [r3, #0]
 8005de8:	f024 0401 	bic.w	r4, r4, #1
 8005dec:	601c      	str	r4, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->FLTR &= ~(I2C_FLTR_ANOFF);
 8005dee:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005df0:	f024 0410 	bic.w	r4, r4, #16
 8005df4:	625c      	str	r4, [r3, #36]	; 0x24

    /* Disable the analog filter */
    hi2c->Instance->FLTR |= AnalogFilter;
 8005df6:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8005df8:	4321      	orrs	r1, r4
 8005dfa:	6259      	str	r1, [r3, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005dfc:	6819      	ldr	r1, [r3, #0]
 8005dfe:	f041 0101 	orr.w	r1, r1, #1
 8005e02:	6019      	str	r1, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e04:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d

    return HAL_OK;
 8005e08:	2000      	movs	r0, #0
 8005e0a:	bd10      	pop	{r4, pc}
  }
  else
  {
    return HAL_BUSY;
 8005e0c:	2002      	movs	r0, #2
  }
}
 8005e0e:	bd10      	pop	{r4, pc}

08005e10 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between 0x00 and 0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8005e10:	b530      	push	{r4, r5, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005e12:	f890 403d 	ldrb.w	r4, [r0, #61]	; 0x3d
 8005e16:	b2e4      	uxtb	r4, r4
 8005e18:	2c20      	cmp	r4, #32
 8005e1a:	d116      	bne.n	8005e4a <HAL_I2CEx_ConfigDigitalFilter+0x3a>
  {
    hi2c->State = HAL_I2C_STATE_BUSY;

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8005e1c:	6802      	ldr	r2, [r0, #0]
    hi2c->State = HAL_I2C_STATE_BUSY;
 8005e1e:	2324      	movs	r3, #36	; 0x24
 8005e20:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    __HAL_I2C_DISABLE(hi2c);
 8005e24:	6815      	ldr	r5, [r2, #0]
 8005e26:	f025 0501 	bic.w	r5, r5, #1
 8005e2a:	6015      	str	r5, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->FLTR;
 8005e2c:	6a55      	ldr	r5, [r2, #36]	; 0x24

    /* Reset I2Cx DNF bit [3:0] */
    tmpreg &= ~(I2C_FLTR_DNF);
 8005e2e:	f64f 73f0 	movw	r3, #65520	; 0xfff0
 8005e32:	402b      	ands	r3, r5

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter;
 8005e34:	430b      	orrs	r3, r1

    /* Store the new register value */
    hi2c->Instance->FLTR = tmpreg;
 8005e36:	b29b      	uxth	r3, r3
 8005e38:	6253      	str	r3, [r2, #36]	; 0x24

    __HAL_I2C_ENABLE(hi2c);
 8005e3a:	6813      	ldr	r3, [r2, #0]
 8005e3c:	f043 0301 	orr.w	r3, r3, #1
 8005e40:	6013      	str	r3, [r2, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005e42:	f880 403d 	strb.w	r4, [r0, #61]	; 0x3d

    return HAL_OK;
 8005e46:	2000      	movs	r0, #0
 8005e48:	bd30      	pop	{r4, r5, pc}
  }
  else
  {
    return HAL_BUSY;
 8005e4a:	2002      	movs	r0, #2
  }
}
 8005e4c:	bd30      	pop	{r4, r5, pc}

08005e4e <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8005e4e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e52:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e54:	6804      	ldr	r4, [r0, #0]
 8005e56:	684f      	ldr	r7, [r1, #4]
 8005e58:	68e5      	ldr	r5, [r4, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e5a:	f8d1 e000 	ldr.w	lr, [r1]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8005e5e:	f8d1 9018 	ldr.w	r9, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e62:	3284      	adds	r2, #132	; 0x84
 8005e64:	18a3      	adds	r3, r4, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e66:	f10e 0601 	add.w	r6, lr, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8005e6a:	6858      	ldr	r0, [r3, #4]
 8005e6c:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8005e70:	6058      	str	r0, [r3, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e72:	68e0      	ldr	r0, [r4, #12]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e74:	f3c5 450b 	ubfx	r5, r5, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e78:	f3c0 400b 	ubfx	r0, r0, #16, #12
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8005e7c:	443d      	add	r5, r7
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8005e7e:	4430      	add	r0, r6
 8005e80:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005e84:	6058      	str	r0, [r3, #4]
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8005e86:	68e0      	ldr	r0, [r4, #12]
 8005e88:	68cd      	ldr	r5, [r1, #12]
 8005e8a:	f3c0 000a 	ubfx	r0, r0, #0, #11
 8005e8e:	4405      	add	r5, r0
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8005e90:	6898      	ldr	r0, [r3, #8]
 8005e92:	f400 4070 	and.w	r0, r0, #61440	; 0xf000
 8005e96:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8005e98:	68e6      	ldr	r6, [r4, #12]
 8005e9a:	6888      	ldr	r0, [r1, #8]
 8005e9c:	f3c6 060a 	ubfx	r6, r6, #0, #11
 8005ea0:	3001      	adds	r0, #1
 8005ea2:	4430      	add	r0, r6
 8005ea4:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005ea8:	6098      	str	r0, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005eaa:	6918      	ldr	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005eac:	690e      	ldr	r6, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8005eae:	f020 0007 	bic.w	r0, r0, #7
 8005eb2:	6118      	str	r0, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005eb4:	f04f 0c00 	mov.w	ip, #0
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8005eb8:	611e      	str	r6, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005eba:	699d      	ldr	r5, [r3, #24]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8005ebc:	f891 0032 	ldrb.w	r0, [r1, #50]	; 0x32
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8005ec0:	f891 8031 	ldrb.w	r8, [r1, #49]	; 0x31
  LTDC_LAYER(hltdc, LayerIdx)->DCCR &= ~(LTDC_LxDCCR_DCBLUE | LTDC_LxDCCR_DCGREEN | LTDC_LxDCCR_DCRED | LTDC_LxDCCR_DCALPHA);
 8005ec4:	f8c3 c018 	str.w	ip, [r3, #24]
  LTDC_LAYER(hltdc, LayerIdx)->DCCR = (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2);
 8005ec8:	f891 5030 	ldrb.w	r5, [r1, #48]	; 0x30
 8005ecc:	ea45 6509 	orr.w	r5, r5, r9, lsl #24
 8005ed0:	ea45 2508 	orr.w	r5, r5, r8, lsl #8
 8005ed4:	ea45 4500 	orr.w	r5, r5, r0, lsl #16
 8005ed8:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8005eda:	6958      	ldr	r0, [r3, #20]
 8005edc:	f020 00ff 	bic.w	r0, r0, #255	; 0xff
 8005ee0:	6158      	str	r0, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8005ee2:	6948      	ldr	r0, [r1, #20]
 8005ee4:	6158      	str	r0, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8005ee6:	69d8      	ldr	r0, [r3, #28]
 8005ee8:	f420 60e0 	bic.w	r0, r0, #1792	; 0x700
 8005eec:	f020 0007 	bic.w	r0, r0, #7
 8005ef0:	61d8      	str	r0, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8005ef2:	6a08      	ldr	r0, [r1, #32]
 8005ef4:	69cd      	ldr	r5, [r1, #28]
 8005ef6:	4305      	orrs	r5, r0
 8005ef8:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005efa:	6a98      	ldr	r0, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005efc:	6a48      	ldr	r0, [r1, #36]	; 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR &= ~(LTDC_LxCFBAR_CFBADD);
 8005efe:	f8c3 c028 	str.w	ip, [r3, #40]	; 0x28
  LTDC_LAYER(hltdc, LayerIdx)->CFBAR = (pLayerCfg->FBStartAdress);
 8005f02:	6298      	str	r0, [r3, #40]	; 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8005f04:	b31e      	cbz	r6, 8005f4e <LTDC_SetConfig+0x100>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8005f06:	2e01      	cmp	r6, #1
 8005f08:	d023      	beq.n	8005f52 <LTDC_SetConfig+0x104>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8005f0a:	1eb0      	subs	r0, r6, #2
 8005f0c:	2802      	cmp	r0, #2
 8005f0e:	d922      	bls.n	8005f56 <LTDC_SetConfig+0x108>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8005f10:	2e07      	cmp	r6, #7
  {
    tmp = 2U;
  }
  else
  {
    tmp = 1U;
 8005f12:	bf0c      	ite	eq
 8005f14:	2002      	moveq	r0, #2
 8005f16:	2001      	movne	r0, #1
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8005f18:	6add      	ldr	r5, [r3, #44]	; 0x2c
 8005f1a:	f005 25e0 	and.w	r5, r5, #3758153728	; 0xe000e000
 8005f1e:	62dd      	str	r5, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f20:	6a8d      	ldr	r5, [r1, #40]	; 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f22:	6ac9      	ldr	r1, [r1, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) | (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 3U));
 8005f24:	eba7 070e 	sub.w	r7, r7, lr
 8005f28:	4345      	muls	r5, r0
 8005f2a:	4378      	muls	r0, r7
 8005f2c:	3003      	adds	r0, #3
 8005f2e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8005f32:	62d8      	str	r0, [r3, #44]	; 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8005f34:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005f36:	f420 60ff 	bic.w	r0, r0, #2040	; 0x7f8
 8005f3a:	f020 0007 	bic.w	r0, r0, #7
 8005f3e:	6318      	str	r0, [r3, #48]	; 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8005f40:	6319      	str	r1, [r3, #48]	; 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8005f42:	58a3      	ldr	r3, [r4, r2]
 8005f44:	f043 0301 	orr.w	r3, r3, #1
 8005f48:	50a3      	str	r3, [r4, r2]
 8005f4a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmp = 4U;
 8005f4e:	2004      	movs	r0, #4
 8005f50:	e7e2      	b.n	8005f18 <LTDC_SetConfig+0xca>
    tmp = 3U;
 8005f52:	2003      	movs	r0, #3
 8005f54:	e7e0      	b.n	8005f18 <LTDC_SetConfig+0xca>
    tmp = 2U;
 8005f56:	2002      	movs	r0, #2
 8005f58:	e7de      	b.n	8005f18 <LTDC_SetConfig+0xca>
	...

08005f5c <HAL_LTDC_Init>:
{
 8005f5c:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8005f5e:	4604      	mov	r4, r0
 8005f60:	2800      	cmp	r0, #0
 8005f62:	d063      	beq.n	800602c <HAL_LTDC_Init+0xd0>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8005f64:	f890 30a1 	ldrb.w	r3, [r0, #161]	; 0xa1
 8005f68:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005f6c:	b91b      	cbnz	r3, 8005f76 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8005f6e:	f880 20a0 	strb.w	r2, [r0, #160]	; 0xa0
    HAL_LTDC_MspInit(hltdc);
 8005f72:	f001 fe9b 	bl	8007cac <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8005f76:	2302      	movs	r3, #2
 8005f78:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f7c:	6823      	ldr	r3, [r4, #0]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f7e:	68a0      	ldr	r0, [r4, #8]
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8005f80:	699a      	ldr	r2, [r3, #24]
 8005f82:	f022 4270 	bic.w	r2, r2, #4026531840	; 0xf0000000
 8005f86:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f88:	6862      	ldr	r2, [r4, #4]
 8005f8a:	6999      	ldr	r1, [r3, #24]
 8005f8c:	4302      	orrs	r2, r0
 8005f8e:	68e0      	ldr	r0, [r4, #12]
 8005f90:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8005f92:	6920      	ldr	r0, [r4, #16]
 8005f94:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8005f96:	430a      	orrs	r2, r1
 8005f98:	619a      	str	r2, [r3, #24]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005f9a:	689a      	ldr	r2, [r3, #8]
 8005f9c:	4924      	ldr	r1, [pc, #144]	; (8006030 <HAL_LTDC_Init+0xd4>)
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8005f9e:	6960      	ldr	r0, [r4, #20]
  hltdc->Instance->SSCR &= ~(LTDC_SSCR_VSH | LTDC_SSCR_HSW);
 8005fa0:	400a      	ands	r2, r1
 8005fa2:	609a      	str	r2, [r3, #8]
  hltdc->Instance->SSCR |= (tmp | hltdc->Init.VerticalSync);
 8005fa4:	689a      	ldr	r2, [r3, #8]
 8005fa6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005faa:	69a0      	ldr	r0, [r4, #24]
 8005fac:	4302      	orrs	r2, r0
 8005fae:	609a      	str	r2, [r3, #8]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fb0:	68da      	ldr	r2, [r3, #12]
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8005fb2:	69e0      	ldr	r0, [r4, #28]
  hltdc->Instance->BPCR &= ~(LTDC_BPCR_AVBP | LTDC_BPCR_AHBP);
 8005fb4:	400a      	ands	r2, r1
 8005fb6:	60da      	str	r2, [r3, #12]
  hltdc->Instance->BPCR |= (tmp | hltdc->Init.AccumulatedVBP);
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005fbe:	6a20      	ldr	r0, [r4, #32]
 8005fc0:	4302      	orrs	r2, r0
 8005fc2:	60da      	str	r2, [r3, #12]
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fc4:	691a      	ldr	r2, [r3, #16]
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8005fc6:	6a60      	ldr	r0, [r4, #36]	; 0x24
  hltdc->Instance->AWCR &= ~(LTDC_AWCR_AAH | LTDC_AWCR_AAW);
 8005fc8:	400a      	ands	r2, r1
 8005fca:	611a      	str	r2, [r3, #16]
  hltdc->Instance->AWCR |= (tmp | hltdc->Init.AccumulatedActiveH);
 8005fcc:	691a      	ldr	r2, [r3, #16]
 8005fce:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8005fd2:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8005fd4:	4302      	orrs	r2, r0
 8005fd6:	611a      	str	r2, [r3, #16]
  hltdc->Instance->TWCR &= ~(LTDC_TWCR_TOTALH | LTDC_TWCR_TOTALW);
 8005fd8:	695a      	ldr	r2, [r3, #20]
 8005fda:	4011      	ands	r1, r2
 8005fdc:	6159      	str	r1, [r3, #20]
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005fde:	695a      	ldr	r2, [r3, #20]
  tmp = (hltdc->Init.TotalWidth << 16U);
 8005fe0:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
  hltdc->Instance->TWCR |= (tmp | hltdc->Init.TotalHeigh);
 8005fe2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8005fe6:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8005fe8:	430a      	orrs	r2, r1
 8005fea:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005fec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8005fee:	f894 0036 	ldrb.w	r0, [r4, #54]	; 0x36
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8005ff2:	f894 5035 	ldrb.w	r5, [r4, #53]	; 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8005ff6:	f001 417f 	and.w	r1, r1, #4278190080	; 0xff000000
 8005ffa:	62d9      	str	r1, [r3, #44]	; 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8005ffc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8005ffe:	f894 2034 	ldrb.w	r2, [r4, #52]	; 0x34
 8006002:	430a      	orrs	r2, r1
 8006004:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8006008:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800600c:	62da      	str	r2, [r3, #44]	; 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800600e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006010:	f042 0206 	orr.w	r2, r2, #6
 8006014:	635a      	str	r2, [r3, #52]	; 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8006016:	699a      	ldr	r2, [r3, #24]
 8006018:	f042 0201 	orr.w	r2, r2, #1
 800601c:	619a      	str	r2, [r3, #24]
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800601e:	2000      	movs	r0, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 8006020:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8006022:	f8c4 00a4 	str.w	r0, [r4, #164]	; 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8006026:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
  return HAL_OK;
 800602a:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800602c:	2001      	movs	r0, #1
}
 800602e:	bd38      	pop	{r3, r4, r5, pc}
 8006030:	f000f800 	.word	0xf000f800

08006034 <HAL_LTDC_ErrorCallback>:
 8006034:	4770      	bx	lr

08006036 <HAL_LTDC_LineEventCallback>:
 8006036:	4770      	bx	lr

08006038 <HAL_LTDC_ReloadEventCallback>:
{
 8006038:	4770      	bx	lr

0800603a <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800603a:	6803      	ldr	r3, [r0, #0]
{
 800603c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800603e:	6b9e      	ldr	r6, [r3, #56]	; 0x38
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8006040:	6b5d      	ldr	r5, [r3, #52]	; 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006042:	0772      	lsls	r2, r6, #29
{
 8006044:	4604      	mov	r4, r0
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8006046:	d514      	bpl.n	8006072 <HAL_LTDC_IRQHandler+0x38>
 8006048:	0769      	lsls	r1, r5, #29
 800604a:	d512      	bpl.n	8006072 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800604c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800604e:	f022 0204 	bic.w	r2, r2, #4
 8006052:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8006054:	2204      	movs	r2, #4
 8006056:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8006058:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
 800605c:	f043 0301 	orr.w	r3, r3, #1
 8006060:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
    __HAL_UNLOCK(hltdc);
 8006064:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006066:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 800606a:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800606e:	f7ff ffe1 	bl	8006034 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8006072:	07b2      	lsls	r2, r6, #30
 8006074:	d516      	bpl.n	80060a4 <HAL_LTDC_IRQHandler+0x6a>
 8006076:	07ab      	lsls	r3, r5, #30
 8006078:	d514      	bpl.n	80060a4 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800607a:	6823      	ldr	r3, [r4, #0]
 800607c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800607e:	f022 0202 	bic.w	r2, r2, #2
 8006082:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8006084:	2202      	movs	r2, #2
 8006086:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8006088:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
 800608c:	4313      	orrs	r3, r2
 800608e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8006092:	2304      	movs	r3, #4
 8006094:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 8006098:	2300      	movs	r3, #0
 800609a:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800609e:	4620      	mov	r0, r4
 80060a0:	f7ff ffc8 	bl	8006034 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80060a4:	07f0      	lsls	r0, r6, #31
 80060a6:	d510      	bpl.n	80060ca <HAL_LTDC_IRQHandler+0x90>
 80060a8:	07e9      	lsls	r1, r5, #31
 80060aa:	d50e      	bpl.n	80060ca <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060b0:	f022 0201 	bic.w	r2, r2, #1
 80060b4:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 80060b6:	2201      	movs	r2, #1
 80060b8:	63da      	str	r2, [r3, #60]	; 0x3c
    __HAL_UNLOCK(hltdc);
 80060ba:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 80060bc:	f884 20a1 	strb.w	r2, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80060c0:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 80060c4:	4620      	mov	r0, r4
 80060c6:	f7ff ffb6 	bl	8006036 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 80060ca:	0732      	lsls	r2, r6, #28
 80060cc:	d511      	bpl.n	80060f2 <HAL_LTDC_IRQHandler+0xb8>
 80060ce:	072b      	lsls	r3, r5, #28
 80060d0:	d50f      	bpl.n	80060f2 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 80060d2:	6823      	ldr	r3, [r4, #0]
 80060d4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80060d6:	f022 0208 	bic.w	r2, r2, #8
 80060da:	635a      	str	r2, [r3, #52]	; 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 80060dc:	2208      	movs	r2, #8
 80060de:	63da      	str	r2, [r3, #60]	; 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 80060e0:	2301      	movs	r3, #1
 80060e2:	f884 30a1 	strb.w	r3, [r4, #161]	; 0xa1
    __HAL_UNLOCK(hltdc);
 80060e6:	2300      	movs	r3, #0
 80060e8:	f884 30a0 	strb.w	r3, [r4, #160]	; 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 80060ec:	4620      	mov	r0, r4
 80060ee:	f7ff ffa3 	bl	8006038 <HAL_LTDC_ReloadEventCallback>
 80060f2:	bd70      	pop	{r4, r5, r6, pc}

080060f4 <HAL_LTDC_ConfigLayer>:
{
 80060f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  __HAL_LOCK(hltdc);
 80060f6:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80060fa:	2b01      	cmp	r3, #1
{
 80060fc:	4606      	mov	r6, r0
 80060fe:	468e      	mov	lr, r1
 8006100:	4694      	mov	ip, r2
 8006102:	f04f 0002 	mov.w	r0, #2
  __HAL_LOCK(hltdc);
 8006106:	d01d      	beq.n	8006144 <HAL_LTDC_ConfigLayer+0x50>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006108:	2434      	movs	r4, #52	; 0x34
 800610a:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800610c:	f886 00a1 	strb.w	r0, [r6, #161]	; 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006110:	fb04 6402 	mla	r4, r4, r2, r6
 8006114:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
  __HAL_LOCK(hltdc);
 8006116:	2701      	movs	r7, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8006118:	3438      	adds	r4, #56	; 0x38
  __HAL_LOCK(hltdc);
 800611a:	f886 70a0 	strb.w	r7, [r6, #160]	; 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800611e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006120:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006122:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006124:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006126:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8006128:	682b      	ldr	r3, [r5, #0]
 800612a:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800612c:	4630      	mov	r0, r6
 800612e:	4662      	mov	r2, ip
 8006130:	4671      	mov	r1, lr
 8006132:	f7ff fe8c 	bl	8005e4e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006136:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8006138:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800613a:	625f      	str	r7, [r3, #36]	; 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800613c:	f886 70a1 	strb.w	r7, [r6, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006140:	f886 00a0 	strb.w	r0, [r6, #160]	; 0xa0
}
 8006144:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006146 <HAL_LTDC_ConfigColorKeying>:
  __HAL_LOCK(hltdc);
 8006146:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 800614a:	2b01      	cmp	r3, #1
{
 800614c:	b510      	push	{r4, lr}
 800614e:	f04f 0302 	mov.w	r3, #2
  __HAL_LOCK(hltdc);
 8006152:	d013      	beq.n	800617c <HAL_LTDC_ConfigColorKeying+0x36>
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 8006154:	6804      	ldr	r4, [r0, #0]
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8006156:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR &=  ~(LTDC_LxCKCR_CKBLUE | LTDC_LxCKCR_CKGREEN | LTDC_LxCKCR_CKRED);
 800615a:	eb04 12c2 	add.w	r2, r4, r2, lsl #7
 800615e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006162:	f003 437f 	and.w	r3, r3, #4278190080	; 0xff000000
 8006166:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800616a:	2301      	movs	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CKCR  = RGBValue;
 800616c:	f8c2 1090 	str.w	r1, [r2, #144]	; 0x90
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8006170:	6263      	str	r3, [r4, #36]	; 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8006172:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 8006176:	2300      	movs	r3, #0
 8006178:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 800617c:	4618      	mov	r0, r3
}
 800617e:	bd10      	pop	{r4, pc}

08006180 <HAL_LTDC_EnableColorKeying>:
  __HAL_LOCK(hltdc);
 8006180:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 8006184:	2b01      	cmp	r3, #1
 8006186:	f04f 0302 	mov.w	r3, #2
 800618a:	d00f      	beq.n	80061ac <HAL_LTDC_EnableColorKeying+0x2c>
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 800618c:	01c9      	lsls	r1, r1, #7
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800618e:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_COLKEN;
 8006192:	3184      	adds	r1, #132	; 0x84
 8006194:	6803      	ldr	r3, [r0, #0]
 8006196:	585a      	ldr	r2, [r3, r1]
 8006198:	f042 0202 	orr.w	r2, r2, #2
 800619c:	505a      	str	r2, [r3, r1]
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800619e:	2201      	movs	r2, #1
 80061a0:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_UNLOCK(hltdc);
 80061a2:	2300      	movs	r3, #0
  hltdc->State = HAL_LTDC_STATE_READY;
 80061a4:	f880 20a1 	strb.w	r2, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80061a8:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80061ac:	4618      	mov	r0, r3
}
 80061ae:	4770      	bx	lr

080061b0 <HAL_LTDC_EnableDither>:
  __HAL_LOCK(hltdc);
 80061b0:	f890 30a0 	ldrb.w	r3, [r0, #160]	; 0xa0
 80061b4:	2b01      	cmp	r3, #1
 80061b6:	f04f 0302 	mov.w	r3, #2
 80061ba:	d00c      	beq.n	80061d6 <HAL_LTDC_EnableDither+0x26>
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80061bc:	4a07      	ldr	r2, [pc, #28]	; (80061dc <HAL_LTDC_EnableDither+0x2c>)
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80061be:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  LTDC->GCR |= (uint32_t)LTDC_GCR_DEN;
 80061c2:	6993      	ldr	r3, [r2, #24]
 80061c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80061c8:	6193      	str	r3, [r2, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 80061ca:	2301      	movs	r3, #1
 80061cc:	f880 30a1 	strb.w	r3, [r0, #161]	; 0xa1
  __HAL_UNLOCK(hltdc);
 80061d0:	2300      	movs	r3, #0
 80061d2:	f880 30a0 	strb.w	r3, [r0, #160]	; 0xa0
  __HAL_LOCK(hltdc);
 80061d6:	4618      	mov	r0, r3
}
 80061d8:	4770      	bx	lr
 80061da:	bf00      	nop
 80061dc:	40016800 	.word	0x40016800

080061e0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 80061e0:	b537      	push	{r0, r1, r2, r4, r5, lr}
  uint32_t tickstart = 0U;

  __HAL_RCC_PWR_CLK_ENABLE();
 80061e2:	2300      	movs	r3, #0
 80061e4:	9301      	str	r3, [sp, #4]
 80061e6:	4b18      	ldr	r3, [pc, #96]	; (8006248 <HAL_PWREx_EnableOverDrive+0x68>)
  __HAL_PWR_OVERDRIVE_ENABLE();

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80061e8:	4c18      	ldr	r4, [pc, #96]	; (800624c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_RCC_PWR_CLK_ENABLE();
 80061ea:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80061ec:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80061f0:	641a      	str	r2, [r3, #64]	; 0x40
 80061f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061f4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80061f8:	9301      	str	r3, [sp, #4]
 80061fa:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_OVERDRIVE_ENABLE();
 80061fc:	4b14      	ldr	r3, [pc, #80]	; (8006250 <HAL_PWREx_EnableOverDrive+0x70>)
 80061fe:	2201      	movs	r2, #1
 8006200:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006202:	f7fe fcf3 	bl	8004bec <HAL_GetTick>
 8006206:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8006208:	6863      	ldr	r3, [r4, #4]
 800620a:	03da      	lsls	r2, r3, #15
 800620c:	d50b      	bpl.n	8006226 <HAL_PWREx_EnableOverDrive+0x46>
      return HAL_TIMEOUT;
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800620e:	4b11      	ldr	r3, [pc, #68]	; (8006254 <HAL_PWREx_EnableOverDrive+0x74>)

  /* Get tick */
  tickstart = HAL_GetTick();

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8006210:	4c0e      	ldr	r4, [pc, #56]	; (800624c <HAL_PWREx_EnableOverDrive+0x6c>)
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8006212:	2201      	movs	r2, #1
 8006214:	601a      	str	r2, [r3, #0]
  tickstart = HAL_GetTick();
 8006216:	f7fe fce9 	bl	8004bec <HAL_GetTick>
 800621a:	4605      	mov	r5, r0
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800621c:	6863      	ldr	r3, [r4, #4]
 800621e:	039b      	lsls	r3, r3, #14
 8006220:	d50a      	bpl.n	8006238 <HAL_PWREx_EnableOverDrive+0x58>
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
    {
      return HAL_TIMEOUT;
    }
  } 
  return HAL_OK;
 8006222:	2000      	movs	r0, #0
 8006224:	e006      	b.n	8006234 <HAL_PWREx_EnableOverDrive+0x54>
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006226:	f7fe fce1 	bl	8004bec <HAL_GetTick>
 800622a:	1b40      	subs	r0, r0, r5
 800622c:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006230:	d9ea      	bls.n	8006208 <HAL_PWREx_EnableOverDrive+0x28>
      return HAL_TIMEOUT;
 8006232:	2003      	movs	r0, #3
}
 8006234:	b003      	add	sp, #12
 8006236:	bd30      	pop	{r4, r5, pc}
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8006238:	f7fe fcd8 	bl	8004bec <HAL_GetTick>
 800623c:	1b40      	subs	r0, r0, r5
 800623e:	f5b0 7f7a 	cmp.w	r0, #1000	; 0x3e8
 8006242:	d9eb      	bls.n	800621c <HAL_PWREx_EnableOverDrive+0x3c>
 8006244:	e7f5      	b.n	8006232 <HAL_PWREx_EnableOverDrive+0x52>
 8006246:	bf00      	nop
 8006248:	40023800 	.word	0x40023800
 800624c:	40007000 	.word	0x40007000
 8006250:	420e0040 	.word	0x420e0040
 8006254:	420e0044 	.word	0x420e0044

08006258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006258:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800625c:	4604      	mov	r4, r0
 800625e:	b918      	cbnz	r0, 8006268 <HAL_RCC_OscConfig+0x10>
  {
    return HAL_ERROR;
 8006260:	2001      	movs	r0, #1
    {
      return HAL_ERROR;
    }
  }
  return HAL_OK;
}
 8006262:	b002      	add	sp, #8
 8006264:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006268:	6803      	ldr	r3, [r0, #0]
 800626a:	07dd      	lsls	r5, r3, #31
 800626c:	d410      	bmi.n	8006290 <HAL_RCC_OscConfig+0x38>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800626e:	6823      	ldr	r3, [r4, #0]
 8006270:	0798      	lsls	r0, r3, #30
 8006272:	d458      	bmi.n	8006326 <HAL_RCC_OscConfig+0xce>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006274:	6823      	ldr	r3, [r4, #0]
 8006276:	071a      	lsls	r2, r3, #28
 8006278:	f100 809a 	bmi.w	80063b0 <HAL_RCC_OscConfig+0x158>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800627c:	6823      	ldr	r3, [r4, #0]
 800627e:	075b      	lsls	r3, r3, #29
 8006280:	f100 80b8 	bmi.w	80063f4 <HAL_RCC_OscConfig+0x19c>
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006284:	69a2      	ldr	r2, [r4, #24]
 8006286:	2a00      	cmp	r2, #0
 8006288:	f040 8119 	bne.w	80064be <HAL_RCC_OscConfig+0x266>
  return HAL_OK;
 800628c:	2000      	movs	r0, #0
 800628e:	e7e8      	b.n	8006262 <HAL_RCC_OscConfig+0xa>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8006290:	4ba6      	ldr	r3, [pc, #664]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 8006292:	689a      	ldr	r2, [r3, #8]
 8006294:	f002 020c 	and.w	r2, r2, #12
 8006298:	2a04      	cmp	r2, #4
 800629a:	d007      	beq.n	80062ac <HAL_RCC_OscConfig+0x54>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800629c:	689a      	ldr	r2, [r3, #8]
 800629e:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80062a2:	2a08      	cmp	r2, #8
 80062a4:	d10a      	bne.n	80062bc <HAL_RCC_OscConfig+0x64>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80062a6:	685b      	ldr	r3, [r3, #4]
 80062a8:	0259      	lsls	r1, r3, #9
 80062aa:	d507      	bpl.n	80062bc <HAL_RCC_OscConfig+0x64>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80062ac:	4b9f      	ldr	r3, [pc, #636]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	039a      	lsls	r2, r3, #14
 80062b2:	d5dc      	bpl.n	800626e <HAL_RCC_OscConfig+0x16>
 80062b4:	6863      	ldr	r3, [r4, #4]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d1d9      	bne.n	800626e <HAL_RCC_OscConfig+0x16>
 80062ba:	e7d1      	b.n	8006260 <HAL_RCC_OscConfig+0x8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062bc:	6863      	ldr	r3, [r4, #4]
 80062be:	4d9b      	ldr	r5, [pc, #620]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 80062c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80062c4:	d111      	bne.n	80062ea <HAL_RCC_OscConfig+0x92>
 80062c6:	682b      	ldr	r3, [r5, #0]
 80062c8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80062cc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 80062ce:	f7fe fc8d 	bl	8004bec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d2:	4d96      	ldr	r5, [pc, #600]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 80062d4:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80062d6:	682b      	ldr	r3, [r5, #0]
 80062d8:	039b      	lsls	r3, r3, #14
 80062da:	d4c8      	bmi.n	800626e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80062dc:	f7fe fc86 	bl	8004bec <HAL_GetTick>
 80062e0:	1b80      	subs	r0, r0, r6
 80062e2:	2864      	cmp	r0, #100	; 0x64
 80062e4:	d9f7      	bls.n	80062d6 <HAL_RCC_OscConfig+0x7e>
            return HAL_TIMEOUT;
 80062e6:	2003      	movs	r0, #3
 80062e8:	e7bb      	b.n	8006262 <HAL_RCC_OscConfig+0xa>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80062ea:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80062ee:	d104      	bne.n	80062fa <HAL_RCC_OscConfig+0xa2>
 80062f0:	682b      	ldr	r3, [r5, #0]
 80062f2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80062f6:	602b      	str	r3, [r5, #0]
 80062f8:	e7e5      	b.n	80062c6 <HAL_RCC_OscConfig+0x6e>
 80062fa:	682a      	ldr	r2, [r5, #0]
 80062fc:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006300:	602a      	str	r2, [r5, #0]
 8006302:	682a      	ldr	r2, [r5, #0]
 8006304:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006308:	602a      	str	r2, [r5, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800630a:	2b00      	cmp	r3, #0
 800630c:	d1df      	bne.n	80062ce <HAL_RCC_OscConfig+0x76>
        tickstart = HAL_GetTick();
 800630e:	f7fe fc6d 	bl	8004bec <HAL_GetTick>
 8006312:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006314:	682b      	ldr	r3, [r5, #0]
 8006316:	039f      	lsls	r7, r3, #14
 8006318:	d5a9      	bpl.n	800626e <HAL_RCC_OscConfig+0x16>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800631a:	f7fe fc67 	bl	8004bec <HAL_GetTick>
 800631e:	1b80      	subs	r0, r0, r6
 8006320:	2864      	cmp	r0, #100	; 0x64
 8006322:	d9f7      	bls.n	8006314 <HAL_RCC_OscConfig+0xbc>
 8006324:	e7df      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006326:	4b81      	ldr	r3, [pc, #516]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 8006328:	689a      	ldr	r2, [r3, #8]
 800632a:	f012 0f0c 	tst.w	r2, #12
 800632e:	d007      	beq.n	8006340 <HAL_RCC_OscConfig+0xe8>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006330:	689a      	ldr	r2, [r3, #8]
 8006332:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8006336:	2a08      	cmp	r2, #8
 8006338:	d111      	bne.n	800635e <HAL_RCC_OscConfig+0x106>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800633a:	685b      	ldr	r3, [r3, #4]
 800633c:	025e      	lsls	r6, r3, #9
 800633e:	d40e      	bmi.n	800635e <HAL_RCC_OscConfig+0x106>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006340:	4b7a      	ldr	r3, [pc, #488]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 8006342:	681a      	ldr	r2, [r3, #0]
 8006344:	0795      	lsls	r5, r2, #30
 8006346:	d502      	bpl.n	800634e <HAL_RCC_OscConfig+0xf6>
 8006348:	68e2      	ldr	r2, [r4, #12]
 800634a:	2a01      	cmp	r2, #1
 800634c:	d188      	bne.n	8006260 <HAL_RCC_OscConfig+0x8>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	6921      	ldr	r1, [r4, #16]
 8006352:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 8006356:	ea42 02c1 	orr.w	r2, r2, r1, lsl #3
 800635a:	601a      	str	r2, [r3, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800635c:	e78a      	b.n	8006274 <HAL_RCC_OscConfig+0x1c>
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800635e:	68e2      	ldr	r2, [r4, #12]
 8006360:	4b73      	ldr	r3, [pc, #460]	; (8006530 <HAL_RCC_OscConfig+0x2d8>)
 8006362:	b1b2      	cbz	r2, 8006392 <HAL_RCC_OscConfig+0x13a>
        __HAL_RCC_HSI_ENABLE();
 8006364:	2201      	movs	r2, #1
 8006366:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006368:	f7fe fc40 	bl	8004bec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800636c:	4d6f      	ldr	r5, [pc, #444]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800636e:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006370:	682b      	ldr	r3, [r5, #0]
 8006372:	0798      	lsls	r0, r3, #30
 8006374:	d507      	bpl.n	8006386 <HAL_RCC_OscConfig+0x12e>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006376:	682b      	ldr	r3, [r5, #0]
 8006378:	6922      	ldr	r2, [r4, #16]
 800637a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800637e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8006382:	602b      	str	r3, [r5, #0]
 8006384:	e776      	b.n	8006274 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006386:	f7fe fc31 	bl	8004bec <HAL_GetTick>
 800638a:	1b80      	subs	r0, r0, r6
 800638c:	2802      	cmp	r0, #2
 800638e:	d9ef      	bls.n	8006370 <HAL_RCC_OscConfig+0x118>
 8006390:	e7a9      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
        __HAL_RCC_HSI_DISABLE();
 8006392:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8006394:	f7fe fc2a 	bl	8004bec <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006398:	4d64      	ldr	r5, [pc, #400]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
        tickstart = HAL_GetTick();
 800639a:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800639c:	682b      	ldr	r3, [r5, #0]
 800639e:	0799      	lsls	r1, r3, #30
 80063a0:	f57f af68 	bpl.w	8006274 <HAL_RCC_OscConfig+0x1c>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80063a4:	f7fe fc22 	bl	8004bec <HAL_GetTick>
 80063a8:	1b80      	subs	r0, r0, r6
 80063aa:	2802      	cmp	r0, #2
 80063ac:	d9f6      	bls.n	800639c <HAL_RCC_OscConfig+0x144>
 80063ae:	e79a      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80063b0:	6962      	ldr	r2, [r4, #20]
 80063b2:	4b60      	ldr	r3, [pc, #384]	; (8006534 <HAL_RCC_OscConfig+0x2dc>)
 80063b4:	b17a      	cbz	r2, 80063d6 <HAL_RCC_OscConfig+0x17e>
      __HAL_RCC_LSI_ENABLE();
 80063b6:	2201      	movs	r2, #1
 80063b8:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80063ba:	f7fe fc17 	bl	8004bec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063be:	4d5b      	ldr	r5, [pc, #364]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80063c0:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80063c2:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80063c4:	079f      	lsls	r7, r3, #30
 80063c6:	f53f af59 	bmi.w	800627c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063ca:	f7fe fc0f 	bl	8004bec <HAL_GetTick>
 80063ce:	1b80      	subs	r0, r0, r6
 80063d0:	2802      	cmp	r0, #2
 80063d2:	d9f6      	bls.n	80063c2 <HAL_RCC_OscConfig+0x16a>
 80063d4:	e787      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
      __HAL_RCC_LSI_DISABLE();
 80063d6:	601a      	str	r2, [r3, #0]
      tickstart = HAL_GetTick();
 80063d8:	f7fe fc08 	bl	8004bec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063dc:	4d53      	ldr	r5, [pc, #332]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 80063de:	4606      	mov	r6, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80063e0:	6f6b      	ldr	r3, [r5, #116]	; 0x74
 80063e2:	0798      	lsls	r0, r3, #30
 80063e4:	f57f af4a 	bpl.w	800627c <HAL_RCC_OscConfig+0x24>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80063e8:	f7fe fc00 	bl	8004bec <HAL_GetTick>
 80063ec:	1b80      	subs	r0, r0, r6
 80063ee:	2802      	cmp	r0, #2
 80063f0:	d9f6      	bls.n	80063e0 <HAL_RCC_OscConfig+0x188>
 80063f2:	e778      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80063f4:	4b4d      	ldr	r3, [pc, #308]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 80063f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80063f8:	f012 5280 	ands.w	r2, r2, #268435456	; 0x10000000
 80063fc:	d128      	bne.n	8006450 <HAL_RCC_OscConfig+0x1f8>
      __HAL_RCC_PWR_CLK_ENABLE();
 80063fe:	9201      	str	r2, [sp, #4]
 8006400:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006402:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8006406:	641a      	str	r2, [r3, #64]	; 0x40
 8006408:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800640a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800640e:	9301      	str	r3, [sp, #4]
 8006410:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8006412:	2601      	movs	r6, #1
    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006414:	4d48      	ldr	r5, [pc, #288]	; (8006538 <HAL_RCC_OscConfig+0x2e0>)
 8006416:	682b      	ldr	r3, [r5, #0]
 8006418:	05d9      	lsls	r1, r3, #23
 800641a:	d51b      	bpl.n	8006454 <HAL_RCC_OscConfig+0x1fc>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800641c:	68a3      	ldr	r3, [r4, #8]
 800641e:	4d43      	ldr	r5, [pc, #268]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 8006420:	2b01      	cmp	r3, #1
 8006422:	d127      	bne.n	8006474 <HAL_RCC_OscConfig+0x21c>
 8006424:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006426:	f043 0301 	orr.w	r3, r3, #1
 800642a:	672b      	str	r3, [r5, #112]	; 0x70
      tickstart = HAL_GetTick();
 800642c:	f7fe fbde 	bl	8004bec <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006430:	4d3e      	ldr	r5, [pc, #248]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
      tickstart = HAL_GetTick();
 8006432:	4607      	mov	r7, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006434:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006438:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800643a:	079b      	lsls	r3, r3, #30
 800643c:	d539      	bpl.n	80064b2 <HAL_RCC_OscConfig+0x25a>
    if(pwrclkchanged == SET)
 800643e:	2e00      	cmp	r6, #0
 8006440:	f43f af20 	beq.w	8006284 <HAL_RCC_OscConfig+0x2c>
      __HAL_RCC_PWR_CLK_DISABLE();
 8006444:	4a39      	ldr	r2, [pc, #228]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 8006446:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8006448:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800644c:	6413      	str	r3, [r2, #64]	; 0x40
 800644e:	e719      	b.n	8006284 <HAL_RCC_OscConfig+0x2c>
    FlagStatus       pwrclkchanged = RESET;
 8006450:	2600      	movs	r6, #0
 8006452:	e7df      	b.n	8006414 <HAL_RCC_OscConfig+0x1bc>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006454:	682b      	ldr	r3, [r5, #0]
 8006456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800645a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800645c:	f7fe fbc6 	bl	8004bec <HAL_GetTick>
 8006460:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006462:	682b      	ldr	r3, [r5, #0]
 8006464:	05da      	lsls	r2, r3, #23
 8006466:	d4d9      	bmi.n	800641c <HAL_RCC_OscConfig+0x1c4>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006468:	f7fe fbc0 	bl	8004bec <HAL_GetTick>
 800646c:	1bc0      	subs	r0, r0, r7
 800646e:	2802      	cmp	r0, #2
 8006470:	d9f7      	bls.n	8006462 <HAL_RCC_OscConfig+0x20a>
 8006472:	e738      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006474:	2b05      	cmp	r3, #5
 8006476:	d104      	bne.n	8006482 <HAL_RCC_OscConfig+0x22a>
 8006478:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 800647a:	f043 0304 	orr.w	r3, r3, #4
 800647e:	672b      	str	r3, [r5, #112]	; 0x70
 8006480:	e7d0      	b.n	8006424 <HAL_RCC_OscConfig+0x1cc>
 8006482:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 8006484:	f022 0201 	bic.w	r2, r2, #1
 8006488:	672a      	str	r2, [r5, #112]	; 0x70
 800648a:	6f2a      	ldr	r2, [r5, #112]	; 0x70
 800648c:	f022 0204 	bic.w	r2, r2, #4
 8006490:	672a      	str	r2, [r5, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006492:	2b00      	cmp	r3, #0
 8006494:	d1ca      	bne.n	800642c <HAL_RCC_OscConfig+0x1d4>
      tickstart = HAL_GetTick();
 8006496:	f7fe fba9 	bl	8004bec <HAL_GetTick>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800649a:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 800649e:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80064a0:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 80064a2:	0798      	lsls	r0, r3, #30
 80064a4:	d5cb      	bpl.n	800643e <HAL_RCC_OscConfig+0x1e6>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064a6:	f7fe fba1 	bl	8004bec <HAL_GetTick>
 80064aa:	1bc0      	subs	r0, r0, r7
 80064ac:	4540      	cmp	r0, r8
 80064ae:	d9f7      	bls.n	80064a0 <HAL_RCC_OscConfig+0x248>
 80064b0:	e719      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80064b2:	f7fe fb9b 	bl	8004bec <HAL_GetTick>
 80064b6:	1bc0      	subs	r0, r0, r7
 80064b8:	4540      	cmp	r0, r8
 80064ba:	d9bd      	bls.n	8006438 <HAL_RCC_OscConfig+0x1e0>
 80064bc:	e713      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80064be:	4d1b      	ldr	r5, [pc, #108]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
 80064c0:	68ab      	ldr	r3, [r5, #8]
 80064c2:	f003 030c 	and.w	r3, r3, #12
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	f43f aeca 	beq.w	8006260 <HAL_RCC_OscConfig+0x8>
 80064cc:	4e1b      	ldr	r6, [pc, #108]	; (800653c <HAL_RCC_OscConfig+0x2e4>)
 80064ce:	2300      	movs	r3, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d0:	2a02      	cmp	r2, #2
        __HAL_RCC_PLL_DISABLE();
 80064d2:	6033      	str	r3, [r6, #0]
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80064d4:	d134      	bne.n	8006540 <HAL_RCC_OscConfig+0x2e8>
        tickstart = HAL_GetTick();
 80064d6:	f7fe fb89 	bl	8004bec <HAL_GetTick>
 80064da:	4607      	mov	r7, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80064dc:	682b      	ldr	r3, [r5, #0]
 80064de:	0199      	lsls	r1, r3, #6
 80064e0:	d41e      	bmi.n	8006520 <HAL_RCC_OscConfig+0x2c8>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064e2:	6a22      	ldr	r2, [r4, #32]
 80064e4:	69e3      	ldr	r3, [r4, #28]
 80064e6:	4313      	orrs	r3, r2
 80064e8:	6a62      	ldr	r2, [r4, #36]	; 0x24
 80064ea:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 80064ee:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 80064f0:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 80064f4:	6aa2      	ldr	r2, [r4, #40]	; 0x28
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80064f6:	4c0d      	ldr	r4, [pc, #52]	; (800652c <HAL_RCC_OscConfig+0x2d4>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80064f8:	0852      	lsrs	r2, r2, #1
 80064fa:	3a01      	subs	r2, #1
 80064fc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8006500:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8006502:	2301      	movs	r3, #1
 8006504:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8006506:	f7fe fb71 	bl	8004bec <HAL_GetTick>
 800650a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800650c:	6823      	ldr	r3, [r4, #0]
 800650e:	019a      	lsls	r2, r3, #6
 8006510:	f53f aebc 	bmi.w	800628c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006514:	f7fe fb6a 	bl	8004bec <HAL_GetTick>
 8006518:	1b40      	subs	r0, r0, r5
 800651a:	2802      	cmp	r0, #2
 800651c:	d9f6      	bls.n	800650c <HAL_RCC_OscConfig+0x2b4>
 800651e:	e6e2      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006520:	f7fe fb64 	bl	8004bec <HAL_GetTick>
 8006524:	1bc0      	subs	r0, r0, r7
 8006526:	2802      	cmp	r0, #2
 8006528:	d9d8      	bls.n	80064dc <HAL_RCC_OscConfig+0x284>
 800652a:	e6dc      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
 800652c:	40023800 	.word	0x40023800
 8006530:	42470000 	.word	0x42470000
 8006534:	42470e80 	.word	0x42470e80
 8006538:	40007000 	.word	0x40007000
 800653c:	42470060 	.word	0x42470060
        tickstart = HAL_GetTick();
 8006540:	f7fe fb54 	bl	8004bec <HAL_GetTick>
 8006544:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006546:	682b      	ldr	r3, [r5, #0]
 8006548:	019b      	lsls	r3, r3, #6
 800654a:	f57f ae9f 	bpl.w	800628c <HAL_RCC_OscConfig+0x34>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800654e:	f7fe fb4d 	bl	8004bec <HAL_GetTick>
 8006552:	1b00      	subs	r0, r0, r4
 8006554:	2802      	cmp	r0, #2
 8006556:	d9f6      	bls.n	8006546 <HAL_RCC_OscConfig+0x2ee>
 8006558:	e6c5      	b.n	80062e6 <HAL_RCC_OscConfig+0x8e>
 800655a:	bf00      	nop

0800655c <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800655c:	4913      	ldr	r1, [pc, #76]	; (80065ac <HAL_RCC_GetSysClockFreq+0x50>)
{
 800655e:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006560:	688b      	ldr	r3, [r1, #8]
 8006562:	f003 030c 	and.w	r3, r3, #12
 8006566:	2b04      	cmp	r3, #4
 8006568:	d003      	beq.n	8006572 <HAL_RCC_GetSysClockFreq+0x16>
 800656a:	2b08      	cmp	r3, #8
 800656c:	d003      	beq.n	8006576 <HAL_RCC_GetSysClockFreq+0x1a>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800656e:	4810      	ldr	r0, [pc, #64]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x54>)
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8006570:	bd08      	pop	{r3, pc}
      sysclockfreq = HSE_VALUE;
 8006572:	4810      	ldr	r0, [pc, #64]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x58>)
 8006574:	bd08      	pop	{r3, pc}
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006576:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006578:	684b      	ldr	r3, [r1, #4]
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800657a:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800657c:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006580:	bf14      	ite	ne
 8006582:	480c      	ldrne	r0, [pc, #48]	; (80065b4 <HAL_RCC_GetSysClockFreq+0x58>)
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006584:	480a      	ldreq	r0, [pc, #40]	; (80065b0 <HAL_RCC_GetSysClockFreq+0x54>)
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006586:	f3c1 1188 	ubfx	r1, r1, #6, #9
 800658a:	bf18      	it	ne
 800658c:	2300      	movne	r3, #0
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800658e:	f002 023f 	and.w	r2, r2, #63	; 0x3f
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006592:	fba1 0100 	umull	r0, r1, r1, r0
 8006596:	f7fc fdad 	bl	80030f4 <__aeabi_uldivmod>
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800659a:	4b04      	ldr	r3, [pc, #16]	; (80065ac <HAL_RCC_GetSysClockFreq+0x50>)
 800659c:	685b      	ldr	r3, [r3, #4]
 800659e:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80065a2:	3301      	adds	r3, #1
 80065a4:	005b      	lsls	r3, r3, #1
      sysclockfreq = pllvco/pllp;
 80065a6:	fbb0 f0f3 	udiv	r0, r0, r3
 80065aa:	bd08      	pop	{r3, pc}
 80065ac:	40023800 	.word	0x40023800
 80065b0:	00f42400 	.word	0x00f42400
 80065b4:	007a1200 	.word	0x007a1200

080065b8 <HAL_RCC_ClockConfig>:
{
 80065b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80065bc:	460d      	mov	r5, r1
  if(RCC_ClkInitStruct == NULL)
 80065be:	4604      	mov	r4, r0
 80065c0:	b910      	cbnz	r0, 80065c8 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 80065c2:	2001      	movs	r0, #1
 80065c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80065c8:	4b44      	ldr	r3, [pc, #272]	; (80066dc <HAL_RCC_ClockConfig+0x124>)
 80065ca:	681a      	ldr	r2, [r3, #0]
 80065cc:	f002 020f 	and.w	r2, r2, #15
 80065d0:	428a      	cmp	r2, r1
 80065d2:	d328      	bcc.n	8006626 <HAL_RCC_ClockConfig+0x6e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80065d4:	6821      	ldr	r1, [r4, #0]
 80065d6:	078f      	lsls	r7, r1, #30
 80065d8:	d42d      	bmi.n	8006636 <HAL_RCC_ClockConfig+0x7e>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80065da:	07c8      	lsls	r0, r1, #31
 80065dc:	d440      	bmi.n	8006660 <HAL_RCC_ClockConfig+0xa8>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80065de:	4b3f      	ldr	r3, [pc, #252]	; (80066dc <HAL_RCC_ClockConfig+0x124>)
 80065e0:	681a      	ldr	r2, [r3, #0]
 80065e2:	f002 020f 	and.w	r2, r2, #15
 80065e6:	4295      	cmp	r5, r2
 80065e8:	d366      	bcc.n	80066b8 <HAL_RCC_ClockConfig+0x100>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80065ea:	6822      	ldr	r2, [r4, #0]
 80065ec:	0751      	lsls	r1, r2, #29
 80065ee:	d46c      	bmi.n	80066ca <HAL_RCC_ClockConfig+0x112>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80065f0:	0713      	lsls	r3, r2, #28
 80065f2:	d507      	bpl.n	8006604 <HAL_RCC_ClockConfig+0x4c>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80065f4:	4a3a      	ldr	r2, [pc, #232]	; (80066e0 <HAL_RCC_ClockConfig+0x128>)
 80065f6:	6921      	ldr	r1, [r4, #16]
 80065f8:	6893      	ldr	r3, [r2, #8]
 80065fa:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 80065fe:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8006602:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006604:	f7ff ffaa 	bl	800655c <HAL_RCC_GetSysClockFreq>
 8006608:	4b35      	ldr	r3, [pc, #212]	; (80066e0 <HAL_RCC_ClockConfig+0x128>)
 800660a:	4a36      	ldr	r2, [pc, #216]	; (80066e4 <HAL_RCC_ClockConfig+0x12c>)
 800660c:	689b      	ldr	r3, [r3, #8]
 800660e:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8006612:	5cd3      	ldrb	r3, [r2, r3]
 8006614:	40d8      	lsrs	r0, r3
 8006616:	4b34      	ldr	r3, [pc, #208]	; (80066e8 <HAL_RCC_ClockConfig+0x130>)
 8006618:	6018      	str	r0, [r3, #0]
  HAL_InitTick (TICK_INT_PRIORITY);
 800661a:	2000      	movs	r0, #0
 800661c:	f7fe fa9c 	bl	8004b58 <HAL_InitTick>
  return HAL_OK;
 8006620:	2000      	movs	r0, #0
 8006622:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006626:	b2ca      	uxtb	r2, r1
 8006628:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	f003 030f 	and.w	r3, r3, #15
 8006630:	4299      	cmp	r1, r3
 8006632:	d1c6      	bne.n	80065c2 <HAL_RCC_ClockConfig+0xa>
 8006634:	e7ce      	b.n	80065d4 <HAL_RCC_ClockConfig+0x1c>
 8006636:	4b2a      	ldr	r3, [pc, #168]	; (80066e0 <HAL_RCC_ClockConfig+0x128>)
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006638:	f011 0f04 	tst.w	r1, #4
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800663c:	bf1e      	ittt	ne
 800663e:	689a      	ldrne	r2, [r3, #8]
 8006640:	f442 52e0 	orrne.w	r2, r2, #7168	; 0x1c00
 8006644:	609a      	strne	r2, [r3, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006646:	070e      	lsls	r6, r1, #28
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006648:	bf42      	ittt	mi
 800664a:	689a      	ldrmi	r2, [r3, #8]
 800664c:	f442 4260 	orrmi.w	r2, r2, #57344	; 0xe000
 8006650:	609a      	strmi	r2, [r3, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006652:	689a      	ldr	r2, [r3, #8]
 8006654:	68a0      	ldr	r0, [r4, #8]
 8006656:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 800665a:	4302      	orrs	r2, r0
 800665c:	609a      	str	r2, [r3, #8]
 800665e:	e7bc      	b.n	80065da <HAL_RCC_ClockConfig+0x22>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006660:	6862      	ldr	r2, [r4, #4]
 8006662:	4b1f      	ldr	r3, [pc, #124]	; (80066e0 <HAL_RCC_ClockConfig+0x128>)
 8006664:	2a01      	cmp	r2, #1
 8006666:	d11d      	bne.n	80066a4 <HAL_RCC_ClockConfig+0xec>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	f413 3f00 	tst.w	r3, #131072	; 0x20000
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800666e:	d0a8      	beq.n	80065c2 <HAL_RCC_ClockConfig+0xa>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006670:	4e1b      	ldr	r6, [pc, #108]	; (80066e0 <HAL_RCC_ClockConfig+0x128>)
 8006672:	68b3      	ldr	r3, [r6, #8]
 8006674:	f023 0303 	bic.w	r3, r3, #3
 8006678:	4313      	orrs	r3, r2
 800667a:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 800667c:	f7fe fab6 	bl	8004bec <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006680:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8006684:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006686:	68b3      	ldr	r3, [r6, #8]
 8006688:	6862      	ldr	r2, [r4, #4]
 800668a:	f003 030c 	and.w	r3, r3, #12
 800668e:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006692:	d0a4      	beq.n	80065de <HAL_RCC_ClockConfig+0x26>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006694:	f7fe faaa 	bl	8004bec <HAL_GetTick>
 8006698:	1bc0      	subs	r0, r0, r7
 800669a:	4540      	cmp	r0, r8
 800669c:	d9f3      	bls.n	8006686 <HAL_RCC_ClockConfig+0xce>
        return HAL_TIMEOUT;
 800669e:	2003      	movs	r0, #3
}
 80066a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066a4:	1e91      	subs	r1, r2, #2
 80066a6:	2901      	cmp	r1, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066a8:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80066aa:	d802      	bhi.n	80066b2 <HAL_RCC_ClockConfig+0xfa>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80066ac:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
 80066b0:	e7dd      	b.n	800666e <HAL_RCC_ClockConfig+0xb6>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80066b2:	f013 0f02 	tst.w	r3, #2
 80066b6:	e7da      	b.n	800666e <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80066b8:	b2ea      	uxtb	r2, r5
 80066ba:	701a      	strb	r2, [r3, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	f003 030f 	and.w	r3, r3, #15
 80066c2:	429d      	cmp	r5, r3
 80066c4:	f47f af7d 	bne.w	80065c2 <HAL_RCC_ClockConfig+0xa>
 80066c8:	e78f      	b.n	80065ea <HAL_RCC_ClockConfig+0x32>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80066ca:	4905      	ldr	r1, [pc, #20]	; (80066e0 <HAL_RCC_ClockConfig+0x128>)
 80066cc:	68e0      	ldr	r0, [r4, #12]
 80066ce:	688b      	ldr	r3, [r1, #8]
 80066d0:	f423 53e0 	bic.w	r3, r3, #7168	; 0x1c00
 80066d4:	4303      	orrs	r3, r0
 80066d6:	608b      	str	r3, [r1, #8]
 80066d8:	e78a      	b.n	80065f0 <HAL_RCC_ClockConfig+0x38>
 80066da:	bf00      	nop
 80066dc:	40023c00 	.word	0x40023c00
 80066e0:	40023800 	.word	0x40023800
 80066e4:	081416f7 	.word	0x081416f7
 80066e8:	2000060c 	.word	0x2000060c

080066ec <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80066ec:	4b04      	ldr	r3, [pc, #16]	; (8006700 <HAL_RCC_GetPCLK1Freq+0x14>)
 80066ee:	4a05      	ldr	r2, [pc, #20]	; (8006704 <HAL_RCC_GetPCLK1Freq+0x18>)
 80066f0:	689b      	ldr	r3, [r3, #8]
 80066f2:	f3c3 2382 	ubfx	r3, r3, #10, #3
 80066f6:	5cd3      	ldrb	r3, [r2, r3]
 80066f8:	4a03      	ldr	r2, [pc, #12]	; (8006708 <HAL_RCC_GetPCLK1Freq+0x1c>)
 80066fa:	6810      	ldr	r0, [r2, #0]
}
 80066fc:	40d8      	lsrs	r0, r3
 80066fe:	4770      	bx	lr
 8006700:	40023800 	.word	0x40023800
 8006704:	08141707 	.word	0x08141707
 8006708:	2000060c 	.word	0x2000060c

0800670c <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800670c:	4b04      	ldr	r3, [pc, #16]	; (8006720 <HAL_RCC_GetPCLK2Freq+0x14>)
 800670e:	4a05      	ldr	r2, [pc, #20]	; (8006724 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006710:	689b      	ldr	r3, [r3, #8]
 8006712:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8006716:	5cd3      	ldrb	r3, [r2, r3]
 8006718:	4a03      	ldr	r2, [pc, #12]	; (8006728 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800671a:	6810      	ldr	r0, [r2, #0]
}
 800671c:	40d8      	lsrs	r0, r3
 800671e:	4770      	bx	lr
 8006720:	40023800 	.word	0x40023800
 8006724:	08141707 	.word	0x08141707
 8006728:	2000060c 	.word	0x2000060c

0800672c <HAL_RCCEx_PeriphCLKConfig>:

  /*----------------------- SAI/I2S Configuration (PLLI2S) -------------------*/
  /*----------------------- Common configuration SAI/I2S ---------------------*/
  /* In Case of SAI or I2S Clock Configuration through PLLI2S, PLLI2SN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800672c:	6803      	ldr	r3, [r0, #0]
{
 800672e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006730:	079a      	lsls	r2, r3, #30
{
 8006732:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8006734:	f040 8088 	bne.w	8006848 <HAL_RCCEx_PeriphCLKConfig+0x11c>

  /*----------------------- SAI/LTDC Configuration (PLLSAI) ------------------*/
  /*----------------------- Common configuration SAI/LTDC --------------------*/
  /* In Case of SAI or LTDC Clock Configuration through PLLSAI, PLLSAIN division
     factor is common parameters for both peripherals */
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == RCC_PERIPHCLK_SAI_PLLSAI) ||
 8006738:	6823      	ldr	r3, [r4, #0]
 800673a:	f013 0f0c 	tst.w	r3, #12
 800673e:	d044      	beq.n	80067ca <HAL_RCCEx_PeriphCLKConfig+0x9e>
  {
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8006740:	4d80      	ldr	r5, [pc, #512]	; (8006944 <HAL_RCCEx_PeriphCLKConfig+0x218>)
    /* Get tick */
    tickstart = HAL_GetTick();
    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8006742:	4e81      	ldr	r6, [pc, #516]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLSAI_DISABLE();
 8006744:	2300      	movs	r3, #0
 8006746:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006748:	f7fe fa50 	bl	8004bec <HAL_GetTick>
 800674c:	4607      	mov	r7, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800674e:	6833      	ldr	r3, [r6, #0]
 8006750:	009b      	lsls	r3, r3, #2
 8006752:	f100 80bd 	bmi.w	80068d0 <HAL_RCCEx_PeriphCLKConfig+0x1a4>
    }

    /*---------------------------- SAI configuration -------------------------*/
    /* In Case of SAI Clock Configuration through PLLSAI, PLLSAIQ and PLLSAI_DIVQ must
       be added only for SAI configuration */
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLSAI) == (RCC_PERIPHCLK_SAI_PLLSAI))
 8006756:	6821      	ldr	r1, [r4, #0]
 8006758:	074f      	lsls	r7, r1, #29
 800675a:	d515      	bpl.n	8006788 <HAL_RCCEx_PeriphCLKConfig+0x5c>
      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800675c:	6963      	ldr	r3, [r4, #20]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800675e:	f8d6 2088 	ldr.w	r2, [r6, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8006762:	6920      	ldr	r0, [r4, #16]
 8006764:	061b      	lsls	r3, r3, #24
 8006766:	f002 42e0 	and.w	r2, r2, #1879048192	; 0x70000000
 800676a:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 800676e:	4313      	orrs	r3, r2
 8006770:	f8c6 3088 	str.w	r3, [r6, #136]	; 0x88
      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8006774:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
 8006778:	6a22      	ldr	r2, [r4, #32]
 800677a:	f423 53f8 	bic.w	r3, r3, #7936	; 0x1f00
 800677e:	3a01      	subs	r2, #1
 8006780:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8006784:	f8c6 308c 	str.w	r3, [r6, #140]	; 0x8c
    }

    /*---------------------------- LTDC configuration ------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8006788:	070e      	lsls	r6, r1, #28
 800678a:	d514      	bpl.n	80067b6 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIR value from PLLSAICFGR register (this value is not need for SAI configuration) */
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800678c:	4a6e      	ldr	r2, [pc, #440]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 800678e:	69a3      	ldr	r3, [r4, #24]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8006790:	f8d2 1088 	ldr.w	r1, [r2, #136]	; 0x88
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, PeriphClkInit->PLLSAI.PLLSAIR);
 8006794:	6920      	ldr	r0, [r4, #16]
 8006796:	071b      	lsls	r3, r3, #28
 8006798:	f001 6170 	and.w	r1, r1, #251658240	; 0xf000000
 800679c:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 80067a0:	430b      	orrs	r3, r1
 80067a2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80067a6:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
 80067aa:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80067ac:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80067b0:	430b      	orrs	r3, r1
 80067b2:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    }
    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80067b6:	2301      	movs	r3, #1
 80067b8:	602b      	str	r3, [r5, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80067ba:	f7fe fa17 	bl	8004bec <HAL_GetTick>
    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067be:	4d62      	ldr	r5, [pc, #392]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 80067c0:	4606      	mov	r6, r0
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80067c2:	682b      	ldr	r3, [r5, #0]
 80067c4:	0098      	lsls	r0, r3, #2
 80067c6:	f140 808a 	bpl.w	80068de <HAL_RCCEx_PeriphCLKConfig+0x1b2>
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- RTC configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80067ca:	6823      	ldr	r3, [r4, #0]
 80067cc:	069a      	lsls	r2, r3, #26
 80067ce:	d531      	bpl.n	8006834 <HAL_RCCEx_PeriphCLKConfig+0x108>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80067d0:	2300      	movs	r3, #0
 80067d2:	9301      	str	r3, [sp, #4]
 80067d4:	4b5c      	ldr	r3, [pc, #368]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80067d6:	4d5d      	ldr	r5, [pc, #372]	; (800694c <HAL_RCCEx_PeriphCLKConfig+0x220>)
    __HAL_RCC_PWR_CLK_ENABLE();
 80067d8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80067da:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80067de:	641a      	str	r2, [r3, #64]	; 0x40
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80067e6:	9301      	str	r3, [sp, #4]
 80067e8:	9b01      	ldr	r3, [sp, #4]
    PWR->CR |= PWR_CR_DBP;
 80067ea:	682b      	ldr	r3, [r5, #0]
 80067ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80067f0:	602b      	str	r3, [r5, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80067f2:	f7fe f9fb 	bl	8004bec <HAL_GetTick>
 80067f6:	4606      	mov	r6, r0

    while((PWR->CR & PWR_CR_DBP) == RESET)
 80067f8:	682b      	ldr	r3, [r5, #0]
 80067fa:	05d9      	lsls	r1, r3, #23
 80067fc:	d576      	bpl.n	80068ec <HAL_RCCEx_PeriphCLKConfig+0x1c0>
      {
        return HAL_TIMEOUT;
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80067fe:	4d52      	ldr	r5, [pc, #328]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006800:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8006802:	f413 7340 	ands.w	r3, r3, #768	; 0x300
 8006806:	d177      	bne.n	80068f8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
            return HAL_TIMEOUT;
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006808:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800680a:	f403 7240 	and.w	r2, r3, #768	; 0x300
 800680e:	f5b2 7f40 	cmp.w	r2, #768	; 0x300
 8006812:	4a4d      	ldr	r2, [pc, #308]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
 8006814:	f040 8091 	bne.w	800693a <HAL_RCCEx_PeriphCLKConfig+0x20e>
 8006818:	6891      	ldr	r1, [r2, #8]
 800681a:	f023 4070 	bic.w	r0, r3, #4026531840	; 0xf0000000
 800681e:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006822:	f420 7040 	bic.w	r0, r0, #768	; 0x300
 8006826:	4301      	orrs	r1, r0
 8006828:	6091      	str	r1, [r2, #8]
 800682a:	6f11      	ldr	r1, [r2, #112]	; 0x70
 800682c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8006830:	430b      	orrs	r3, r1
 8006832:	6713      	str	r3, [r2, #112]	; 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8006834:	6820      	ldr	r0, [r4, #0]
 8006836:	f010 0010 	ands.w	r0, r0, #16
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800683a:	bf1f      	itttt	ne
 800683c:	4b44      	ldrne	r3, [pc, #272]	; (8006950 <HAL_RCCEx_PeriphCLKConfig+0x224>)
 800683e:	f894 202c 	ldrbne.w	r2, [r4, #44]	; 0x2c
 8006842:	601a      	strne	r2, [r3, #0]
  }
  return HAL_OK;
 8006844:	2000      	movne	r0, #0
 8006846:	e041      	b.n	80068cc <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    __HAL_RCC_PLLI2S_DISABLE();
 8006848:	4d42      	ldr	r5, [pc, #264]	; (8006954 <HAL_RCCEx_PeriphCLKConfig+0x228>)
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800684a:	4e3f      	ldr	r6, [pc, #252]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    __HAL_RCC_PLLI2S_DISABLE();
 800684c:	2300      	movs	r3, #0
 800684e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006850:	f7fe f9cc 	bl	8004bec <HAL_GetTick>
 8006854:	4607      	mov	r7, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8006856:	6833      	ldr	r3, [r6, #0]
 8006858:	011b      	lsls	r3, r3, #4
 800685a:	d431      	bmi.n	80068c0 <HAL_RCCEx_PeriphCLKConfig+0x194>
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800685c:	6822      	ldr	r2, [r4, #0]
 800685e:	07d7      	lsls	r7, r2, #31
 8006860:	d506      	bpl.n	8006870 <HAL_RCCEx_PeriphCLKConfig+0x144>
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SR);
 8006862:	68a3      	ldr	r3, [r4, #8]
 8006864:	6861      	ldr	r1, [r4, #4]
 8006866:	071b      	lsls	r3, r3, #28
 8006868:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
 800686c:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI_PLLI2S) == (RCC_PERIPHCLK_SAI_PLLI2S))
 8006870:	0790      	lsls	r0, r2, #30
 8006872:	d515      	bpl.n	80068a0 <HAL_RCCEx_PeriphCLKConfig+0x174>
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006874:	4a34      	ldr	r2, [pc, #208]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 8006876:	68e3      	ldr	r3, [r4, #12]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8006878:	f8d2 1084 	ldr.w	r1, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_SAICLK_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ , tmpreg1);
 800687c:	6860      	ldr	r0, [r4, #4]
 800687e:	061b      	lsls	r3, r3, #24
 8006880:	f001 41e0 	and.w	r1, r1, #1879048192	; 0x70000000
 8006884:	ea43 1380 	orr.w	r3, r3, r0, lsl #6
 8006888:	430b      	orrs	r3, r1
 800688a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 800688e:	f8d2 108c 	ldr.w	r1, [r2, #140]	; 0x8c
 8006892:	69e3      	ldr	r3, [r4, #28]
 8006894:	f021 011f 	bic.w	r1, r1, #31
 8006898:	3b01      	subs	r3, #1
 800689a:	430b      	orrs	r3, r1
 800689c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
    __HAL_RCC_PLLI2S_ENABLE();
 80068a0:	2301      	movs	r3, #1
 80068a2:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 80068a4:	f7fe f9a2 	bl	8004bec <HAL_GetTick>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068a8:	4d27      	ldr	r5, [pc, #156]	; (8006948 <HAL_RCCEx_PeriphCLKConfig+0x21c>)
    tickstart = HAL_GetTick();
 80068aa:	4606      	mov	r6, r0
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80068ac:	682b      	ldr	r3, [r5, #0]
 80068ae:	0119      	lsls	r1, r3, #4
 80068b0:	f53f af42 	bmi.w	8006738 <HAL_RCCEx_PeriphCLKConfig+0xc>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068b4:	f7fe f99a 	bl	8004bec <HAL_GetTick>
 80068b8:	1b80      	subs	r0, r0, r6
 80068ba:	2802      	cmp	r0, #2
 80068bc:	d9f6      	bls.n	80068ac <HAL_RCCEx_PeriphCLKConfig+0x180>
 80068be:	e004      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLI2S_TIMEOUT_VALUE)
 80068c0:	f7fe f994 	bl	8004bec <HAL_GetTick>
 80068c4:	1bc0      	subs	r0, r0, r7
 80068c6:	2802      	cmp	r0, #2
 80068c8:	d9c5      	bls.n	8006856 <HAL_RCCEx_PeriphCLKConfig+0x12a>
        return HAL_TIMEOUT;
 80068ca:	2003      	movs	r0, #3
}
 80068cc:	b003      	add	sp, #12
 80068ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068d0:	f7fe f98c 	bl	8004bec <HAL_GetTick>
 80068d4:	1bc0      	subs	r0, r0, r7
 80068d6:	2802      	cmp	r0, #2
 80068d8:	f67f af39 	bls.w	800674e <HAL_RCCEx_PeriphCLKConfig+0x22>
 80068dc:	e7f5      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > PLLSAI_TIMEOUT_VALUE)
 80068de:	f7fe f985 	bl	8004bec <HAL_GetTick>
 80068e2:	1b80      	subs	r0, r0, r6
 80068e4:	2802      	cmp	r0, #2
 80068e6:	f67f af6c 	bls.w	80067c2 <HAL_RCCEx_PeriphCLKConfig+0x96>
 80068ea:	e7ee      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
      if((HAL_GetTick() - tickstart ) > RCC_DBP_TIMEOUT_VALUE)
 80068ec:	f7fe f97e 	bl	8004bec <HAL_GetTick>
 80068f0:	1b80      	subs	r0, r0, r6
 80068f2:	2802      	cmp	r0, #2
 80068f4:	d980      	bls.n	80067f8 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80068f6:	e7e8      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
    if((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80068f8:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80068fa:	f402 7240 	and.w	r2, r2, #768	; 0x300
 80068fe:	4293      	cmp	r3, r2
 8006900:	d082      	beq.n	8006808 <HAL_RCCEx_PeriphCLKConfig+0xdc>
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8006902:	6f2b      	ldr	r3, [r5, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_FORCE();
 8006904:	4a14      	ldr	r2, [pc, #80]	; (8006958 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006906:	2101      	movs	r1, #1
 8006908:	6011      	str	r1, [r2, #0]
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800690a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
      __HAL_RCC_BACKUPRESET_RELEASE();
 800690e:	2100      	movs	r1, #0
 8006910:	6011      	str	r1, [r2, #0]
      RCC->BDCR = tmpreg1;
 8006912:	672b      	str	r3, [r5, #112]	; 0x70
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8006914:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006916:	07da      	lsls	r2, r3, #31
 8006918:	f57f af76 	bpl.w	8006808 <HAL_RCCEx_PeriphCLKConfig+0xdc>
        tickstart = HAL_GetTick();
 800691c:	f7fe f966 	bl	8004bec <HAL_GetTick>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006920:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006924:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006926:	6f2b      	ldr	r3, [r5, #112]	; 0x70
 8006928:	079b      	lsls	r3, r3, #30
 800692a:	f53f af6d 	bmi.w	8006808 <HAL_RCCEx_PeriphCLKConfig+0xdc>
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800692e:	f7fe f95d 	bl	8004bec <HAL_GetTick>
 8006932:	1b80      	subs	r0, r0, r6
 8006934:	42b8      	cmp	r0, r7
 8006936:	d9f6      	bls.n	8006926 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
 8006938:	e7c7      	b.n	80068ca <HAL_RCCEx_PeriphCLKConfig+0x19e>
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800693a:	6891      	ldr	r1, [r2, #8]
 800693c:	f421 11f8 	bic.w	r1, r1, #2031616	; 0x1f0000
 8006940:	e772      	b.n	8006828 <HAL_RCCEx_PeriphCLKConfig+0xfc>
 8006942:	bf00      	nop
 8006944:	42470070 	.word	0x42470070
 8006948:	40023800 	.word	0x40023800
 800694c:	40007000 	.word	0x40007000
 8006950:	424711e0 	.word	0x424711e0
 8006954:	42470068 	.word	0x42470068
 8006958:	42470e40 	.word	0x42470e40

0800695c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{   
 800695c:	b538      	push	{r3, r4, r5, lr}
 800695e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if(hsdram == NULL)
 8006960:	4604      	mov	r4, r0
 8006962:	b1c8      	cbz	r0, 8006998 <HAL_SDRAM_Init+0x3c>
  {
    return HAL_ERROR;
  }
  
  if(hsdram->State == HAL_SDRAM_STATE_RESET)
 8006964:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8006968:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 800696c:	b91b      	cbnz	r3, 8006976 <HAL_SDRAM_Init+0x1a>
  {  
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800696e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8006972:	f001 f841 	bl	80079f8 <HAL_SDRAM_MspInit>
#endif
  }
  
  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 8006976:	2302      	movs	r3, #2
 8006978:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Initialize SDRAM control Interface */
  FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800697c:	1d21      	adds	r1, r4, #4
 800697e:	6820      	ldr	r0, [r4, #0]
 8006980:	f000 fd1b 	bl	80073ba <FMC_SDRAM_Init>
  
  /* Initialize SDRAM timing Interface */
  FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank); 
 8006984:	6862      	ldr	r2, [r4, #4]
 8006986:	6820      	ldr	r0, [r4, #0]
 8006988:	4629      	mov	r1, r5
 800698a:	f000 fd55 	bl	8007438 <FMC_SDRAM_Timing_Init>
  
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 800698e:	2301      	movs	r3, #1
 8006990:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;
 8006994:	2000      	movs	r0, #0
 8006996:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8006998:	2001      	movs	r0, #1
}
 800699a:	bd38      	pop	{r3, r4, r5, pc}

0800699c <HAL_SDRAM_SendCommand>:
  * @param  Command SDRAM command structure
  * @param  Timeout Timeout duration
  * @retval HAL status
  */  
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 800699c:	b538      	push	{r3, r4, r5, lr}
 800699e:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069a0:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80069a4:	b2c0      	uxtb	r0, r0
 80069a6:	2802      	cmp	r0, #2
{
 80069a8:	460d      	mov	r5, r1
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069aa:	d00d      	beq.n	80069c8 <HAL_SDRAM_SendCommand+0x2c>
  {
    return HAL_BUSY;
  }
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069ac:	2302      	movs	r3, #2
 80069ae:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Send SDRAM command */
  FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 80069b2:	6820      	ldr	r0, [r4, #0]
 80069b4:	f000 fd88 	bl	80074c8 <FMC_SDRAM_SendCommand>
  
  /* Update the SDRAM controller state */
  if(Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80069b8:	682b      	ldr	r3, [r5, #0]
 80069ba:	2b02      	cmp	r3, #2
  {
    hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80069bc:	bf0c      	ite	eq
 80069be:	2305      	moveq	r3, #5
  }
  else
  {
    hsdram->State = HAL_SDRAM_STATE_READY;
 80069c0:	2301      	movne	r3, #1
 80069c2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  }
  
  return HAL_OK;  
 80069c6:	2000      	movs	r0, #0
}
 80069c8:	bd38      	pop	{r3, r4, r5, pc}

080069ca <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.  
  * @param  RefreshRate The SDRAM refresh rate value       
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80069ca:	b510      	push	{r4, lr}
 80069cc:	4604      	mov	r4, r0
  /* Check the SDRAM controller state */
  if(hsdram->State == HAL_SDRAM_STATE_BUSY)
 80069ce:	f890 002c 	ldrb.w	r0, [r0, #44]	; 0x2c
 80069d2:	b2c0      	uxtb	r0, r0
 80069d4:	2802      	cmp	r0, #2
 80069d6:	d009      	beq.n	80069ec <HAL_SDRAM_ProgramRefreshRate+0x22>
  {
    return HAL_BUSY;
  } 
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 80069d8:	2302      	movs	r3, #2
 80069da:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  /* Program the refresh rate */
  FMC_SDRAM_ProgramRefreshRate(hsdram->Instance ,RefreshRate);
 80069de:	6820      	ldr	r0, [r4, #0]
 80069e0:	f000 fd97 	bl	8007512 <FMC_SDRAM_ProgramRefreshRate>
  
  /* Update the SDRAM state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 80069e4:	2301      	movs	r3, #1
 80069e6:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
  
  return HAL_OK;   
 80069ea:	2000      	movs	r0, #0
}
 80069ec:	bd10      	pop	{r4, pc}

080069ee <SPI_WaitFlagStateUntilTimeout.constprop.9>:
  * @param  State flag state to check
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
 80069ee:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	460e      	mov	r6, r1
 80069f4:	4615      	mov	r5, r2
 80069f6:	461f      	mov	r7, r3
                                                       uint32_t Timeout, uint32_t Tickstart)
{
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80069f8:	6821      	ldr	r1, [r4, #0]
 80069fa:	688a      	ldr	r2, [r1, #8]
 80069fc:	ea36 0302 	bics.w	r3, r6, r2
 8006a00:	d001      	beq.n	8006a06 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x18>
        return HAL_TIMEOUT;
      }
    }
  }

  return HAL_OK;
 8006a02:	2000      	movs	r0, #0
}
 8006a04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 8006a06:	1c6b      	adds	r3, r5, #1
 8006a08:	d0f7      	beq.n	80069fa <SPI_WaitFlagStateUntilTimeout.constprop.9+0xc>
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8006a0a:	f7fe f8ef 	bl	8004bec <HAL_GetTick>
 8006a0e:	1bc0      	subs	r0, r0, r7
 8006a10:	4285      	cmp	r5, r0
 8006a12:	d8f1      	bhi.n	80069f8 <SPI_WaitFlagStateUntilTimeout.constprop.9+0xa>
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006a14:	6823      	ldr	r3, [r4, #0]
 8006a16:	685a      	ldr	r2, [r3, #4]
 8006a18:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8006a1c:	605a      	str	r2, [r3, #4]
        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a1e:	6862      	ldr	r2, [r4, #4]
 8006a20:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
 8006a24:	d10a      	bne.n	8006a3c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
 8006a26:	68a2      	ldr	r2, [r4, #8]
 8006a28:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a2c:	d002      	beq.n	8006a34 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x46>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a2e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006a32:	d103      	bne.n	8006a3c <SPI_WaitFlagStateUntilTimeout.constprop.9+0x4e>
          __HAL_SPI_DISABLE(hspi);
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006a3a:	601a      	str	r2, [r3, #0]
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8006a3c:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8006a3e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8006a42:	d107      	bne.n	8006a54 <SPI_WaitFlagStateUntilTimeout.constprop.9+0x66>
          SPI_RESET_CRC(hspi);
 8006a44:	681a      	ldr	r2, [r3, #0]
 8006a46:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006a4a:	601a      	str	r2, [r3, #0]
 8006a4c:	681a      	ldr	r2, [r3, #0]
 8006a4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006a52:	601a      	str	r2, [r3, #0]
        hspi->State = HAL_SPI_STATE_READY;
 8006a54:	2301      	movs	r3, #1
 8006a56:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
        __HAL_UNLOCK(hspi);
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
 8006a60:	2003      	movs	r0, #3
 8006a62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006a64 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8006a64:	b538      	push	{r3, r4, r5, lr}
 8006a66:	4613      	mov	r3, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a68:	6842      	ldr	r2, [r0, #4]
 8006a6a:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8006a6e:	4604      	mov	r4, r0
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006a70:	d11f      	bne.n	8006ab2 <SPI_EndRxTransaction+0x4e>
 8006a72:	6882      	ldr	r2, [r0, #8]
 8006a74:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8006a78:	d002      	beq.n	8006a80 <SPI_EndRxTransaction+0x1c>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8006a7a:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
 8006a7e:	d107      	bne.n	8006a90 <SPI_EndRxTransaction+0x2c>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8006a80:	6825      	ldr	r5, [r4, #0]
 8006a82:	6828      	ldr	r0, [r5, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a84:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    __HAL_SPI_DISABLE(hspi);
 8006a88:	f020 0040 	bic.w	r0, r0, #64	; 0x40
 8006a8c:	6028      	str	r0, [r5, #0]
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8006a8e:	d007      	beq.n	8006aa0 <SPI_EndRxTransaction+0x3c>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006a90:	460a      	mov	r2, r1
 8006a92:	2180      	movs	r1, #128	; 0x80
 8006a94:	4620      	mov	r0, r4
 8006a96:	f7ff ffaa 	bl	80069ee <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8006a9a:	b920      	cbnz	r0, 8006aa6 <SPI_EndRxTransaction+0x42>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
      return HAL_TIMEOUT;
    }
  }
  return HAL_OK;
 8006a9c:	2000      	movs	r0, #0
 8006a9e:	bd38      	pop	{r3, r4, r5, pc}
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006aa0:	460a      	mov	r2, r1
 8006aa2:	2101      	movs	r1, #1
 8006aa4:	e7f6      	b.n	8006a94 <SPI_EndRxTransaction+0x30>
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006aa6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006aa8:	f043 0320 	orr.w	r3, r3, #32
 8006aac:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006aae:	2003      	movs	r0, #3
 8006ab0:	bd38      	pop	{r3, r4, r5, pc}
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8006ab2:	460a      	mov	r2, r1
 8006ab4:	2101      	movs	r1, #1
 8006ab6:	e7ee      	b.n	8006a96 <SPI_EndRxTransaction+0x32>

08006ab8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8006ab8:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006aba:	4613      	mov	r3, r2
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006abc:	4a13      	ldr	r2, [pc, #76]	; (8006b0c <SPI_EndRxTxTransaction+0x54>)
 8006abe:	4e14      	ldr	r6, [pc, #80]	; (8006b10 <SPI_EndRxTxTransaction+0x58>)
 8006ac0:	6815      	ldr	r5, [r2, #0]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ac2:	6842      	ldr	r2, [r0, #4]
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ac4:	fbb5 f6f6 	udiv	r6, r5, r6
 8006ac8:	f44f 757a 	mov.w	r5, #1000	; 0x3e8
 8006acc:	4375      	muls	r5, r6
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ace:	f5b2 7f82 	cmp.w	r2, #260	; 0x104
{
 8006ad2:	4604      	mov	r4, r0
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006ad4:	9501      	str	r5, [sp, #4]
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006ad6:	d10d      	bne.n	8006af4 <SPI_EndRxTxTransaction+0x3c>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006ad8:	460a      	mov	r2, r1
 8006ada:	2180      	movs	r1, #128	; 0x80
 8006adc:	f7ff ff87 	bl	80069ee <SPI_WaitFlagStateUntilTimeout.constprop.9>
 8006ae0:	b910      	cbnz	r0, 8006ae8 <SPI_EndRxTxTransaction+0x30>
      }
      count--;
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
  }

  return HAL_OK;
 8006ae2:	2000      	movs	r0, #0
}
 8006ae4:	b002      	add	sp, #8
 8006ae6:	bd70      	pop	{r4, r5, r6, pc}
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8006ae8:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8006aea:	f043 0320 	orr.w	r3, r3, #32
 8006aee:	6563      	str	r3, [r4, #84]	; 0x54
      return HAL_TIMEOUT;
 8006af0:	2003      	movs	r0, #3
 8006af2:	e7f7      	b.n	8006ae4 <SPI_EndRxTxTransaction+0x2c>
      if (count == 0U)
 8006af4:	9b01      	ldr	r3, [sp, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d0f3      	beq.n	8006ae2 <SPI_EndRxTxTransaction+0x2a>
      count--;
 8006afa:	9b01      	ldr	r3, [sp, #4]
 8006afc:	3b01      	subs	r3, #1
 8006afe:	9301      	str	r3, [sp, #4]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8006b00:	6823      	ldr	r3, [r4, #0]
 8006b02:	689b      	ldr	r3, [r3, #8]
 8006b04:	061b      	lsls	r3, r3, #24
 8006b06:	d4f5      	bmi.n	8006af4 <SPI_EndRxTxTransaction+0x3c>
 8006b08:	e7eb      	b.n	8006ae2 <SPI_EndRxTxTransaction+0x2a>
 8006b0a:	bf00      	nop
 8006b0c:	2000060c 	.word	0x2000060c
 8006b10:	016e3600 	.word	0x016e3600

08006b14 <HAL_SPI_Init>:
{
 8006b14:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006b16:	4604      	mov	r4, r0
 8006b18:	2800      	cmp	r0, #0
 8006b1a:	d036      	beq.n	8006b8a <HAL_SPI_Init+0x76>
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006b1c:	2300      	movs	r3, #0
 8006b1e:	6283      	str	r3, [r0, #40]	; 0x28
  if (hspi->State == HAL_SPI_STATE_RESET)
 8006b20:	f890 3051 	ldrb.w	r3, [r0, #81]	; 0x51
 8006b24:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8006b28:	b91b      	cbnz	r3, 8006b32 <HAL_SPI_Init+0x1e>
    hspi->Lock = HAL_UNLOCKED;
 8006b2a:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
    HAL_SPI_MspInit(hspi);
 8006b2e:	f001 fb75 	bl	800821c <HAL_SPI_MspInit>
  __HAL_SPI_DISABLE(hspi);
 8006b32:	6821      	ldr	r1, [r4, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b34:	68a0      	ldr	r0, [r4, #8]
 8006b36:	69a2      	ldr	r2, [r4, #24]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b38:	2302      	movs	r3, #2
 8006b3a:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006b3e:	680b      	ldr	r3, [r1, #0]
 8006b40:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b44:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 8006b46:	6863      	ldr	r3, [r4, #4]
 8006b48:	4303      	orrs	r3, r0
 8006b4a:	68e0      	ldr	r0, [r4, #12]
 8006b4c:	4303      	orrs	r3, r0
 8006b4e:	6920      	ldr	r0, [r4, #16]
 8006b50:	4303      	orrs	r3, r0
 8006b52:	6960      	ldr	r0, [r4, #20]
 8006b54:	4303      	orrs	r3, r0
 8006b56:	69e0      	ldr	r0, [r4, #28]
 8006b58:	4303      	orrs	r3, r0
 8006b5a:	6a20      	ldr	r0, [r4, #32]
 8006b5c:	4303      	orrs	r3, r0
 8006b5e:	6aa0      	ldr	r0, [r4, #40]	; 0x28
 8006b60:	4303      	orrs	r3, r0
 8006b62:	f402 7000 	and.w	r0, r2, #512	; 0x200
 8006b66:	4303      	orrs	r3, r0
 8006b68:	600b      	str	r3, [r1, #0]
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 8006b6a:	0c12      	lsrs	r2, r2, #16
 8006b6c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006b6e:	f002 0204 	and.w	r2, r2, #4
 8006b72:	431a      	orrs	r2, r3
 8006b74:	604a      	str	r2, [r1, #4]
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b76:	69cb      	ldr	r3, [r1, #28]
 8006b78:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b7c:	61cb      	str	r3, [r1, #28]
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b7e:	2000      	movs	r0, #0
  hspi->State     = HAL_SPI_STATE_READY;
 8006b80:	2301      	movs	r3, #1
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b82:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8006b84:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  return HAL_OK;
 8006b88:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006b8a:	2001      	movs	r0, #1
}
 8006b8c:	bd10      	pop	{r4, pc}

08006b8e <HAL_SPI_DeInit>:
{
 8006b8e:	b510      	push	{r4, lr}
  if (hspi == NULL)
 8006b90:	4604      	mov	r4, r0
 8006b92:	b180      	cbz	r0, 8006bb6 <HAL_SPI_DeInit+0x28>
  __HAL_SPI_DISABLE(hspi);
 8006b94:	6802      	ldr	r2, [r0, #0]
  hspi->State = HAL_SPI_STATE_BUSY;
 8006b96:	2302      	movs	r3, #2
 8006b98:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
  __HAL_SPI_DISABLE(hspi);
 8006b9c:	6813      	ldr	r3, [r2, #0]
 8006b9e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006ba2:	6013      	str	r3, [r2, #0]
  HAL_SPI_MspDeInit(hspi);
 8006ba4:	f001 fb3c 	bl	8008220 <HAL_SPI_MspDeInit>
  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006ba8:	2000      	movs	r0, #0
 8006baa:	6560      	str	r0, [r4, #84]	; 0x54
  __HAL_UNLOCK(hspi);
 8006bac:	f884 0050 	strb.w	r0, [r4, #80]	; 0x50
  hspi->State = HAL_SPI_STATE_RESET;
 8006bb0:	f884 0051 	strb.w	r0, [r4, #81]	; 0x51
  return HAL_OK;
 8006bb4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006bb6:	2001      	movs	r0, #1
}
 8006bb8:	bd10      	pop	{r4, pc}

08006bba <HAL_SPI_Transmit>:
{
 8006bba:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006bbe:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006bc0:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
 8006bc4:	2b01      	cmp	r3, #1
{
 8006bc6:	4604      	mov	r4, r0
 8006bc8:	460d      	mov	r5, r1
 8006bca:	4690      	mov	r8, r2
  __HAL_LOCK(hspi);
 8006bcc:	f000 809b 	beq.w	8006d06 <HAL_SPI_Transmit+0x14c>
 8006bd0:	2301      	movs	r3, #1
 8006bd2:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006bd6:	f7fe f809 	bl	8004bec <HAL_GetTick>
 8006bda:	4607      	mov	r7, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006bdc:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006be0:	b2c0      	uxtb	r0, r0
 8006be2:	2801      	cmp	r0, #1
 8006be4:	f040 808d 	bne.w	8006d02 <HAL_SPI_Transmit+0x148>
  if ((pData == NULL) || (Size == 0U))
 8006be8:	2d00      	cmp	r5, #0
 8006bea:	d05d      	beq.n	8006ca8 <HAL_SPI_Transmit+0xee>
 8006bec:	f1b8 0f00 	cmp.w	r8, #0
 8006bf0:	d05a      	beq.n	8006ca8 <HAL_SPI_Transmit+0xee>
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8006bf2:	2303      	movs	r3, #3
 8006bf4:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bf8:	2000      	movs	r0, #0
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006bfa:	68a3      	ldr	r3, [r4, #8]
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006bfc:	6560      	str	r0, [r4, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8006bfe:	63a0      	str	r0, [r4, #56]	; 0x38
  hspi->TxXferCount = Size;
 8006c00:	f8a4 8036 	strh.w	r8, [r4, #54]	; 0x36
  hspi->RxXferSize  = 0U;
 8006c04:	87a0      	strh	r0, [r4, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8006c06:	87e0      	strh	r0, [r4, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8006c08:	6460      	str	r0, [r4, #68]	; 0x44
  hspi->RxISR       = NULL;
 8006c0a:	6420      	str	r0, [r4, #64]	; 0x40
 8006c0c:	6820      	ldr	r0, [r4, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8006c0e:	6325      	str	r5, [r4, #48]	; 0x30
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006c10:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
    SPI_1LINE_TX(hspi);
 8006c14:	bf08      	it	eq
 8006c16:	6803      	ldreq	r3, [r0, #0]
  hspi->TxXferSize  = Size;
 8006c18:	f8a4 8034 	strh.w	r8, [r4, #52]	; 0x34
    SPI_1LINE_TX(hspi);
 8006c1c:	bf04      	itt	eq
 8006c1e:	f443 4380 	orreq.w	r3, r3, #16384	; 0x4000
 8006c22:	6003      	streq	r3, [r0, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006c24:	6803      	ldr	r3, [r0, #0]
 8006c26:	065b      	lsls	r3, r3, #25
    __HAL_SPI_ENABLE(hspi);
 8006c28:	bf5e      	ittt	pl
 8006c2a:	6803      	ldrpl	r3, [r0, #0]
 8006c2c:	f043 0340 	orrpl.w	r3, r3, #64	; 0x40
 8006c30:	6003      	strpl	r3, [r0, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006c32:	68e3      	ldr	r3, [r4, #12]
 8006c34:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006c38:	6863      	ldr	r3, [r4, #4]
 8006c3a:	d13e      	bne.n	8006cba <HAL_SPI_Transmit+0x100>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006c3c:	b113      	cbz	r3, 8006c44 <HAL_SPI_Transmit+0x8a>
 8006c3e:	f1b8 0f01 	cmp.w	r8, #1
 8006c42:	d107      	bne.n	8006c54 <HAL_SPI_Transmit+0x9a>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c44:	f835 3b02 	ldrh.w	r3, [r5], #2
 8006c48:	60c3      	str	r3, [r0, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c4a:	6325      	str	r5, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006c4c:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	b29b      	uxth	r3, r3
 8006c52:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006c54:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006c56:	b29b      	uxth	r3, r3
 8006c58:	b9a3      	cbnz	r3, 8006c84 <HAL_SPI_Transmit+0xca>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006c5a:	463a      	mov	r2, r7
 8006c5c:	4631      	mov	r1, r6
 8006c5e:	4620      	mov	r0, r4
 8006c60:	f7ff ff2a 	bl	8006ab8 <SPI_EndRxTxTransaction>
 8006c64:	2800      	cmp	r0, #0
 8006c66:	d149      	bne.n	8006cfc <HAL_SPI_Transmit+0x142>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006c68:	68a3      	ldr	r3, [r4, #8]
 8006c6a:	b933      	cbnz	r3, 8006c7a <HAL_SPI_Transmit+0xc0>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006c6c:	9301      	str	r3, [sp, #4]
 8006c6e:	6823      	ldr	r3, [r4, #0]
 8006c70:	68da      	ldr	r2, [r3, #12]
 8006c72:	9201      	str	r2, [sp, #4]
 8006c74:	689b      	ldr	r3, [r3, #8]
 8006c76:	9301      	str	r3, [sp, #4]
 8006c78:	9b01      	ldr	r3, [sp, #4]
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006c7a:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8006c7c:	3000      	adds	r0, #0
 8006c7e:	bf18      	it	ne
 8006c80:	2001      	movne	r0, #1
 8006c82:	e011      	b.n	8006ca8 <HAL_SPI_Transmit+0xee>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006c84:	6822      	ldr	r2, [r4, #0]
 8006c86:	6893      	ldr	r3, [r2, #8]
 8006c88:	0798      	lsls	r0, r3, #30
 8006c8a:	d505      	bpl.n	8006c98 <HAL_SPI_Transmit+0xde>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006c8c:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006c8e:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006c92:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006c94:	6323      	str	r3, [r4, #48]	; 0x30
 8006c96:	e7d9      	b.n	8006c4c <HAL_SPI_Transmit+0x92>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006c98:	f7fd ffa8 	bl	8004bec <HAL_GetTick>
 8006c9c:	1bc0      	subs	r0, r0, r7
 8006c9e:	42b0      	cmp	r0, r6
 8006ca0:	d3d8      	bcc.n	8006c54 <HAL_SPI_Transmit+0x9a>
 8006ca2:	1c71      	adds	r1, r6, #1
 8006ca4:	d0d6      	beq.n	8006c54 <HAL_SPI_Transmit+0x9a>
          errorcode = HAL_TIMEOUT;
 8006ca6:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006ca8:	2301      	movs	r3, #1
 8006caa:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006cae:	2300      	movs	r3, #0
 8006cb0:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006cb4:	b002      	add	sp, #8
 8006cb6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006cba:	b113      	cbz	r3, 8006cc2 <HAL_SPI_Transmit+0x108>
 8006cbc:	f1b8 0f01 	cmp.w	r8, #1
 8006cc0:	d108      	bne.n	8006cd4 <HAL_SPI_Transmit+0x11a>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006cc2:	782b      	ldrb	r3, [r5, #0]
 8006cc4:	7303      	strb	r3, [r0, #12]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8006cc6:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006cc8:	3301      	adds	r3, #1
 8006cca:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006ccc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006cce:	3b01      	subs	r3, #1
 8006cd0:	b29b      	uxth	r3, r3
 8006cd2:	86e3      	strh	r3, [r4, #54]	; 0x36
    while (hspi->TxXferCount > 0U)
 8006cd4:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006cd6:	b29b      	uxth	r3, r3
 8006cd8:	2b00      	cmp	r3, #0
 8006cda:	d0be      	beq.n	8006c5a <HAL_SPI_Transmit+0xa0>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8006cdc:	6823      	ldr	r3, [r4, #0]
 8006cde:	689a      	ldr	r2, [r3, #8]
 8006ce0:	0792      	lsls	r2, r2, #30
 8006ce2:	d503      	bpl.n	8006cec <HAL_SPI_Transmit+0x132>
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006ce4:	6b22      	ldr	r2, [r4, #48]	; 0x30
 8006ce6:	7812      	ldrb	r2, [r2, #0]
 8006ce8:	731a      	strb	r2, [r3, #12]
 8006cea:	e7ec      	b.n	8006cc6 <HAL_SPI_Transmit+0x10c>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006cec:	f7fd ff7e 	bl	8004bec <HAL_GetTick>
 8006cf0:	1bc0      	subs	r0, r0, r7
 8006cf2:	4286      	cmp	r6, r0
 8006cf4:	d8ee      	bhi.n	8006cd4 <HAL_SPI_Transmit+0x11a>
 8006cf6:	1c73      	adds	r3, r6, #1
 8006cf8:	d0ec      	beq.n	8006cd4 <HAL_SPI_Transmit+0x11a>
 8006cfa:	e7d4      	b.n	8006ca6 <HAL_SPI_Transmit+0xec>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006cfc:	2320      	movs	r3, #32
 8006cfe:	6563      	str	r3, [r4, #84]	; 0x54
 8006d00:	e7b2      	b.n	8006c68 <HAL_SPI_Transmit+0xae>
    errorcode = HAL_BUSY;
 8006d02:	2002      	movs	r0, #2
 8006d04:	e7d0      	b.n	8006ca8 <HAL_SPI_Transmit+0xee>
  __HAL_LOCK(hspi);
 8006d06:	2002      	movs	r0, #2
 8006d08:	e7d4      	b.n	8006cb4 <HAL_SPI_Transmit+0xfa>

08006d0a <HAL_SPI_TransmitReceive>:
{
 8006d0a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8006d0e:	461e      	mov	r6, r3
  __HAL_LOCK(hspi);
 8006d10:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
{
 8006d14:	9f0a      	ldr	r7, [sp, #40]	; 0x28
  __HAL_LOCK(hspi);
 8006d16:	2b01      	cmp	r3, #1
{
 8006d18:	4604      	mov	r4, r0
 8006d1a:	460d      	mov	r5, r1
 8006d1c:	4691      	mov	r9, r2
  __HAL_LOCK(hspi);
 8006d1e:	f000 80e2 	beq.w	8006ee6 <HAL_SPI_TransmitReceive+0x1dc>
 8006d22:	2301      	movs	r3, #1
 8006d24:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006d28:	f7fd ff60 	bl	8004bec <HAL_GetTick>
  tmp_state           = hspi->State;
 8006d2c:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  tmp_mode            = hspi->Init.Mode;
 8006d30:	6861      	ldr	r1, [r4, #4]
  tmp_state           = hspi->State;
 8006d32:	b2db      	uxtb	r3, r3
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d34:	2b01      	cmp	r3, #1
  tickstart = HAL_GetTick();
 8006d36:	4680      	mov	r8, r0
  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8006d38:	d00a      	beq.n	8006d50 <HAL_SPI_TransmitReceive+0x46>
 8006d3a:	f5b1 7f82 	cmp.w	r1, #260	; 0x104
 8006d3e:	f040 80d0 	bne.w	8006ee2 <HAL_SPI_TransmitReceive+0x1d8>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8006d42:	68a0      	ldr	r0, [r4, #8]
 8006d44:	2800      	cmp	r0, #0
 8006d46:	f040 80cc 	bne.w	8006ee2 <HAL_SPI_TransmitReceive+0x1d8>
 8006d4a:	2b04      	cmp	r3, #4
 8006d4c:	f040 80c9 	bne.w	8006ee2 <HAL_SPI_TransmitReceive+0x1d8>
  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8006d50:	2d00      	cmp	r5, #0
 8006d52:	f000 80c4 	beq.w	8006ede <HAL_SPI_TransmitReceive+0x1d4>
 8006d56:	f1b9 0f00 	cmp.w	r9, #0
 8006d5a:	f000 80c0 	beq.w	8006ede <HAL_SPI_TransmitReceive+0x1d4>
 8006d5e:	2e00      	cmp	r6, #0
 8006d60:	f000 80bd 	beq.w	8006ede <HAL_SPI_TransmitReceive+0x1d4>
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d64:	f894 3051 	ldrb.w	r3, [r4, #81]	; 0x51
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8006d68:	f8c4 9038 	str.w	r9, [r4, #56]	; 0x38
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8006d6c:	2b04      	cmp	r3, #4
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8006d6e:	bf1c      	itt	ne
 8006d70:	2305      	movne	r3, #5
 8006d72:	f884 3051 	strbne.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006d76:	2300      	movs	r3, #0
 8006d78:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->RxISR       = NULL;
 8006d7a:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006d7c:	6463      	str	r3, [r4, #68]	; 0x44
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d7e:	6823      	ldr	r3, [r4, #0]
  hspi->RxXferCount = Size;
 8006d80:	87e6      	strh	r6, [r4, #62]	; 0x3e
  hspi->TxXferCount = Size;
 8006d82:	86e6      	strh	r6, [r4, #54]	; 0x36
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d84:	681a      	ldr	r2, [r3, #0]
  hspi->RxXferSize  = Size;
 8006d86:	87a6      	strh	r6, [r4, #60]	; 0x3c
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006d88:	0650      	lsls	r0, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006d8a:	bf58      	it	pl
 8006d8c:	681a      	ldrpl	r2, [r3, #0]
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8006d8e:	6325      	str	r5, [r4, #48]	; 0x30
    __HAL_SPI_ENABLE(hspi);
 8006d90:	bf58      	it	pl
 8006d92:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
  hspi->TxXferSize  = Size;
 8006d96:	86a6      	strh	r6, [r4, #52]	; 0x34
    __HAL_SPI_ENABLE(hspi);
 8006d98:	bf58      	it	pl
 8006d9a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8006d9c:	68e2      	ldr	r2, [r4, #12]
 8006d9e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
 8006da2:	d158      	bne.n	8006e56 <HAL_SPI_TransmitReceive+0x14c>
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006da4:	b109      	cbz	r1, 8006daa <HAL_SPI_TransmitReceive+0xa0>
 8006da6:	2e01      	cmp	r6, #1
 8006da8:	d107      	bne.n	8006dba <HAL_SPI_TransmitReceive+0xb0>
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006daa:	f835 2b02 	ldrh.w	r2, [r5], #2
 8006dae:	60da      	str	r2, [r3, #12]
      hspi->TxXferCount--;
 8006db0:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8006db2:	6325      	str	r5, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006db4:	3b01      	subs	r3, #1
 8006db6:	b29b      	uxth	r3, r3
 8006db8:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006dba:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006dbc:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006dbe:	b29b      	uxth	r3, r3
 8006dc0:	b9ab      	cbnz	r3, 8006dee <HAL_SPI_TransmitReceive+0xe4>
 8006dc2:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006dc4:	b29b      	uxth	r3, r3
 8006dc6:	b993      	cbnz	r3, 8006dee <HAL_SPI_TransmitReceive+0xe4>
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006dc8:	4642      	mov	r2, r8
 8006dca:	4639      	mov	r1, r7
 8006dcc:	4620      	mov	r0, r4
 8006dce:	f7ff fe73 	bl	8006ab8 <SPI_EndRxTxTransaction>
 8006dd2:	2800      	cmp	r0, #0
 8006dd4:	f040 8081 	bne.w	8006eda <HAL_SPI_TransmitReceive+0x1d0>
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8006dd8:	68a3      	ldr	r3, [r4, #8]
 8006dda:	2b00      	cmp	r3, #0
 8006ddc:	d132      	bne.n	8006e44 <HAL_SPI_TransmitReceive+0x13a>
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8006dde:	6823      	ldr	r3, [r4, #0]
 8006de0:	9001      	str	r0, [sp, #4]
 8006de2:	68da      	ldr	r2, [r3, #12]
 8006de4:	9201      	str	r2, [sp, #4]
 8006de6:	689b      	ldr	r3, [r3, #8]
 8006de8:	9301      	str	r3, [sp, #4]
 8006dea:	9b01      	ldr	r3, [sp, #4]
 8006dec:	e02a      	b.n	8006e44 <HAL_SPI_TransmitReceive+0x13a>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006dee:	6822      	ldr	r2, [r4, #0]
 8006df0:	6893      	ldr	r3, [r2, #8]
 8006df2:	0799      	lsls	r1, r3, #30
 8006df4:	d50d      	bpl.n	8006e12 <HAL_SPI_TransmitReceive+0x108>
 8006df6:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006df8:	b29b      	uxth	r3, r3
 8006dfa:	b153      	cbz	r3, 8006e12 <HAL_SPI_TransmitReceive+0x108>
 8006dfc:	b14d      	cbz	r5, 8006e12 <HAL_SPI_TransmitReceive+0x108>
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8006dfe:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e00:	f833 1b02 	ldrh.w	r1, [r3], #2
 8006e04:	60d1      	str	r1, [r2, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8006e06:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006e08:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e0a:	3b01      	subs	r3, #1
 8006e0c:	b29b      	uxth	r3, r3
 8006e0e:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006e10:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006e12:	6893      	ldr	r3, [r2, #8]
 8006e14:	07db      	lsls	r3, r3, #31
 8006e16:	d50c      	bpl.n	8006e32 <HAL_SPI_TransmitReceive+0x128>
 8006e18:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e1a:	b29b      	uxth	r3, r3
 8006e1c:	b14b      	cbz	r3, 8006e32 <HAL_SPI_TransmitReceive+0x128>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006e1e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006e20:	68d2      	ldr	r2, [r2, #12]
 8006e22:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006e26:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006e28:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e2a:	3b01      	subs	r3, #1
 8006e2c:	b29b      	uxth	r3, r3
 8006e2e:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006e30:	2501      	movs	r5, #1
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8006e32:	f7fd fedb 	bl	8004bec <HAL_GetTick>
 8006e36:	eba0 0008 	sub.w	r0, r0, r8
 8006e3a:	4287      	cmp	r7, r0
 8006e3c:	d8be      	bhi.n	8006dbc <HAL_SPI_TransmitReceive+0xb2>
 8006e3e:	1c7e      	adds	r6, r7, #1
 8006e40:	d0bc      	beq.n	8006dbc <HAL_SPI_TransmitReceive+0xb2>
        errorcode = HAL_TIMEOUT;
 8006e42:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006e44:	2301      	movs	r3, #1
 8006e46:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006e4a:	2300      	movs	r3, #0
 8006e4c:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
}
 8006e50:	b003      	add	sp, #12
 8006e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8006e56:	b109      	cbz	r1, 8006e5c <HAL_SPI_TransmitReceive+0x152>
 8006e58:	2e01      	cmp	r6, #1
 8006e5a:	d108      	bne.n	8006e6e <HAL_SPI_TransmitReceive+0x164>
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8006e5c:	782a      	ldrb	r2, [r5, #0]
 8006e5e:	731a      	strb	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8006e60:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e62:	3301      	adds	r3, #1
 8006e64:	6323      	str	r3, [r4, #48]	; 0x30
      hspi->TxXferCount--;
 8006e66:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e68:	3b01      	subs	r3, #1
 8006e6a:	b29b      	uxth	r3, r3
 8006e6c:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 1U;
 8006e6e:	2501      	movs	r5, #1
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8006e70:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e72:	b29b      	uxth	r3, r3
 8006e74:	b91b      	cbnz	r3, 8006e7e <HAL_SPI_TransmitReceive+0x174>
 8006e76:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	d0a4      	beq.n	8006dc8 <HAL_SPI_TransmitReceive+0xbe>
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8006e7e:	6822      	ldr	r2, [r4, #0]
 8006e80:	6893      	ldr	r3, [r2, #8]
 8006e82:	0798      	lsls	r0, r3, #30
 8006e84:	d50e      	bpl.n	8006ea4 <HAL_SPI_TransmitReceive+0x19a>
 8006e86:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e88:	b29b      	uxth	r3, r3
 8006e8a:	b15b      	cbz	r3, 8006ea4 <HAL_SPI_TransmitReceive+0x19a>
 8006e8c:	b155      	cbz	r5, 8006ea4 <HAL_SPI_TransmitReceive+0x19a>
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8006e8e:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e90:	781b      	ldrb	r3, [r3, #0]
 8006e92:	7313      	strb	r3, [r2, #12]
        hspi->pTxBuffPtr++;
 8006e94:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8006e96:	3301      	adds	r3, #1
 8006e98:	6323      	str	r3, [r4, #48]	; 0x30
        hspi->TxXferCount--;
 8006e9a:	8ee3      	ldrh	r3, [r4, #54]	; 0x36
 8006e9c:	3b01      	subs	r3, #1
 8006e9e:	b29b      	uxth	r3, r3
 8006ea0:	86e3      	strh	r3, [r4, #54]	; 0x36
        txallowed = 0U;
 8006ea2:	2500      	movs	r5, #0
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8006ea4:	6822      	ldr	r2, [r4, #0]
 8006ea6:	6893      	ldr	r3, [r2, #8]
 8006ea8:	07d9      	lsls	r1, r3, #31
 8006eaa:	d50d      	bpl.n	8006ec8 <HAL_SPI_TransmitReceive+0x1be>
 8006eac:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006eae:	b29b      	uxth	r3, r3
 8006eb0:	b153      	cbz	r3, 8006ec8 <HAL_SPI_TransmitReceive+0x1be>
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8006eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006eb4:	68d2      	ldr	r2, [r2, #12]
 8006eb6:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8006eb8:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006eba:	3301      	adds	r3, #1
 8006ebc:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006ebe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006ec0:	3b01      	subs	r3, #1
 8006ec2:	b29b      	uxth	r3, r3
 8006ec4:	87e3      	strh	r3, [r4, #62]	; 0x3e
        txallowed = 1U;
 8006ec6:	2501      	movs	r5, #1
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8006ec8:	f7fd fe90 	bl	8004bec <HAL_GetTick>
 8006ecc:	eba0 0008 	sub.w	r0, r0, r8
 8006ed0:	4287      	cmp	r7, r0
 8006ed2:	d8cd      	bhi.n	8006e70 <HAL_SPI_TransmitReceive+0x166>
 8006ed4:	1c7b      	adds	r3, r7, #1
 8006ed6:	d0cb      	beq.n	8006e70 <HAL_SPI_TransmitReceive+0x166>
 8006ed8:	e7b3      	b.n	8006e42 <HAL_SPI_TransmitReceive+0x138>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8006eda:	2320      	movs	r3, #32
 8006edc:	6563      	str	r3, [r4, #84]	; 0x54
    errorcode = HAL_ERROR;
 8006ede:	2001      	movs	r0, #1
 8006ee0:	e7b0      	b.n	8006e44 <HAL_SPI_TransmitReceive+0x13a>
    errorcode = HAL_BUSY;
 8006ee2:	2002      	movs	r0, #2
 8006ee4:	e7ae      	b.n	8006e44 <HAL_SPI_TransmitReceive+0x13a>
  __HAL_LOCK(hspi);
 8006ee6:	2002      	movs	r0, #2
 8006ee8:	e7b2      	b.n	8006e50 <HAL_SPI_TransmitReceive+0x146>

08006eea <HAL_SPI_Receive>:
{
 8006eea:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8006eee:	461d      	mov	r5, r3
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006ef0:	6843      	ldr	r3, [r0, #4]
 8006ef2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
{
 8006ef6:	4604      	mov	r4, r0
 8006ef8:	4688      	mov	r8, r1
 8006efa:	4617      	mov	r7, r2
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8006efc:	d10c      	bne.n	8006f18 <HAL_SPI_Receive+0x2e>
 8006efe:	6883      	ldr	r3, [r0, #8]
 8006f00:	b953      	cbnz	r3, 8006f18 <HAL_SPI_Receive+0x2e>
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8006f02:	2304      	movs	r3, #4
 8006f04:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8006f08:	4613      	mov	r3, r2
 8006f0a:	9500      	str	r5, [sp, #0]
 8006f0c:	460a      	mov	r2, r1
 8006f0e:	f7ff fefc 	bl	8006d0a <HAL_SPI_TransmitReceive>
}
 8006f12:	b002      	add	sp, #8
 8006f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  __HAL_LOCK(hspi);
 8006f18:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
 8006f1c:	2b01      	cmp	r3, #1
 8006f1e:	d079      	beq.n	8007014 <HAL_SPI_Receive+0x12a>
 8006f20:	2301      	movs	r3, #1
 8006f22:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  tickstart = HAL_GetTick();
 8006f26:	f7fd fe61 	bl	8004bec <HAL_GetTick>
 8006f2a:	4606      	mov	r6, r0
  if (hspi->State != HAL_SPI_STATE_READY)
 8006f2c:	f894 0051 	ldrb.w	r0, [r4, #81]	; 0x51
 8006f30:	b2c0      	uxtb	r0, r0
 8006f32:	2801      	cmp	r0, #1
 8006f34:	d16c      	bne.n	8007010 <HAL_SPI_Receive+0x126>
  if ((pData == NULL) || (Size == 0U))
 8006f36:	f1b8 0f00 	cmp.w	r8, #0
 8006f3a:	d057      	beq.n	8006fec <HAL_SPI_Receive+0x102>
 8006f3c:	2f00      	cmp	r7, #0
 8006f3e:	d055      	beq.n	8006fec <HAL_SPI_Receive+0x102>
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8006f40:	2304      	movs	r3, #4
 8006f42:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8006f46:	2300      	movs	r3, #0
 8006f48:	6563      	str	r3, [r4, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8006f4a:	6323      	str	r3, [r4, #48]	; 0x30
  hspi->RxXferCount = Size;
 8006f4c:	87e7      	strh	r7, [r4, #62]	; 0x3e
  hspi->TxXferSize  = 0U;
 8006f4e:	86a3      	strh	r3, [r4, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8006f50:	86e3      	strh	r3, [r4, #54]	; 0x36
  hspi->RxISR       = NULL;
 8006f52:	6423      	str	r3, [r4, #64]	; 0x40
  hspi->TxISR       = NULL;
 8006f54:	6463      	str	r3, [r4, #68]	; 0x44
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f56:	68a3      	ldr	r3, [r4, #8]
  hspi->RxXferSize  = Size;
 8006f58:	87a7      	strh	r7, [r4, #60]	; 0x3c
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8006f5a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006f5e:	6823      	ldr	r3, [r4, #0]
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8006f60:	f8c4 8038 	str.w	r8, [r4, #56]	; 0x38
    SPI_1LINE_RX(hspi);
 8006f64:	bf02      	ittt	eq
 8006f66:	681a      	ldreq	r2, [r3, #0]
 8006f68:	f422 4280 	biceq.w	r2, r2, #16384	; 0x4000
 8006f6c:	601a      	streq	r2, [r3, #0]
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8006f6e:	681a      	ldr	r2, [r3, #0]
 8006f70:	0657      	lsls	r7, r2, #25
    __HAL_SPI_ENABLE(hspi);
 8006f72:	bf5e      	ittt	pl
 8006f74:	681a      	ldrpl	r2, [r3, #0]
 8006f76:	f042 0240 	orrpl.w	r2, r2, #64	; 0x40
 8006f7a:	601a      	strpl	r2, [r3, #0]
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8006f7c:	68e3      	ldr	r3, [r4, #12]
 8006f7e:	b1f3      	cbz	r3, 8006fbe <HAL_SPI_Receive+0xd4>
    while (hspi->RxXferCount > 0U)
 8006f80:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f82:	b29b      	uxth	r3, r3
 8006f84:	b1fb      	cbz	r3, 8006fc6 <HAL_SPI_Receive+0xdc>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006f86:	6823      	ldr	r3, [r4, #0]
 8006f88:	689a      	ldr	r2, [r3, #8]
 8006f8a:	07d2      	lsls	r2, r2, #31
 8006f8c:	d535      	bpl.n	8006ffa <HAL_SPI_Receive+0x110>
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8006f8e:	68da      	ldr	r2, [r3, #12]
 8006f90:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006f92:	f823 2b02 	strh.w	r2, [r3], #2
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8006f96:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006f98:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006f9a:	3b01      	subs	r3, #1
 8006f9c:	b29b      	uxth	r3, r3
 8006f9e:	87e3      	strh	r3, [r4, #62]	; 0x3e
 8006fa0:	e7ee      	b.n	8006f80 <HAL_SPI_Receive+0x96>
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	689a      	ldr	r2, [r3, #8]
 8006fa6:	07d0      	lsls	r0, r2, #31
 8006fa8:	d518      	bpl.n	8006fdc <HAL_SPI_Receive+0xf2>
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8006faa:	6ba2      	ldr	r2, [r4, #56]	; 0x38
 8006fac:	7b1b      	ldrb	r3, [r3, #12]
 8006fae:	7013      	strb	r3, [r2, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8006fb0:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006fb2:	3301      	adds	r3, #1
 8006fb4:	63a3      	str	r3, [r4, #56]	; 0x38
        hspi->RxXferCount--;
 8006fb6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006fb8:	3b01      	subs	r3, #1
 8006fba:	b29b      	uxth	r3, r3
 8006fbc:	87e3      	strh	r3, [r4, #62]	; 0x3e
    while (hspi->RxXferCount > 0U)
 8006fbe:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
 8006fc0:	b29b      	uxth	r3, r3
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d1ed      	bne.n	8006fa2 <HAL_SPI_Receive+0xb8>
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8006fc6:	4632      	mov	r2, r6
 8006fc8:	4629      	mov	r1, r5
 8006fca:	4620      	mov	r0, r4
 8006fcc:	f7ff fd4a 	bl	8006a64 <SPI_EndRxTransaction>
 8006fd0:	b9d8      	cbnz	r0, 800700a <HAL_SPI_Receive+0x120>
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006fd2:	6d60      	ldr	r0, [r4, #84]	; 0x54
    errorcode = HAL_BUSY;
 8006fd4:	3000      	adds	r0, #0
 8006fd6:	bf18      	it	ne
 8006fd8:	2001      	movne	r0, #1
 8006fda:	e007      	b.n	8006fec <HAL_SPI_Receive+0x102>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006fdc:	f7fd fe06 	bl	8004bec <HAL_GetTick>
 8006fe0:	1b80      	subs	r0, r0, r6
 8006fe2:	4285      	cmp	r5, r0
 8006fe4:	d8eb      	bhi.n	8006fbe <HAL_SPI_Receive+0xd4>
 8006fe6:	1c69      	adds	r1, r5, #1
 8006fe8:	d0e9      	beq.n	8006fbe <HAL_SPI_Receive+0xd4>
          errorcode = HAL_TIMEOUT;
 8006fea:	2003      	movs	r0, #3
  hspi->State = HAL_SPI_STATE_READY;
 8006fec:	2301      	movs	r3, #1
 8006fee:	f884 3051 	strb.w	r3, [r4, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
  return errorcode;
 8006ff8:	e78b      	b.n	8006f12 <HAL_SPI_Receive+0x28>
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8006ffa:	f7fd fdf7 	bl	8004bec <HAL_GetTick>
 8006ffe:	1b80      	subs	r0, r0, r6
 8007000:	4285      	cmp	r5, r0
 8007002:	d8bd      	bhi.n	8006f80 <HAL_SPI_Receive+0x96>
 8007004:	1c6b      	adds	r3, r5, #1
 8007006:	d0bb      	beq.n	8006f80 <HAL_SPI_Receive+0x96>
 8007008:	e7ef      	b.n	8006fea <HAL_SPI_Receive+0x100>
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800700a:	2320      	movs	r3, #32
 800700c:	6563      	str	r3, [r4, #84]	; 0x54
 800700e:	e7e0      	b.n	8006fd2 <HAL_SPI_Receive+0xe8>
    errorcode = HAL_BUSY;
 8007010:	2002      	movs	r0, #2
 8007012:	e7eb      	b.n	8006fec <HAL_SPI_Receive+0x102>
  __HAL_LOCK(hspi);
 8007014:	2002      	movs	r0, #2
 8007016:	e77c      	b.n	8006f12 <HAL_SPI_Receive+0x28>

08007018 <HAL_SPI_GetState>:
  return hspi->State;
 8007018:	f890 0051 	ldrb.w	r0, [r0, #81]	; 0x51
}
 800701c:	4770      	bx	lr
	...

08007020 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007020:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007024:	6806      	ldr	r6, [r0, #0]
 8007026:	68c2      	ldr	r2, [r0, #12]
 8007028:	6933      	ldr	r3, [r6, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800702a:	69c1      	ldr	r1, [r0, #28]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800702c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8007030:	4313      	orrs	r3, r2
 8007032:	6133      	str	r3, [r6, #16]
{
 8007034:	4604      	mov	r4, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007036:	6883      	ldr	r3, [r0, #8]
 8007038:	6900      	ldr	r0, [r0, #16]
  MODIFY_REG(huart->Instance->CR1,
 800703a:	68f2      	ldr	r2, [r6, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800703c:	4303      	orrs	r3, r0
 800703e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 8007040:	f422 4216 	bic.w	r2, r2, #38400	; 0x9600
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007044:	4303      	orrs	r3, r0
  MODIFY_REG(huart->Instance->CR1,
 8007046:	f022 020c 	bic.w	r2, r2, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800704a:	430b      	orrs	r3, r1
  MODIFY_REG(huart->Instance->CR1,
 800704c:	4313      	orrs	r3, r2
 800704e:	60f3      	str	r3, [r6, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007050:	6973      	ldr	r3, [r6, #20]
 8007052:	69a2      	ldr	r2, [r4, #24]
 8007054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007058:	4313      	orrs	r3, r2

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800705a:	f5b1 4f00 	cmp.w	r1, #32768	; 0x8000
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800705e:	6173      	str	r3, [r6, #20]
 8007060:	4b7a      	ldr	r3, [pc, #488]	; (800724c <UART_SetConfig+0x22c>)
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007062:	d17c      	bne.n	800715e <UART_SetConfig+0x13e>
  {
    /*-------------------------- USART BRR Configuration ---------------------*/
#if defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007064:	429e      	cmp	r6, r3
 8007066:	d003      	beq.n	8007070 <UART_SetConfig+0x50>
 8007068:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800706c:	429e      	cmp	r6, r3
 800706e:	d144      	bne.n	80070fa <UART_SetConfig+0xda>
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007070:	f7ff fb4c 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8007074:	2519      	movs	r5, #25
 8007076:	fb05 f300 	mul.w	r3, r5, r0
 800707a:	6860      	ldr	r0, [r4, #4]
 800707c:	f04f 0964 	mov.w	r9, #100	; 0x64
 8007080:	0040      	lsls	r0, r0, #1
 8007082:	fbb3 f3f0 	udiv	r3, r3, r0
 8007086:	fbb3 f3f9 	udiv	r3, r3, r9
 800708a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800708e:	f7ff fb3d 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8007092:	6863      	ldr	r3, [r4, #4]
 8007094:	4368      	muls	r0, r5
 8007096:	005b      	lsls	r3, r3, #1
 8007098:	fbb0 f7f3 	udiv	r7, r0, r3
 800709c:	f7ff fb36 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 80070a0:	6863      	ldr	r3, [r4, #4]
 80070a2:	4368      	muls	r0, r5
 80070a4:	005b      	lsls	r3, r3, #1
 80070a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80070aa:	fbb3 f3f9 	udiv	r3, r3, r9
 80070ae:	fb09 7313 	mls	r3, r9, r3, r7
 80070b2:	00db      	lsls	r3, r3, #3
 80070b4:	3332      	adds	r3, #50	; 0x32
 80070b6:	fbb3 f3f9 	udiv	r3, r3, r9
 80070ba:	005b      	lsls	r3, r3, #1
 80070bc:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 80070c0:	f7ff fb24 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 80070c4:	6862      	ldr	r2, [r4, #4]
 80070c6:	4368      	muls	r0, r5
 80070c8:	0052      	lsls	r2, r2, #1
 80070ca:	fbb0 faf2 	udiv	sl, r0, r2
 80070ce:	f7ff fb1d 	bl	800670c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80070d2:	6863      	ldr	r3, [r4, #4]
 80070d4:	4368      	muls	r0, r5
 80070d6:	005b      	lsls	r3, r3, #1
 80070d8:	fbb0 f3f3 	udiv	r3, r0, r3
 80070dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80070e0:	fb09 a313 	mls	r3, r9, r3, sl
 80070e4:	00db      	lsls	r3, r3, #3
 80070e6:	3332      	adds	r3, #50	; 0x32
 80070e8:	fbb3 f3f9 	udiv	r3, r3, r9
 80070ec:	f003 0307 	and.w	r3, r3, #7
 80070f0:	4443      	add	r3, r8
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80070f2:	443b      	add	r3, r7
 80070f4:	60b3      	str	r3, [r6, #8]
 80070f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      huart->Instance->BRR = UART_BRR_SAMPLING8(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80070fa:	f7ff faf7 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 80070fe:	2519      	movs	r5, #25
 8007100:	fb05 f300 	mul.w	r3, r5, r0
 8007104:	6860      	ldr	r0, [r4, #4]
 8007106:	f04f 0964 	mov.w	r9, #100	; 0x64
 800710a:	0040      	lsls	r0, r0, #1
 800710c:	fbb3 f3f0 	udiv	r3, r3, r0
 8007110:	fbb3 f3f9 	udiv	r3, r3, r9
 8007114:	ea4f 1803 	mov.w	r8, r3, lsl #4
 8007118:	f7ff fae8 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 800711c:	6863      	ldr	r3, [r4, #4]
 800711e:	4368      	muls	r0, r5
 8007120:	005b      	lsls	r3, r3, #1
 8007122:	fbb0 f7f3 	udiv	r7, r0, r3
 8007126:	f7ff fae1 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 800712a:	6863      	ldr	r3, [r4, #4]
 800712c:	4368      	muls	r0, r5
 800712e:	005b      	lsls	r3, r3, #1
 8007130:	fbb0 f3f3 	udiv	r3, r0, r3
 8007134:	fbb3 f3f9 	udiv	r3, r3, r9
 8007138:	fb09 7313 	mls	r3, r9, r3, r7
 800713c:	00db      	lsls	r3, r3, #3
 800713e:	3332      	adds	r3, #50	; 0x32
 8007140:	fbb3 f3f9 	udiv	r3, r3, r9
 8007144:	005b      	lsls	r3, r3, #1
 8007146:	f403 77f8 	and.w	r7, r3, #496	; 0x1f0
 800714a:	f7ff facf 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 800714e:	6862      	ldr	r2, [r4, #4]
 8007150:	4368      	muls	r0, r5
 8007152:	0052      	lsls	r2, r2, #1
 8007154:	fbb0 faf2 	udiv	sl, r0, r2
 8007158:	f7ff fac8 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 800715c:	e7b9      	b.n	80070d2 <UART_SetConfig+0xb2>
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800715e:	429e      	cmp	r6, r3
 8007160:	d002      	beq.n	8007168 <UART_SetConfig+0x148>
 8007162:	4b3b      	ldr	r3, [pc, #236]	; (8007250 <UART_SetConfig+0x230>)
 8007164:	429e      	cmp	r6, r3
 8007166:	d140      	bne.n	80071ea <UART_SetConfig+0x1ca>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK2Freq(), huart->Init.BaudRate);
 8007168:	f7ff fad0 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 800716c:	6867      	ldr	r7, [r4, #4]
 800716e:	2519      	movs	r5, #25
 8007170:	f04f 0964 	mov.w	r9, #100	; 0x64
 8007174:	fb05 f300 	mul.w	r3, r5, r0
 8007178:	00bf      	lsls	r7, r7, #2
 800717a:	fbb3 f3f7 	udiv	r3, r3, r7
 800717e:	fbb3 f3f9 	udiv	r3, r3, r9
 8007182:	011f      	lsls	r7, r3, #4
 8007184:	f7ff fac2 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8007188:	6863      	ldr	r3, [r4, #4]
 800718a:	4368      	muls	r0, r5
 800718c:	009b      	lsls	r3, r3, #2
 800718e:	fbb0 f8f3 	udiv	r8, r0, r3
 8007192:	f7ff fabb 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 8007196:	6863      	ldr	r3, [r4, #4]
 8007198:	4368      	muls	r0, r5
 800719a:	009b      	lsls	r3, r3, #2
 800719c:	fbb0 f3f3 	udiv	r3, r0, r3
 80071a0:	fbb3 f3f9 	udiv	r3, r3, r9
 80071a4:	fb09 8313 	mls	r3, r9, r3, r8
 80071a8:	011b      	lsls	r3, r3, #4
 80071aa:	3332      	adds	r3, #50	; 0x32
 80071ac:	fbb3 f3f9 	udiv	r3, r3, r9
 80071b0:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 80071b4:	f7ff faaa 	bl	800670c <HAL_RCC_GetPCLK2Freq>
 80071b8:	6862      	ldr	r2, [r4, #4]
 80071ba:	4368      	muls	r0, r5
 80071bc:	0092      	lsls	r2, r2, #2
 80071be:	fbb0 faf2 	udiv	sl, r0, r2
 80071c2:	f7ff faa3 	bl	800670c <HAL_RCC_GetPCLK2Freq>
      huart->Instance->BRR = UART_BRR_SAMPLING16(HAL_RCC_GetPCLK1Freq(), huart->Init.BaudRate);
 80071c6:	6863      	ldr	r3, [r4, #4]
 80071c8:	4368      	muls	r0, r5
 80071ca:	009b      	lsls	r3, r3, #2
 80071cc:	fbb0 f3f3 	udiv	r3, r0, r3
 80071d0:	fbb3 f3f9 	udiv	r3, r3, r9
 80071d4:	fb09 a313 	mls	r3, r9, r3, sl
 80071d8:	011b      	lsls	r3, r3, #4
 80071da:	3332      	adds	r3, #50	; 0x32
 80071dc:	fbb3 f3f9 	udiv	r3, r3, r9
 80071e0:	f003 030f 	and.w	r3, r3, #15
 80071e4:	ea43 0308 	orr.w	r3, r3, r8
 80071e8:	e783      	b.n	80070f2 <UART_SetConfig+0xd2>
 80071ea:	f7ff fa7f 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 80071ee:	6867      	ldr	r7, [r4, #4]
 80071f0:	2519      	movs	r5, #25
 80071f2:	f04f 0964 	mov.w	r9, #100	; 0x64
 80071f6:	fb05 f300 	mul.w	r3, r5, r0
 80071fa:	00bf      	lsls	r7, r7, #2
 80071fc:	fbb3 f3f7 	udiv	r3, r3, r7
 8007200:	fbb3 f3f9 	udiv	r3, r3, r9
 8007204:	011f      	lsls	r7, r3, #4
 8007206:	f7ff fa71 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 800720a:	6863      	ldr	r3, [r4, #4]
 800720c:	4368      	muls	r0, r5
 800720e:	009b      	lsls	r3, r3, #2
 8007210:	fbb0 f8f3 	udiv	r8, r0, r3
 8007214:	f7ff fa6a 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8007218:	6863      	ldr	r3, [r4, #4]
 800721a:	4368      	muls	r0, r5
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	fbb0 f3f3 	udiv	r3, r0, r3
 8007222:	fbb3 f3f9 	udiv	r3, r3, r9
 8007226:	fb09 8313 	mls	r3, r9, r3, r8
 800722a:	011b      	lsls	r3, r3, #4
 800722c:	3332      	adds	r3, #50	; 0x32
 800722e:	fbb3 f3f9 	udiv	r3, r3, r9
 8007232:	f003 08f0 	and.w	r8, r3, #240	; 0xf0
 8007236:	f7ff fa59 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 800723a:	6862      	ldr	r2, [r4, #4]
 800723c:	4368      	muls	r0, r5
 800723e:	0092      	lsls	r2, r2, #2
 8007240:	fbb0 faf2 	udiv	sl, r0, r2
 8007244:	f7ff fa52 	bl	80066ec <HAL_RCC_GetPCLK1Freq>
 8007248:	e7bd      	b.n	80071c6 <UART_SetConfig+0x1a6>
 800724a:	bf00      	nop
 800724c:	40011000 	.word	0x40011000
 8007250:	40011400 	.word	0x40011400

08007254 <UART_WaitOnFlagUntilTimeout.constprop.3>:
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
 8007254:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007256:	4604      	mov	r4, r0
 8007258:	460e      	mov	r6, r1
 800725a:	4617      	mov	r7, r2
 800725c:	461d      	mov	r5, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800725e:	6821      	ldr	r1, [r4, #0]
 8007260:	680b      	ldr	r3, [r1, #0]
 8007262:	ea36 0303 	bics.w	r3, r6, r3
 8007266:	d101      	bne.n	800726c <UART_WaitOnFlagUntilTimeout.constprop.3+0x18>
  return HAL_OK;
 8007268:	2000      	movs	r0, #0
}
 800726a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (Timeout != HAL_MAX_DELAY)
 800726c:	1c6b      	adds	r3, r5, #1
 800726e:	d0f7      	beq.n	8007260 <UART_WaitOnFlagUntilTimeout.constprop.3+0xc>
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007270:	b995      	cbnz	r5, 8007298 <UART_WaitOnFlagUntilTimeout.constprop.3+0x44>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8007272:	6823      	ldr	r3, [r4, #0]
 8007274:	68da      	ldr	r2, [r3, #12]
 8007276:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800727a:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800727c:	695a      	ldr	r2, [r3, #20]
 800727e:	f022 0201 	bic.w	r2, r2, #1
 8007282:	615a      	str	r2, [r3, #20]
        huart->gState  = HAL_UART_STATE_READY;
 8007284:	2320      	movs	r3, #32
 8007286:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800728a:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
        __HAL_UNLOCK(huart);
 800728e:	2300      	movs	r3, #0
 8007290:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
 8007294:	2003      	movs	r0, #3
 8007296:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8007298:	f7fd fca8 	bl	8004bec <HAL_GetTick>
 800729c:	1bc0      	subs	r0, r0, r7
 800729e:	4285      	cmp	r5, r0
 80072a0:	d2dd      	bcs.n	800725e <UART_WaitOnFlagUntilTimeout.constprop.3+0xa>
 80072a2:	e7e6      	b.n	8007272 <UART_WaitOnFlagUntilTimeout.constprop.3+0x1e>

080072a4 <HAL_UART_Init>:
{
 80072a4:	b510      	push	{r4, lr}
  if (huart == NULL)
 80072a6:	4604      	mov	r4, r0
 80072a8:	b340      	cbz	r0, 80072fc <HAL_UART_Init+0x58>
  if (huart->gState == HAL_UART_STATE_RESET)
 80072aa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 80072ae:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80072b2:	b91b      	cbnz	r3, 80072bc <HAL_UART_Init+0x18>
    huart->Lock = HAL_UNLOCKED;
 80072b4:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
    HAL_UART_MspInit(huart);
 80072b8:	f001 f9ae 	bl	8008618 <HAL_UART_MspInit>
  __HAL_UART_DISABLE(huart);
 80072bc:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 80072be:	2324      	movs	r3, #36	; 0x24
 80072c0:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  __HAL_UART_DISABLE(huart);
 80072c4:	68d3      	ldr	r3, [r2, #12]
 80072c6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072ca:	60d3      	str	r3, [r2, #12]
  UART_SetConfig(huart);
 80072cc:	4620      	mov	r0, r4
 80072ce:	f7ff fea7 	bl	8007020 <UART_SetConfig>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80072d2:	6823      	ldr	r3, [r4, #0]
 80072d4:	691a      	ldr	r2, [r3, #16]
 80072d6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80072da:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80072dc:	695a      	ldr	r2, [r3, #20]
 80072de:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80072e2:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 80072e4:	68da      	ldr	r2, [r3, #12]
 80072e6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80072ea:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ec:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 80072ee:	2320      	movs	r3, #32
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072f0:	63e0      	str	r0, [r4, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 80072f2:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 80072f6:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
  return HAL_OK;
 80072fa:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80072fc:	2001      	movs	r0, #1
}
 80072fe:	bd10      	pop	{r4, pc}

08007300 <HAL_UART_Transmit>:
{
 8007300:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007304:	461f      	mov	r7, r3
  if (huart->gState == HAL_UART_STATE_READY)
 8007306:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
 800730a:	2b20      	cmp	r3, #32
{
 800730c:	4604      	mov	r4, r0
 800730e:	460d      	mov	r5, r1
 8007310:	4690      	mov	r8, r2
  if (huart->gState == HAL_UART_STATE_READY)
 8007312:	d14f      	bne.n	80073b4 <HAL_UART_Transmit+0xb4>
    if ((pData == NULL) || (Size == 0U))
 8007314:	2900      	cmp	r1, #0
 8007316:	d04a      	beq.n	80073ae <HAL_UART_Transmit+0xae>
 8007318:	2a00      	cmp	r2, #0
 800731a:	d048      	beq.n	80073ae <HAL_UART_Transmit+0xae>
    __HAL_LOCK(huart);
 800731c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
 8007320:	2b01      	cmp	r3, #1
 8007322:	d047      	beq.n	80073b4 <HAL_UART_Transmit+0xb4>
 8007324:	2301      	movs	r3, #1
 8007326:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800732a:	2300      	movs	r3, #0
 800732c:	63c3      	str	r3, [r0, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800732e:	2321      	movs	r3, #33	; 0x21
 8007330:	f880 3039 	strb.w	r3, [r0, #57]	; 0x39
    tickstart = HAL_GetTick();
 8007334:	f7fd fc5a 	bl	8004bec <HAL_GetTick>
    huart->TxXferSize = Size;
 8007338:	f8a4 8024 	strh.w	r8, [r4, #36]	; 0x24
    tickstart = HAL_GetTick();
 800733c:	4606      	mov	r6, r0
    huart->TxXferCount = Size;
 800733e:	f8a4 8026 	strh.w	r8, [r4, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007342:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007344:	b29b      	uxth	r3, r3
 8007346:	b96b      	cbnz	r3, 8007364 <HAL_UART_Transmit+0x64>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007348:	463b      	mov	r3, r7
 800734a:	4632      	mov	r2, r6
 800734c:	2140      	movs	r1, #64	; 0x40
 800734e:	4620      	mov	r0, r4
 8007350:	f7ff ff80 	bl	8007254 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8007354:	b9b0      	cbnz	r0, 8007384 <HAL_UART_Transmit+0x84>
    huart->gState = HAL_UART_STATE_READY;
 8007356:	2320      	movs	r3, #32
 8007358:	f884 3039 	strb.w	r3, [r4, #57]	; 0x39
    __HAL_UNLOCK(huart);
 800735c:	f884 0038 	strb.w	r0, [r4, #56]	; 0x38
    return HAL_OK;
 8007360:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      huart->TxXferCount--;
 8007364:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8007366:	3b01      	subs	r3, #1
 8007368:	b29b      	uxth	r3, r3
 800736a:	84e3      	strh	r3, [r4, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800736c:	68a3      	ldr	r3, [r4, #8]
 800736e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007372:	4632      	mov	r2, r6
 8007374:	463b      	mov	r3, r7
 8007376:	f04f 0180 	mov.w	r1, #128	; 0x80
 800737a:	4620      	mov	r0, r4
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800737c:	d10e      	bne.n	800739c <HAL_UART_Transmit+0x9c>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800737e:	f7ff ff69 	bl	8007254 <UART_WaitOnFlagUntilTimeout.constprop.3>
 8007382:	b110      	cbz	r0, 800738a <HAL_UART_Transmit+0x8a>
          return HAL_TIMEOUT;
 8007384:	2003      	movs	r0, #3
 8007386:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800738a:	882b      	ldrh	r3, [r5, #0]
 800738c:	6822      	ldr	r2, [r4, #0]
 800738e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007392:	6053      	str	r3, [r2, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 8007394:	6923      	ldr	r3, [r4, #16]
 8007396:	b943      	cbnz	r3, 80073aa <HAL_UART_Transmit+0xaa>
          pData += 2U;
 8007398:	3502      	adds	r5, #2
 800739a:	e7d2      	b.n	8007342 <HAL_UART_Transmit+0x42>
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800739c:	f7ff ff5a 	bl	8007254 <UART_WaitOnFlagUntilTimeout.constprop.3>
 80073a0:	2800      	cmp	r0, #0
 80073a2:	d1ef      	bne.n	8007384 <HAL_UART_Transmit+0x84>
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 80073a4:	6823      	ldr	r3, [r4, #0]
 80073a6:	782a      	ldrb	r2, [r5, #0]
 80073a8:	605a      	str	r2, [r3, #4]
 80073aa:	3501      	adds	r5, #1
 80073ac:	e7c9      	b.n	8007342 <HAL_UART_Transmit+0x42>
      return  HAL_ERROR;
 80073ae:	2001      	movs	r0, #1
 80073b0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    return HAL_BUSY;
 80073b4:	2002      	movs	r0, #2
}
 80073b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080073ba <FMC_SDRAM_Init>:
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));   

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80073ba:	680b      	ldr	r3, [r1, #0]
 80073bc:	684a      	ldr	r2, [r1, #4]
 80073be:	f8d1 c010 	ldr.w	ip, [r1, #16]
 80073c2:	2b01      	cmp	r3, #1
{
 80073c4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  {    
    tmpr1 = Device->SDCR[FMC_SDRAM_BANK1];
 80073c8:	6803      	ldr	r3, [r0, #0]
 80073ca:	f8d1 9008 	ldr.w	r9, [r1, #8]
 80073ce:	f8d1 800c 	ldr.w	r8, [r1, #12]
 80073d2:	694d      	ldr	r5, [r1, #20]
 80073d4:	698c      	ldr	r4, [r1, #24]
 80073d6:	f8d1 e01c 	ldr.w	lr, [r1, #28]
 80073da:	6a0f      	ldr	r7, [r1, #32]
 80073dc:	6a4e      	ldr	r6, [r1, #36]	; 0x24
  if (Init->SDBank != FMC_SDRAM_BANK2) 
 80073de:	d014      	beq.n	800740a <FMC_SDRAM_Init+0x50>
    
    /* Clear NC, NR, MWID, NB, CAS, WP, SDCLK, RBURST, and RPIPE bits */
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 80073e0:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80073e4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80073e8:	431a      	orrs	r2, r3
 80073ea:	ea42 0209 	orr.w	r2, r2, r9
 80073ee:	ea42 0208 	orr.w	r2, r2, r8
 80073f2:	ea42 030c 	orr.w	r3, r2, ip
 80073f6:	432b      	orrs	r3, r5
 80073f8:	4323      	orrs	r3, r4
 80073fa:	ea43 030e 	orr.w	r3, r3, lr
 80073fe:	433b      	orrs	r3, r7
                         FMC_SDCR1_NB  | FMC_SDCR1_CAS | FMC_SDCR1_WP | \
                         FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
  
  
    tmpr1 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007400:	4333      	orrs	r3, r6
                                               Init->WriteProtection    |\
                                               Init->SDClockPeriod      |\
                                               Init->ReadBurst          |\
                                               Init->ReadPipeDelay
                                               );
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007402:	6003      	str	r3, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
  }  
  
  return HAL_OK;
}
 8007404:	2000      	movs	r0, #0
 8007406:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    tmpr2 = Device->SDCR[FMC_SDRAM_BANK2];
 800740a:	6841      	ldr	r1, [r0, #4]
    tmpr2 &= ((uint32_t)~(FMC_SDCR1_NC  | FMC_SDCR1_NR | FMC_SDCR1_MWID | \
 800740c:	f421 41ff 	bic.w	r1, r1, #32640	; 0x7f80
 8007410:	f021 017f 	bic.w	r1, r1, #127	; 0x7f
    tmpr1 &= ((uint32_t)~(FMC_SDCR1_SDCLK | FMC_SDCR1_RBURST | FMC_SDCR1_RPIPE));
 8007414:	f423 43f8 	bic.w	r3, r3, #31744	; 0x7c00
 8007418:	430a      	orrs	r2, r1
 800741a:	ea43 030e 	orr.w	r3, r3, lr
 800741e:	ea42 0209 	orr.w	r2, r2, r9
 8007422:	433b      	orrs	r3, r7
 8007424:	ea42 0208 	orr.w	r2, r2, r8
    tmpr1 |= (uint32_t)(Init->SDClockPeriod      |\
 8007428:	431e      	orrs	r6, r3
 800742a:	ea42 030c 	orr.w	r3, r2, ip
 800742e:	432b      	orrs	r3, r5
    tmpr2 |= (uint32_t)(Init->ColumnBitsNumber   |\
 8007430:	4323      	orrs	r3, r4
    Device->SDCR[FMC_SDRAM_BANK1] = tmpr1;
 8007432:	6006      	str	r6, [r0, #0]
    Device->SDCR[FMC_SDRAM_BANK2] = tmpr2;
 8007434:	6043      	str	r3, [r0, #4]
 8007436:	e7e5      	b.n	8007404 <FMC_SDRAM_Init+0x4a>

08007438 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));
  
  /* Set SDRAM device timing parameters */ 
  if (Bank != FMC_SDRAM_BANK2) 
 8007438:	2a01      	cmp	r2, #1
{
 800743a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800743c:	f8d1 c00c 	ldr.w	ip, [r1, #12]
 8007440:	688f      	ldr	r7, [r1, #8]
 8007442:	690d      	ldr	r5, [r1, #16]
 8007444:	694e      	ldr	r6, [r1, #20]
 8007446:	e891 4008 	ldmia.w	r1, {r3, lr}
 800744a:	6989      	ldr	r1, [r1, #24]
  if (Bank != FMC_SDRAM_BANK2) 
 800744c:	d01b      	beq.n	8007486 <FMC_SDRAM_Timing_Init+0x4e>
  { 
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 800744e:	6882      	ldr	r2, [r0, #8]
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
                          FMC_SDTR1_TRC  | FMC_SDTR1_TWR | FMC_SDTR1_TRP | \
                          FMC_SDTR1_TRCD));
    
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U) |\
 8007450:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 8007454:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 8007458:	3b01      	subs	r3, #1
 800745a:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 800745e:	431a      	orrs	r2, r3
                       (((Timing->SelfRefreshTime)-1U) << 8U)      |\
 8007460:	1e7b      	subs	r3, r7, #1
 8007462:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
                       (((Timing->RowCycleDelay)-1U) << 12U)       |\
 8007466:	f10c 3cff 	add.w	ip, ip, #4294967295
 800746a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
                       (((Timing->WriteRecoveryTime)-1U) <<16U)    |\
 800746e:	3d01      	subs	r5, #1
 8007470:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
                       (((Timing->RPDelay)-1U) << 20U)             |\
 8007474:	3e01      	subs	r6, #1
 8007476:	ea43 5306 	orr.w	r3, r3, r6, lsl #20
                       (((Timing->RCDDelay)-1U) << 24U));
 800747a:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)(((Timing->LoadToActiveDelay)-1U)           |\
 800747c:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 8007480:	6083      	str	r3, [r0, #8]

    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
  }
  return HAL_OK;
}
 8007482:	2000      	movs	r0, #0
 8007484:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmpr1 = Device->SDTR[FMC_SDRAM_BANK1];
 8007486:	6884      	ldr	r4, [r0, #8]
    tmpr2 = Device->SDTR[FMC_SDRAM_BANK2];
 8007488:	68c2      	ldr	r2, [r0, #12]
                       (((Timing->ExitSelfRefreshDelay)-1U) << 4U)  |\
 800748a:	f10e 3eff 	add.w	lr, lr, #4294967295
    tmpr2 &= ((uint32_t)~(FMC_SDTR1_TMRD  | FMC_SDTR1_TXSR | FMC_SDTR1_TRAS | \
 800748e:	f002 4270 	and.w	r2, r2, #4026531840	; 0xf0000000
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 8007492:	3b01      	subs	r3, #1
 8007494:	ea42 120e 	orr.w	r2, r2, lr, lsl #4
 8007498:	431a      	orrs	r2, r3
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 800749a:	f424 0470 	bic.w	r4, r4, #15728640	; 0xf00000
                       (((Timing->SelfRefreshTime)-1U) << 8U)       |\
 800749e:	1e7b      	subs	r3, r7, #1
 80074a0:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80074a4:	f10c 3cff 	add.w	ip, ip, #4294967295
    tmpr1 &= ((uint32_t)~(FMC_SDTR1_TRC | FMC_SDTR1_TRP));
 80074a8:	f424 4470 	bic.w	r4, r4, #61440	; 0xf000
                       (((Timing->WriteRecoveryTime)-1U) <<16U)     |\
 80074ac:	1e6b      	subs	r3, r5, #1
 80074ae:	ea44 340c 	orr.w	r4, r4, ip, lsl #12
                        (((Timing->RPDelay)-1U) << 20U)); 
 80074b2:	3e01      	subs	r6, #1
 80074b4:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
                       (((Timing->RCDDelay)-1U) << 24U)));   
 80074b8:	3901      	subs	r1, #1
    tmpr1 |= (uint32_t)((((Timing->RowCycleDelay)-1U) << 12U)       |\
 80074ba:	ea44 5606 	orr.w	r6, r4, r6, lsl #20
    tmpr2 |= (uint32_t)((((Timing->LoadToActiveDelay)-1U)           |\
 80074be:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    Device->SDTR[FMC_SDRAM_BANK1] = tmpr1;
 80074c2:	6086      	str	r6, [r0, #8]
    Device->SDTR[FMC_SDRAM_BANK2] = tmpr2;
 80074c4:	60c3      	str	r3, [r0, #12]
 80074c6:	e7dc      	b.n	8007482 <FMC_SDRAM_Timing_Init+0x4a>

080074c8 <FMC_SDRAM_SendCommand>:
  * @param  Timing Pointer to SDRAM Timing structure
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */  
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device, FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 80074c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  __IO uint32_t tmpr = 0U;
 80074ca:	2300      	movs	r3, #0
 80074cc:	9301      	str	r3, [sp, #4]
{
 80074ce:	4615      	mov	r5, r2
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));  

  /* Set command register */
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074d0:	e891 000c 	ldmia.w	r1, {r2, r3}
 80074d4:	4313      	orrs	r3, r2
                    (Command->CommandTarget)                |\
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
                    ((Command->ModeRegisterDefinition) << 9U)
 80074d6:	68ca      	ldr	r2, [r1, #12]
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074d8:	ea43 2342 	orr.w	r3, r3, r2, lsl #9
                    (((Command->AutoRefreshNumber)-1U) << 5U) |\
 80074dc:	688a      	ldr	r2, [r1, #8]
 80074de:	3a01      	subs	r2, #1
  tmpr = (uint32_t)((Command->CommandMode)                  |\
 80074e0:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 80074e4:	9301      	str	r3, [sp, #4]
                    );
    
  Device->SDCMR = tmpr;
 80074e6:	9b01      	ldr	r3, [sp, #4]
 80074e8:	6103      	str	r3, [r0, #16]
{
 80074ea:	4604      	mov	r4, r0

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80074ec:	f7fd fb7e 	bl	8004bec <HAL_GetTick>
 80074f0:	4606      	mov	r6, r0

  /* Wait until command is send */
  while(HAL_IS_BIT_SET(Device->SDSR, FMC_SDSR_BUSY))
 80074f2:	69a0      	ldr	r0, [r4, #24]
 80074f4:	f010 0020 	ands.w	r0, r0, #32
 80074f8:	d003      	beq.n	8007502 <FMC_SDRAM_SendCommand+0x3a>
  {
    /* Check for the Timeout */
    if(Timeout != HAL_MAX_DELAY)
 80074fa:	1c6b      	adds	r3, r5, #1
 80074fc:	d0f9      	beq.n	80074f2 <FMC_SDRAM_SendCommand+0x2a>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80074fe:	b915      	cbnz	r5, 8007506 <FMC_SDRAM_SendCommand+0x3e>
      {
        return HAL_TIMEOUT;
 8007500:	2003      	movs	r0, #3
      }
    }
  }

  return HAL_OK;
}
 8007502:	b002      	add	sp, #8
 8007504:	bd70      	pop	{r4, r5, r6, pc}
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007506:	f7fd fb71 	bl	8004bec <HAL_GetTick>
 800750a:	1b80      	subs	r0, r0, r6
 800750c:	4285      	cmp	r5, r0
 800750e:	d2f0      	bcs.n	80074f2 <FMC_SDRAM_SendCommand+0x2a>
 8007510:	e7f6      	b.n	8007500 <FMC_SDRAM_SendCommand+0x38>

08007512 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));
  
  /* Set the refresh rate in command register */
  Device->SDRTR |= (RefreshRate<<1U);
 8007512:	6943      	ldr	r3, [r0, #20]
 8007514:	ea43 0141 	orr.w	r1, r3, r1, lsl #1
 8007518:	6141      	str	r1, [r0, #20]
  
  return HAL_OK;   
}
 800751a:	2000      	movs	r0, #0
 800751c:	4770      	bx	lr
	...

08007520 <ai_network_data_weights_get>:
    0xa0, 0xbc, 0x67, 0x88, 0x77, 0xbd, 0x9d, 0xbb, 0xb7,
    0x3c, 0x52, 0x0e, 0x23, 0xbc, 0x19, 0xa8, 0x25, 0x3d
  };

  return AI_HANDLE_PTR(s_network_weights);
}
 8007520:	4800      	ldr	r0, [pc, #0]	; (8007524 <ai_network_data_weights_get+0x4>)
 8007522:	4770      	bx	lr
 8007524:	0800d5d0 	.word	0x0800d5d0

08007528 <ai_network_get_info>:
/**  PUBLIC APIs SECTION  *****************************************************/

AI_API_ENTRY
ai_bool ai_network_get_info(
  ai_handle network, ai_network_report* report)
{
 8007528:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800752c:	b0a0      	sub	sp, #128	; 0x80
 800752e:	460f      	mov	r7, r1
  ai_network* net_ctx = AI_NETWORK_ACQUIRE_CTX(network);
 8007530:	f7f8 fef5 	bl	800031e <ai_platform_context_acquire>
 8007534:	4604      	mov	r4, r0

  if ( report && net_ctx )
 8007536:	2f00      	cmp	r7, #0
 8007538:	d06c      	beq.n	8007614 <ai_network_get_info+0xec>
 800753a:	2800      	cmp	r0, #0
 800753c:	d06c      	beq.n	8007618 <ai_network_get_info+0xf0>
      .model_signature   = AI_NETWORK_MODEL_SIGNATURE,
      .model_datetime    = AI_TOOLS_DATE_TIME,
      
      .compile_datetime  = AI_TOOLS_COMPILE_TIME,
      
      .runtime_revision  = ai_platform_runtime_get_revision(),
 800753e:	f7f8 fe88 	bl	8000252 <ai_platform_runtime_get_revision>
 8007542:	4680      	mov	r8, r0
    ai_network_report r = {
 8007544:	f7f8 fe9d 	bl	8000282 <ai_platform_runtime_get_version>
 8007548:	9006      	str	r0, [sp, #24]
 800754a:	f7f8 feb4 	bl	80002b6 <ai_platform_api_get_version>
 800754e:	900a      	str	r0, [sp, #40]	; 0x28
 8007550:	f7f8 fecb 	bl	80002ea <ai_platform_interface_api_get_version>
 8007554:	f104 0324 	add.w	r3, r4, #36	; 0x24
 8007558:	900b      	str	r0, [sp, #44]	; 0x2c
 800755a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800755c:	ae16      	add	r6, sp, #88	; 0x58
 800755e:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
 8007562:	f104 0314 	add.w	r3, r4, #20
 8007566:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8007568:	ae1a      	add	r6, sp, #104	; 0x68
 800756a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
                              10,
                              1, NULL),
      .activations       = net_ctx->activations,
      .weights           = net_ctx->params,
      .n_nodes           = 0,
      .signature         = net_ctx->signature,
 800756e:	6860      	ldr	r0, [r4, #4]
    };

    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8007570:	6be2      	ldr	r2, [r4, #60]	; 0x3c
 8007572:	2500      	movs	r5, #0
 8007574:	2a00      	cmp	r2, #0
 8007576:	d146      	bne.n	8007606 <ai_network_get_info+0xde>
    {
      r.n_nodes++;
    }

    *report = r;
 8007578:	4b28      	ldr	r3, [pc, #160]	; (800761c <ai_network_get_info+0xf4>)
 800757a:	9301      	str	r3, [sp, #4]
 800757c:	4b28      	ldr	r3, [pc, #160]	; (8007620 <ai_network_get_info+0xf8>)
 800757e:	9302      	str	r3, [sp, #8]
 8007580:	4b28      	ldr	r3, [pc, #160]	; (8007624 <ai_network_get_info+0xfc>)
 8007582:	9303      	str	r3, [sp, #12]
 8007584:	4b28      	ldr	r3, [pc, #160]	; (8007628 <ai_network_get_info+0x100>)
 8007586:	9304      	str	r3, [sp, #16]
 8007588:	4b28      	ldr	r3, [pc, #160]	; (800762c <ai_network_get_info+0x104>)
 800758a:	9307      	str	r3, [sp, #28]
 800758c:	4928      	ldr	r1, [pc, #160]	; (8007630 <ai_network_get_info+0x108>)
 800758e:	910c      	str	r1, [sp, #48]	; 0x30
 8007590:	2303      	movs	r3, #3
 8007592:	211c      	movs	r1, #28
 8007594:	f88d 3020 	strb.w	r3, [sp, #32]
 8007598:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
 800759c:	2301      	movs	r3, #1
 800759e:	f88d 2022 	strb.w	r2, [sp, #34]	; 0x22
 80075a2:	f88d 2023 	strb.w	r2, [sp, #35]	; 0x23
 80075a6:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
 80075aa:	f88d 3025 	strb.w	r3, [sp, #37]	; 0x25
 80075ae:	f88d 2026 	strb.w	r2, [sp, #38]	; 0x26
 80075b2:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
 80075b6:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
 80075ba:	f8ad 3036 	strh.w	r3, [sp, #54]	; 0x36
 80075be:	f8ad 3038 	strh.w	r3, [sp, #56]	; 0x38
 80075c2:	f8ad 303a 	strh.w	r3, [sp, #58]	; 0x3a
 80075c6:	f8ad 103c 	strh.w	r1, [sp, #60]	; 0x3c
 80075ca:	f8ad 103e 	strh.w	r1, [sp, #62]	; 0x3e
 80075ce:	9310      	str	r3, [sp, #64]	; 0x40
 80075d0:	9211      	str	r2, [sp, #68]	; 0x44
 80075d2:	f8ad 3048 	strh.w	r3, [sp, #72]	; 0x48
 80075d6:	f8ad 304a 	strh.w	r3, [sp, #74]	; 0x4a
 80075da:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80075de:	f8ad 304e 	strh.w	r3, [sp, #78]	; 0x4e
 80075e2:	9215      	str	r2, [sp, #84]	; 0x54
 80075e4:	230a      	movs	r3, #10
 80075e6:	901f      	str	r0, [sp, #124]	; 0x7c
 80075e8:	227c      	movs	r2, #124	; 0x7c
 80075ea:	a901      	add	r1, sp, #4
 80075ec:	4638      	mov	r0, r7
 80075ee:	f8cd 8014 	str.w	r8, [sp, #20]
 80075f2:	9314      	str	r3, [sp, #80]	; 0x50
 80075f4:	951e      	str	r5, [sp, #120]	; 0x78
 80075f6:	f001 f8bc 	bl	8008772 <memcpy>

    return ( r.n_nodes>0 ) ? true : false;
 80075fa:	1c28      	adds	r0, r5, #0
 80075fc:	bf18      	it	ne
 80075fe:	2001      	movne	r0, #1
  }
  
  return false;
}
 8007600:	b020      	add	sp, #128	; 0x80
 8007602:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    AI_FOR_EACH_NODE_DO(node, net_ctx->input_node)
 8007606:	6893      	ldr	r3, [r2, #8]
 8007608:	3501      	adds	r5, #1
 800760a:	429a      	cmp	r2, r3
 800760c:	bf14      	ite	ne
 800760e:	461a      	movne	r2, r3
 8007610:	2200      	moveq	r2, #0
 8007612:	e7af      	b.n	8007574 <ai_network_get_info+0x4c>
  return false;
 8007614:	4638      	mov	r0, r7
 8007616:	e7f3      	b.n	8007600 <ai_network_get_info+0xd8>
 8007618:	e7f2      	b.n	8007600 <ai_network_get_info+0xd8>
 800761a:	bf00      	nop
 800761c:	081415f8 	.word	0x081415f8
 8007620:	08141600 	.word	0x08141600
 8007624:	08141621 	.word	0x08141621
 8007628:	0814163a 	.word	0x0814163a
 800762c:	0814164f 	.word	0x0814164f
 8007630:	00b87376 	.word	0x00b87376

08007634 <ai_network_get_error>:

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 8007634:	b508      	push	{r3, lr}
  return ai_platform_network_get_error(network);
 8007636:	f7f8 fe97 	bl	8000368 <ai_platform_network_get_error>
}
 800763a:	bd08      	pop	{r3, pc}

0800763c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800763c:	b507      	push	{r0, r1, r2, lr}
  return ai_platform_network_create(
 800763e:	2300      	movs	r3, #0
 8007640:	9301      	str	r3, [sp, #4]
 8007642:	2301      	movs	r3, #1
 8007644:	9300      	str	r3, [sp, #0]
 8007646:	4a03      	ldr	r2, [pc, #12]	; (8007654 <ai_network_create+0x18>)
 8007648:	f7f8 feb6 	bl	80003b8 <ai_platform_network_create>
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800764c:	b003      	add	sp, #12
 800764e:	f85d fb04 	ldr.w	pc, [sp], #4
 8007652:	bf00      	nop
 8007654:	20000570 	.word	0x20000570

08007658 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
  return ai_platform_network_destroy(network);
 8007658:	f7f8 beec 	b.w	8000434 <ai_platform_network_destroy>

0800765c <ai_network_init>:
}

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800765c:	b538      	push	{r3, r4, r5, lr}
 800765e:	460c      	mov	r4, r1
  ai_network* net_ctx = ai_platform_network_init(network, params);
 8007660:	f7f8 ff07 	bl	8000472 <ai_platform_network_init>
  if ( !net_ctx ) return false;
 8007664:	2800      	cmp	r0, #0
 8007666:	d072      	beq.n	800774e <ai_network_init+0xf2>
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007668:	4a39      	ldr	r2, [pc, #228]	; (8007750 <ai_network_init+0xf4>)
 800766a:	68e3      	ldr	r3, [r4, #12]
 800766c:	6811      	ldr	r1, [r2, #0]
  conv2d_1_weights_array.data = weights + 0;
 800766e:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8007670:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007674:	6011      	str	r1, [r2, #0]
  conv2d_1_weights_array.data_start = weights + 0;
 8007676:	60d3      	str	r3, [r2, #12]
  conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8007678:	4a36      	ldr	r2, [pc, #216]	; (8007754 <ai_network_init+0xf8>)
 800767a:	6811      	ldr	r1, [r2, #0]
 800767c:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007680:	6011      	str	r1, [r2, #0]
  conv2d_1_bias_array.data = weights + 1152;
 8007682:	f503 6190 	add.w	r1, r3, #1152	; 0x480
 8007686:	6091      	str	r1, [r2, #8]
  conv2d_1_bias_array.data_start = weights + 1152;
 8007688:	60d1      	str	r1, [r2, #12]
  conv2d_2_weights_array.format |= AI_FMT_FLAG_CONST;
 800768a:	4a33      	ldr	r2, [pc, #204]	; (8007758 <ai_network_init+0xfc>)
 800768c:	6811      	ldr	r1, [r2, #0]
 800768e:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 8007692:	6011      	str	r1, [r2, #0]
  conv2d_2_weights_array.data = weights + 1280;
 8007694:	f503 61a0 	add.w	r1, r3, #1280	; 0x500
 8007698:	6091      	str	r1, [r2, #8]
  conv2d_2_weights_array.data_start = weights + 1280;
 800769a:	60d1      	str	r1, [r2, #12]
  conv2d_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800769c:	4a2f      	ldr	r2, [pc, #188]	; (800775c <ai_network_init+0x100>)
 800769e:	6811      	ldr	r1, [r2, #0]
 80076a0:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80076a4:	6011      	str	r1, [r2, #0]
  conv2d_2_bias_array.data = weights + 75008;
 80076a6:	f503 3192 	add.w	r1, r3, #74752	; 0x12400
 80076aa:	f501 7180 	add.w	r1, r1, #256	; 0x100
 80076ae:	6091      	str	r1, [r2, #8]
  conv2d_2_bias_array.data_start = weights + 75008;
 80076b0:	60d1      	str	r1, [r2, #12]
  dense_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80076b2:	492b      	ldr	r1, [pc, #172]	; (8007760 <ai_network_init+0x104>)
 80076b4:	680a      	ldr	r2, [r1, #0]
 80076b6:	f042 4200 	orr.w	r2, r2, #2147483648	; 0x80000000
 80076ba:	600a      	str	r2, [r1, #0]
  dense_1_weights_array.data = weights + 75264;
 80076bc:	f503 3293 	add.w	r2, r3, #75264	; 0x12600
 80076c0:	608a      	str	r2, [r1, #8]
  dense_1_weights_array.data_start = weights + 1254912;
 80076c2:	f503 1299 	add.w	r2, r3, #1253376	; 0x132000
 80076c6:	f502 65c0 	add.w	r5, r2, #1536	; 0x600
 80076ca:	60cd      	str	r5, [r1, #12]
  dense_1_bias_array.format |= AI_FMT_FLAG_CONST;
 80076cc:	4925      	ldr	r1, [pc, #148]	; (8007764 <ai_network_init+0x108>)
 80076ce:	680d      	ldr	r5, [r1, #0]
 80076d0:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80076d4:	600d      	str	r5, [r1, #0]
  dense_1_bias_array.data = weights + 1255936;
 80076d6:	f502 6520 	add.w	r5, r2, #2560	; 0xa00
 80076da:	608d      	str	r5, [r1, #8]
  dense_1_bias_array.data_start = weights + 1255936;
 80076dc:	60cd      	str	r5, [r1, #12]
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80076de:	4922      	ldr	r1, [pc, #136]	; (8007768 <ai_network_init+0x10c>)
  dense_2_weights_array.data = weights + 1256448;
 80076e0:	f502 6240 	add.w	r2, r2, #3072	; 0xc00
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80076e4:	680d      	ldr	r5, [r1, #0]
  dense_2_weights_array.data = weights + 1256448;
 80076e6:	608a      	str	r2, [r1, #8]
  dense_2_weights_array.data_start = weights + 1256448;
 80076e8:	60ca      	str	r2, [r1, #12]
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80076ea:	4a20      	ldr	r2, [pc, #128]	; (800776c <ai_network_init+0x110>)
  dense_2_weights_array.format |= AI_FMT_FLAG_CONST;
 80076ec:	f045 4500 	orr.w	r5, r5, #2147483648	; 0x80000000
 80076f0:	600d      	str	r5, [r1, #0]
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80076f2:	6811      	ldr	r1, [r2, #0]
  dense_2_bias_array.data = weights + 1261568;
 80076f4:	f503 139a 	add.w	r3, r3, #1261568	; 0x134000
  dense_2_bias_array.format |= AI_FMT_FLAG_CONST;
 80076f8:	f041 4100 	orr.w	r1, r1, #2147483648	; 0x80000000
 80076fc:	6011      	str	r1, [r2, #0]
  dense_2_bias_array.data = weights + 1261568;
 80076fe:	6093      	str	r3, [r2, #8]
  dense_2_bias_array.data_start = weights + 1261568;
 8007700:	60d3      	str	r3, [r2, #12]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8007702:	6882      	ldr	r2, [r0, #8]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8007704:	69e3      	ldr	r3, [r4, #28]
  AI_FLAG_SET(net_ctx->flags, AI_NETWORK_FLAG_OUT_COPY);
 8007706:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800770a:	6082      	str	r2, [r0, #8]
    input_0_output_array.data = NULL;
 800770c:	4a18      	ldr	r2, [pc, #96]	; (8007770 <ai_network_init+0x114>)
 800770e:	2100      	movs	r1, #0
 8007710:	6091      	str	r1, [r2, #8]
  input_0_output_array.data_start = NULL;
 8007712:	60d1      	str	r1, [r2, #12]
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 8007714:	3303      	adds	r3, #3
  conv2d_1_output_array.data = activations + 0;
 8007716:	4a17      	ldr	r2, [pc, #92]	; (8007774 <ai_network_init+0x118>)
  conv2d_2_output_in_array.data = activations + 86528;
 8007718:	4917      	ldr	r1, [pc, #92]	; (8007778 <ai_network_init+0x11c>)
  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800771a:	f023 0303 	bic.w	r3, r3, #3
  conv2d_1_output_array.data = activations + 0;
 800771e:	6093      	str	r3, [r2, #8]
  conv2d_1_output_array.data_start = activations + 0;
 8007720:	60d3      	str	r3, [r2, #12]
  conv2d_2_output_in_array.data = activations + 86528;
 8007722:	f503 32a9 	add.w	r2, r3, #86528	; 0x15200
 8007726:	608a      	str	r2, [r1, #8]
  conv2d_2_output_in_array.data_start = activations + 86528;
 8007728:	60ca      	str	r2, [r1, #12]
  conv2d_2_output_out_array.data = activations + 86528;
 800772a:	4914      	ldr	r1, [pc, #80]	; (800777c <ai_network_init+0x120>)
 800772c:	608a      	str	r2, [r1, #8]
  conv2d_2_output_out_array.data_start = activations + 86528;
 800772e:	60ca      	str	r2, [r1, #12]
  dense_1_output_array.data = activations + 0;
 8007730:	4a13      	ldr	r2, [pc, #76]	; (8007780 <ai_network_init+0x124>)
 8007732:	6093      	str	r3, [r2, #8]
  dense_1_output_array.data_start = activations + 0;
 8007734:	60d3      	str	r3, [r2, #12]
  dense_1_nl_output_array.data = activations + 0;
 8007736:	4a13      	ldr	r2, [pc, #76]	; (8007784 <ai_network_init+0x128>)
 8007738:	6093      	str	r3, [r2, #8]
  dense_1_nl_output_array.data_start = activations + 0;
 800773a:	60d3      	str	r3, [r2, #12]
  dense_2_output_array.data = activations + 512;
 800773c:	4a12      	ldr	r2, [pc, #72]	; (8007788 <ai_network_init+0x12c>)
 800773e:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8007742:	6093      	str	r3, [r2, #8]
  dense_2_output_array.data_start = activations + 512;
 8007744:	60d3      	str	r3, [r2, #12]
  dense_2_nl_output_array.data = activations + 512;
 8007746:	4a11      	ldr	r2, [pc, #68]	; (800778c <ai_network_init+0x130>)

  ai_bool ok = true;
  ok &= network_configure_weights(net_ctx, &params->params);
  ok &= network_configure_activations(net_ctx, &params->activations);
  
  return ok;
 8007748:	2001      	movs	r0, #1
  dense_2_nl_output_array.data = activations + 512;
 800774a:	6093      	str	r3, [r2, #8]
  dense_2_nl_output_array.data_start = activations + 512;
 800774c:	60d3      	str	r3, [r2, #12]
}
 800774e:	bd38      	pop	{r3, r4, r5, pc}
 8007750:	2000023c 	.word	0x2000023c
 8007754:	200001a4 	.word	0x200001a4
 8007758:	20000360 	.word	0x20000360
 800775c:	20000270 	.word	0x20000270
 8007760:	20000460 	.word	0x20000460
 8007764:	20000394 	.word	0x20000394
 8007768:	20000560 	.word	0x20000560
 800776c:	20000494 	.word	0x20000494
 8007770:	200005dc 	.word	0x200005dc
 8007774:	20000208 	.word	0x20000208
 8007778:	200002f8 	.word	0x200002f8
 800777c:	2000032c 	.word	0x2000032c
 8007780:	2000042c 	.word	0x2000042c
 8007784:	200003f8 	.word	0x200003f8
 8007788:	2000052c 	.word	0x2000052c
 800778c:	200004f8 	.word	0x200004f8

08007790 <ai_network_run>:

AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
  return ai_platform_network_process(network, input, output);
 8007790:	f7f8 beba 	b.w	8000508 <ai_platform_network_process>

08007794 <MX_X_CUBE_AI_Init>:
  extern float PxlNet2D[28][28];
  const ai_float *pnum;
  uint32_t classification_result;
  /* USER CODE END PV */
void MX_X_CUBE_AI_Init(void)
{
 8007794:	b530      	push	{r4, r5, lr}
 8007796:	b08b      	sub	sp, #44	; 0x2c
    MX_UARTx_Init();
 8007798:	f000 ff22 	bl	80085e0 <MX_USART1_UART_Init>
    /* USER CODE BEGIN 0 */
    const ai_network_params net_params = {
 800779c:	f248 0310 	movw	r3, #32784	; 0x8010
 80077a0:	2401      	movs	r4, #1
 80077a2:	f8ad 3008 	strh.w	r3, [sp, #8]
 80077a6:	4b21      	ldr	r3, [pc, #132]	; (800782c <MX_X_CUBE_AI_Init+0x98>)
 80077a8:	f8ad 400a 	strh.w	r4, [sp, #10]
 80077ac:	f8ad 400c 	strh.w	r4, [sp, #12]
 80077b0:	f8ad 400e 	strh.w	r4, [sp, #14]
 80077b4:	9304      	str	r3, [sp, #16]
        AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 80077b6:	f7ff feb3 	bl	8007520 <ai_network_data_weights_get>
    const ai_network_params net_params = {
 80077ba:	2310      	movs	r3, #16
 80077bc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80077c0:	4b1b      	ldr	r3, [pc, #108]	; (8007830 <MX_X_CUBE_AI_Init+0x9c>)
 80077c2:	9308      	str	r3, [sp, #32]
 80077c4:	4b1b      	ldr	r3, [pc, #108]	; (8007834 <MX_X_CUBE_AI_Init+0xa0>)
 80077c6:	9309      	str	r3, [sp, #36]	; 0x24
     	{
    		/* AI network already initialized */
    	}

      /* Enable CRC clock to use AI Libraries */
      __HAL_RCC_CRC_CLK_ENABLE();
 80077c8:	2100      	movs	r1, #0
 80077ca:	4b1b      	ldr	r3, [pc, #108]	; (8007838 <MX_X_CUBE_AI_Init+0xa4>)
 80077cc:	9101      	str	r1, [sp, #4]
 80077ce:	6b1a      	ldr	r2, [r3, #48]	; 0x30
    const ai_network_params net_params = {
 80077d0:	9005      	str	r0, [sp, #20]
      __HAL_RCC_CRC_CLK_ENABLE();
 80077d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    const ai_network_params net_params = {
 80077d6:	f8ad 401a 	strh.w	r4, [sp, #26]
 80077da:	f8ad 401c 	strh.w	r4, [sp, #28]
 80077de:	f8ad 401e 	strh.w	r4, [sp, #30]
      __HAL_RCC_CRC_CLK_ENABLE();
 80077e2:	631a      	str	r2, [r3, #48]	; 0x30
 80077e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      error = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80077e6:	4c15      	ldr	r4, [pc, #84]	; (800783c <MX_X_CUBE_AI_Init+0xa8>)
      __HAL_RCC_CRC_CLK_ENABLE();
 80077e8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80077ec:	9301      	str	r3, [sp, #4]
      error = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80077ee:	4620      	mov	r0, r4
      __HAL_RCC_CRC_CLK_ENABLE();
 80077f0:	9b01      	ldr	r3, [sp, #4]
      error = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 80077f2:	f7ff ff23 	bl	800763c <ai_network_create>
      if (error.type != AI_ERROR_NONE)
 80077f6:	f010 0fff 	tst.w	r0, #255	; 0xff
 80077fa:	d000      	beq.n	80077fe <MX_X_CUBE_AI_Init+0x6a>
 80077fc:	e7fe      	b.n	80077fc <MX_X_CUBE_AI_Init+0x68>
    		/* ERROR */
    		while(1);
      }

      /* Show network info */
      if (!ai_network_get_info(network, &report) )
 80077fe:	4910      	ldr	r1, [pc, #64]	; (8007840 <MX_X_CUBE_AI_Init+0xac>)
 8007800:	6820      	ldr	r0, [r4, #0]
 8007802:	f7ff fe91 	bl	8007528 <ai_network_get_info>
 8007806:	b900      	cbnz	r0, 800780a <MX_X_CUBE_AI_Init+0x76>
 8007808:	e7fe      	b.n	8007808 <MX_X_CUBE_AI_Init+0x74>
    	{
    		/* *ERROR */
    		while(1);
    	}

      if (!ai_network_init(network, &net_params))
 800780a:	a902      	add	r1, sp, #8
 800780c:	6820      	ldr	r0, [r4, #0]
 800780e:	f7ff ff25 	bl	800765c <ai_network_init>
 8007812:	4605      	mov	r5, r0
 8007814:	b938      	cbnz	r0, 8007826 <MX_X_CUBE_AI_Init+0x92>
    	{
        error = ai_network_get_error(network);
 8007816:	6820      	ldr	r0, [r4, #0]
 8007818:	f7ff ff0c 	bl	8007634 <ai_network_get_error>
        ai_network_destroy(&network);
 800781c:	4620      	mov	r0, r4
 800781e:	f7ff ff1b 	bl	8007658 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 8007822:	6025      	str	r5, [r4, #0]
 8007824:	e7fe      	b.n	8007824 <MX_X_CUBE_AI_Init+0x90>
    		while(1);
    	}

    /* USER CODE END 0 */
}
 8007826:	b00b      	add	sp, #44	; 0x2c
 8007828:	bd30      	pop	{r4, r5, pc}
 800782a:	bf00      	nop
 800782c:	00134028 	.word	0x00134028
 8007830:	00027204 	.word	0x00027204
 8007834:	2000086c 	.word	0x2000086c
 8007838:	40023800 	.word	0x40023800
 800783c:	20027a70 	.word	0x20027a70
 8007840:	20027a74 	.word	0x20027a74

08007844 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8007844:	b510      	push	{r4, lr}
 8007846:	b08a      	sub	sp, #40	; 0x28

	ai_float dense_2_out[AI_NETWORK_OUT_1_SIZE] = {0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0};

	/* Clear buffer destination. */
	//printf("memset(dense_2_out, 0, sizeof(ai_float)*AI_NETWORK_OUT_1_SIZE);\r\n");
	memset(dense_2_out, 0, sizeof(ai_float)*AI_NETWORK_OUT_1_SIZE);
 8007848:	2228      	movs	r2, #40	; 0x28
 800784a:	2100      	movs	r1, #0
 800784c:	4668      	mov	r0, sp
 800784e:	f000 ff9b 	bl	8008788 <memset>
	/* I/O Buffers assignment */
	 //pnum=&PxlNet[0];
	pnum=&PxlNet2D[0][0];
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <MX_X_CUBE_AI_Process+0x64>)
//	j=0;
//	for(y=0;y<28;y++){
//		for(x=0;x<28;x++)
//			pnum[j++]=PxlNet2D[y][x];
//	}
	input.data  = AI_HANDLE_PTR((const ai_float *) pnum);
 8007854:	4915      	ldr	r1, [pc, #84]	; (80078ac <MX_X_CUBE_AI_Process+0x68>)
	pnum=&PxlNet2D[0][0];
 8007856:	4b16      	ldr	r3, [pc, #88]	; (80078b0 <MX_X_CUBE_AI_Process+0x6c>)
 8007858:	6013      	str	r3, [r2, #0]
	input.data  = AI_HANDLE_PTR((const ai_float *) pnum);
 800785a:	60cb      	str	r3, [r1, #12]
	output.data = AI_HANDLE_PTR(dense_2_out);

	//printf("batch = ai_network_run(network, &input, &output);\r\n");
	/* Neural Network inference */
	batch = ai_network_run(network, &input, &output);
 800785c:	4b15      	ldr	r3, [pc, #84]	; (80078b4 <MX_X_CUBE_AI_Process+0x70>)
	output.data = AI_HANDLE_PTR(dense_2_out);
 800785e:	4a16      	ldr	r2, [pc, #88]	; (80078b8 <MX_X_CUBE_AI_Process+0x74>)
	batch = ai_network_run(network, &input, &output);
 8007860:	6818      	ldr	r0, [r3, #0]
	output.data = AI_HANDLE_PTR(dense_2_out);
 8007862:	f8c2 d00c 	str.w	sp, [r2, #12]
	batch = ai_network_run(network, &input, &output);
 8007866:	f7ff ff93 	bl	8007790 <ai_network_run>
	if (batch != 1)
 800786a:	2801      	cmp	r0, #1
 800786c:	d000      	beq.n	8007870 <MX_X_CUBE_AI_Process+0x2c>
 800786e:	e7fe      	b.n	800786e <MX_X_CUBE_AI_Process+0x2a>
		while(1);
	}

	/* ArgMax to associate NN output with the most likely classification label */
	max_out = dense_2_out[0];
	classification_result = 0;
 8007870:	4a12      	ldr	r2, [pc, #72]	; (80078bc <MX_X_CUBE_AI_Process+0x78>)
	max_out = dense_2_out[0];
 8007872:	eddd 7a00 	vldr	s15, [sp]
	classification_result = 0;
 8007876:	2300      	movs	r3, #0
 8007878:	6013      	str	r3, [r2, #0]
 800787a:	ac01      	add	r4, sp, #4
 800787c:	4619      	mov	r1, r3
	//printf("classification %lu\r\n",AI_NETWORK_OUT_1_SIZE);
	for (i = 1; i < AI_NETWORK_OUT_1_SIZE; i++)
	{
		if (dense_2_out[i] > max_out)
 800787e:	ecb4 7a01 	vldmia	r4!, {s14}
 8007882:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007886:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		{
			max_out = dense_2_out[i];
			classification_result = i;
 800788a:	bfc8      	it	gt
 800788c:	4601      	movgt	r1, r0
	for (i = 1; i < AI_NETWORK_OUT_1_SIZE; i++)
 800788e:	f100 0001 	add.w	r0, r0, #1
			max_out = dense_2_out[i];
 8007892:	bfc4      	itt	gt
 8007894:	eef0 7a47 	vmovgt.f32	s15, s14
		if (dense_2_out[i] > max_out)
 8007898:	2301      	movgt	r3, #1
	for (i = 1; i < AI_NETWORK_OUT_1_SIZE; i++)
 800789a:	280a      	cmp	r0, #10
 800789c:	d1ef      	bne.n	800787e <MX_X_CUBE_AI_Process+0x3a>
 800789e:	b103      	cbz	r3, 80078a2 <MX_X_CUBE_AI_Process+0x5e>
 80078a0:	6011      	str	r1, [r2, #0]

		}
	}
    /* USER CODE END 1 */
}
 80078a2:	b00a      	add	sp, #40	; 0x28
 80078a4:	bd10      	pop	{r4, pc}
 80078a6:	bf00      	nop
 80078a8:	20027c38 	.word	0x20027c38
 80078ac:	200005ec 	.word	0x200005ec
 80078b0:	20027dd0 	.word	0x20027dd0
 80078b4:	20027a70 	.word	0x20027a70
 80078b8:	200005fc 	.word	0x200005fc
 80078bc:	20027c3c 	.word	0x20027c3c

080078c0 <MX_CRC_Init>:

/* CRC init function */
void MX_CRC_Init(void)
{

  hcrc.Instance = CRC;
 80078c0:	4805      	ldr	r0, [pc, #20]	; (80078d8 <MX_CRC_Init+0x18>)
{
 80078c2:	b508      	push	{r3, lr}
  hcrc.Instance = CRC;
 80078c4:	4b05      	ldr	r3, [pc, #20]	; (80078dc <MX_CRC_Init+0x1c>)
 80078c6:	6003      	str	r3, [r0, #0]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 80078c8:	f7fd fa14 	bl	8004cf4 <HAL_CRC_Init>
 80078cc:	b118      	cbz	r0, 80078d6 <MX_CRC_Init+0x16>
  {
    Error_Handler();
  }

}
 80078ce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 80078d2:	f000 bc7f 	b.w	80081d4 <Error_Handler>
 80078d6:	bd08      	pop	{r3, pc}
 80078d8:	20027c40 	.word	0x20027c40
 80078dc:	40023000 	.word	0x40023000

080078e0 <HAL_CRC_MspInit>:

void HAL_CRC_MspInit(CRC_HandleTypeDef* crcHandle)
{

  if(crcHandle->Instance==CRC)
 80078e0:	6802      	ldr	r2, [r0, #0]
 80078e2:	4b09      	ldr	r3, [pc, #36]	; (8007908 <HAL_CRC_MspInit+0x28>)
 80078e4:	429a      	cmp	r2, r3
{
 80078e6:	b082      	sub	sp, #8
  if(crcHandle->Instance==CRC)
 80078e8:	d10b      	bne.n	8007902 <HAL_CRC_MspInit+0x22>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* CRC clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 80078ea:	2300      	movs	r3, #0
 80078ec:	9301      	str	r3, [sp, #4]
 80078ee:	4b07      	ldr	r3, [pc, #28]	; (800790c <HAL_CRC_MspInit+0x2c>)
 80078f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078f2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80078f6:	631a      	str	r2, [r3, #48]	; 0x30
 80078f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80078fa:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80078fe:	9301      	str	r3, [sp, #4]
 8007900:	9b01      	ldr	r3, [sp, #4]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }
}
 8007902:	b002      	add	sp, #8
 8007904:	4770      	bx	lr
 8007906:	bf00      	nop
 8007908:	40023000 	.word	0x40023000
 800790c:	40023800 	.word	0x40023800

08007910 <MX_DMA2D_Init>:

/* DMA2D init function */
void MX_DMA2D_Init(void)
{

  hdma2d.Instance = DMA2D;
 8007910:	480d      	ldr	r0, [pc, #52]	; (8007948 <MX_DMA2D_Init+0x38>)
{
 8007912:	b508      	push	{r3, lr}
  hdma2d.Instance = DMA2D;
 8007914:	4b0d      	ldr	r3, [pc, #52]	; (800794c <MX_DMA2D_Init+0x3c>)
 8007916:	6003      	str	r3, [r0, #0]
  hdma2d.Init.Mode = DMA2D_M2M;
 8007918:	2300      	movs	r3, #0
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
  hdma2d.Init.OutputOffset = 0;
  hdma2d.LayerCfg[1].InputOffset = 0;
 800791a:	6283      	str	r3, [r0, #40]	; 0x28
  hdma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_ARGB8888;
 800791c:	62c3      	str	r3, [r0, #44]	; 0x2c
  hdma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800791e:	6303      	str	r3, [r0, #48]	; 0x30
  hdma2d.LayerCfg[1].InputAlpha = 0;
 8007920:	6343      	str	r3, [r0, #52]	; 0x34
  hdma2d.Init.Mode = DMA2D_M2M;
 8007922:	6043      	str	r3, [r0, #4]
  hdma2d.Init.ColorMode = DMA2D_OUTPUT_ARGB8888;
 8007924:	6083      	str	r3, [r0, #8]
  hdma2d.Init.OutputOffset = 0;
 8007926:	60c3      	str	r3, [r0, #12]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8007928:	f7fd faf6 	bl	8004f18 <HAL_DMA2D_Init>
 800792c:	b108      	cbz	r0, 8007932 <MX_DMA2D_Init+0x22>
  {
    Error_Handler();
 800792e:	f000 fc51 	bl	80081d4 <Error_Handler>
  }
  if (HAL_DMA2D_ConfigLayer(&hdma2d, 1) != HAL_OK)
 8007932:	2101      	movs	r1, #1
 8007934:	4804      	ldr	r0, [pc, #16]	; (8007948 <MX_DMA2D_Init+0x38>)
 8007936:	f7fd fc43 	bl	80051c0 <HAL_DMA2D_ConfigLayer>
 800793a:	b118      	cbz	r0, 8007944 <MX_DMA2D_Init+0x34>
  {
    Error_Handler();
  }

}
 800793c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007940:	f000 bc48 	b.w	80081d4 <Error_Handler>
 8007944:	bd08      	pop	{r3, pc}
 8007946:	bf00      	nop
 8007948:	20027c48 	.word	0x20027c48
 800794c:	4002b000 	.word	0x4002b000

08007950 <HAL_DMA2D_MspInit>:

void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* dma2dHandle)
{
 8007950:	b507      	push	{r0, r1, r2, lr}

  if(dma2dHandle->Instance==DMA2D)
 8007952:	4b0d      	ldr	r3, [pc, #52]	; (8007988 <HAL_DMA2D_MspInit+0x38>)
 8007954:	6802      	ldr	r2, [r0, #0]
 8007956:	429a      	cmp	r2, r3
 8007958:	d113      	bne.n	8007982 <HAL_DMA2D_MspInit+0x32>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* DMA2D clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800795a:	2200      	movs	r2, #0
 800795c:	f5a3 43f0 	sub.w	r3, r3, #30720	; 0x7800
 8007960:	9201      	str	r2, [sp, #4]
 8007962:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8007964:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8007968:	6319      	str	r1, [r3, #48]	; 0x30
 800796a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007970:	9301      	str	r3, [sp, #4]

    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8007972:	205a      	movs	r0, #90	; 0x5a
 8007974:	4611      	mov	r1, r2
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8007976:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 0, 0);
 8007978:	f7fd f964 	bl	8004c44 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800797c:	205a      	movs	r0, #90	; 0x5a
 800797e:	f7fd f995 	bl	8004cac <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN DMA2D_MspInit 1 */

  /* USER CODE END DMA2D_MspInit 1 */
  }
}
 8007982:	b003      	add	sp, #12
 8007984:	f85d fb04 	ldr.w	pc, [sp], #4
 8007988:	4002b000 	.word	0x4002b000

0800798c <MX_FMC_Init>:

SDRAM_HandleTypeDef hsdram1;

/* FMC initialization function */
void MX_FMC_Init(void)
{
 800798c:	b500      	push	{lr}
 800798e:	b089      	sub	sp, #36	; 0x24
  FMC_SDRAM_TimingTypeDef SdramTiming = {0};
 8007990:	221c      	movs	r2, #28
 8007992:	2100      	movs	r1, #0
 8007994:	a801      	add	r0, sp, #4
 8007996:	f000 fef7 	bl	8008788 <memset>

  /** Perform the SDRAM1 memory initialization sequence
  */
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800799a:	4815      	ldr	r0, [pc, #84]	; (80079f0 <MX_FMC_Init+0x64>)
  /* hsdram1.Init */
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 800799c:	4915      	ldr	r1, [pc, #84]	; (80079f4 <MX_FMC_Init+0x68>)
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
  hsdram1.Init.MemoryDataWidth = FMC_SDRAM_MEM_BUS_WIDTH_16;
 800799e:	2210      	movs	r2, #16
 80079a0:	6102      	str	r2, [r0, #16]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80079a2:	2240      	movs	r2, #64	; 0x40
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80079a4:	2301      	movs	r3, #1
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80079a6:	6142      	str	r2, [r0, #20]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80079a8:	f44f 72c0 	mov.w	r2, #384	; 0x180
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 80079ac:	e880 000a 	stmia.w	r0, {r1, r3}
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 80079b0:	6182      	str	r2, [r0, #24]
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80079b2:	2300      	movs	r3, #0
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80079b4:	f44f 6200 	mov.w	r2, #2048	; 0x800
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80079b8:	2104      	movs	r1, #4
  hsdram1.Init.ColumnBitsNumber = FMC_SDRAM_COLUMN_BITS_NUM_8;
 80079ba:	6083      	str	r3, [r0, #8]
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80079bc:	61c3      	str	r3, [r0, #28]
  hsdram1.Init.SDClockPeriod = FMC_SDRAM_CLOCK_PERIOD_2;
 80079be:	6202      	str	r2, [r0, #32]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_DISABLE;
 80079c0:	6243      	str	r3, [r0, #36]	; 0x24
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
  /* SdramTiming */
  SdramTiming.LoadToActiveDelay = 2;
  SdramTiming.ExitSelfRefreshDelay = 7;
 80079c2:	2207      	movs	r2, #7
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80079c4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 80079c8:	60c1      	str	r1, [r0, #12]
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_1;
 80079ca:	6283      	str	r3, [r0, #40]	; 0x28
  SdramTiming.ExitSelfRefreshDelay = 7;
 80079cc:	9202      	str	r2, [sp, #8]
  SdramTiming.LoadToActiveDelay = 2;
 80079ce:	2302      	movs	r3, #2
  SdramTiming.SelfRefreshTime = 4;
 80079d0:	9103      	str	r1, [sp, #12]
  SdramTiming.RowCycleDelay = 7;
 80079d2:	9204      	str	r2, [sp, #16]
  SdramTiming.WriteRecoveryTime = 3;
  SdramTiming.RPDelay = 2;
  SdramTiming.RCDDelay = 2;

  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80079d4:	4469      	add	r1, sp
  SdramTiming.WriteRecoveryTime = 3;
 80079d6:	2203      	movs	r2, #3
  SdramTiming.LoadToActiveDelay = 2;
 80079d8:	9301      	str	r3, [sp, #4]
  SdramTiming.WriteRecoveryTime = 3;
 80079da:	9205      	str	r2, [sp, #20]
  SdramTiming.RPDelay = 2;
 80079dc:	9306      	str	r3, [sp, #24]
  SdramTiming.RCDDelay = 2;
 80079de:	9307      	str	r3, [sp, #28]
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 80079e0:	f7fe ffbc 	bl	800695c <HAL_SDRAM_Init>
 80079e4:	b108      	cbz	r0, 80079ea <MX_FMC_Init+0x5e>
  {
    Error_Handler( );
 80079e6:	f000 fbf5 	bl	80081d4 <Error_Handler>
  }

}
 80079ea:	b009      	add	sp, #36	; 0x24
 80079ec:	f85d fb04 	ldr.w	pc, [sp], #4
 80079f0:	20027c88 	.word	0x20027c88
 80079f4:	a0000140 	.word	0xa0000140

080079f8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* sdramHandle){
 80079f8:	4770      	bx	lr
	...

080079fc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80079fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007a00:	b08e      	sub	sp, #56	; 0x38

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a02:	2214      	movs	r2, #20
 8007a04:	2100      	movs	r1, #0
 8007a06:	a809      	add	r0, sp, #36	; 0x24
 8007a08:	f000 febe 	bl	8008788 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007a0c:	2400      	movs	r4, #0
 8007a0e:	4b4d      	ldr	r3, [pc, #308]	; (8007b44 <MX_GPIO_Init+0x148>)
 8007a10:	9401      	str	r4, [sp, #4]
 8007a12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
  __HAL_RCC_GPIOG_CLK_ENABLE();
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8007a14:	f8df 8140 	ldr.w	r8, [pc, #320]	; 8007b58 <MX_GPIO_Init+0x15c>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8007a18:	4e4b      	ldr	r6, [pc, #300]	; (8007b48 <MX_GPIO_Init+0x14c>)

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8007a1a:	4f4c      	ldr	r7, [pc, #304]	; (8007b4c <MX_GPIO_Init+0x150>)
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007a1c:	f042 0220 	orr.w	r2, r2, #32
 8007a20:	631a      	str	r2, [r3, #48]	; 0x30
 8007a22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a24:	f002 0220 	and.w	r2, r2, #32
 8007a28:	9201      	str	r2, [sp, #4]
 8007a2a:	9a01      	ldr	r2, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007a2c:	9402      	str	r4, [sp, #8]
 8007a2e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a30:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007a34:	631a      	str	r2, [r3, #48]	; 0x30
 8007a36:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a38:	f002 0280 	and.w	r2, r2, #128	; 0x80
 8007a3c:	9202      	str	r2, [sp, #8]
 8007a3e:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8007a40:	9403      	str	r4, [sp, #12]
 8007a42:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a44:	f042 0204 	orr.w	r2, r2, #4
 8007a48:	631a      	str	r2, [r3, #48]	; 0x30
 8007a4a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a4c:	f002 0204 	and.w	r2, r2, #4
 8007a50:	9203      	str	r2, [sp, #12]
 8007a52:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a54:	9404      	str	r4, [sp, #16]
 8007a56:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a58:	f042 0201 	orr.w	r2, r2, #1
 8007a5c:	631a      	str	r2, [r3, #48]	; 0x30
 8007a5e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a60:	f002 0201 	and.w	r2, r2, #1
 8007a64:	9204      	str	r2, [sp, #16]
 8007a66:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a68:	9405      	str	r4, [sp, #20]
 8007a6a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a6c:	f042 0202 	orr.w	r2, r2, #2
 8007a70:	631a      	str	r2, [r3, #48]	; 0x30
 8007a72:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a74:	f002 0202 	and.w	r2, r2, #2
 8007a78:	9205      	str	r2, [sp, #20]
 8007a7a:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007a7c:	9406      	str	r4, [sp, #24]
 8007a7e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007a84:	631a      	str	r2, [r3, #48]	; 0x30
 8007a86:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a88:	f002 0240 	and.w	r2, r2, #64	; 0x40
 8007a8c:	9206      	str	r2, [sp, #24]
 8007a8e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007a90:	9407      	str	r4, [sp, #28]
 8007a92:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a94:	f042 0210 	orr.w	r2, r2, #16
 8007a98:	631a      	str	r2, [r3, #48]	; 0x30
 8007a9a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007a9c:	f002 0210 	and.w	r2, r2, #16
 8007aa0:	9207      	str	r2, [sp, #28]
 8007aa2:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007aa4:	9408      	str	r4, [sp, #32]
 8007aa6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8007aa8:	f042 0208 	orr.w	r2, r2, #8
 8007aac:	631a      	str	r2, [r3, #48]	; 0x30
 8007aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab0:	f003 0308 	and.w	r3, r3, #8
 8007ab4:	9308      	str	r3, [sp, #32]
  HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8007ab6:	4622      	mov	r2, r4
 8007ab8:	4640      	mov	r0, r8
 8007aba:	2104      	movs	r1, #4
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8007abc:	9b08      	ldr	r3, [sp, #32]
  HAL_GPIO_WritePin(CSX_GPIO_Port, CSX_Pin, GPIO_PIN_RESET);
 8007abe:	f7fd fd4f 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8007ac2:	4622      	mov	r2, r4
 8007ac4:	4630      	mov	r0, r6
 8007ac6:	f44f 5140 	mov.w	r1, #12288	; 0x3000
 8007aca:	f7fd fd49 	bl	8005560 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8007ace:	4622      	mov	r2, r4
 8007ad0:	4638      	mov	r0, r7
 8007ad2:	f44f 41c0 	mov.w	r1, #24576	; 0x6000
 8007ad6:	f7fd fd43 	bl	8005560 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = CSX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ada:	2501      	movs	r5, #1
  GPIO_InitStruct.Pin = CSX_Pin;
 8007adc:	2304      	movs	r3, #4
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(CSX_GPIO_Port, &GPIO_InitStruct);
 8007ade:	a909      	add	r1, sp, #36	; 0x24
 8007ae0:	4640      	mov	r0, r8
  GPIO_InitStruct.Pin = CSX_Pin;
 8007ae2:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007ae4:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ae6:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ae8:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(CSX_GPIO_Port, &GPIO_InitStruct);
 8007aea:	f7fd fbb3 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TE_Pin;
 8007aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8007af2:	a909      	add	r1, sp, #36	; 0x24
 8007af4:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = TE_Pin;
 8007af6:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007af8:	940a      	str	r4, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007afa:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8007afc:	f7fd fbaa 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PDPin PDPin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8007b00:	f44f 5340 	mov.w	r3, #12288	; 0x3000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b04:	a909      	add	r1, sp, #36	; 0x24
 8007b06:	4630      	mov	r0, r6
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8007b08:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b0a:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b0c:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b0e:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007b10:	f7fd fba0 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = TP_INT_Pin;
 8007b14:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007b18:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8007b1a:	a909      	add	r1, sp, #36	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007b1c:	4b0c      	ldr	r3, [pc, #48]	; (8007b50 <MX_GPIO_Init+0x154>)
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8007b1e:	480d      	ldr	r0, [pc, #52]	; (8007b54 <MX_GPIO_Init+0x158>)
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8007b20:	930a      	str	r3, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b22:	940b      	str	r4, [sp, #44]	; 0x2c
  HAL_GPIO_Init(TP_INT_GPIO_Port, &GPIO_InitStruct);
 8007b24:	f7fd fb96 	bl	8005254 <HAL_GPIO_Init>

  /*Configure GPIO pins : PGPin PGPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8007b28:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007b2c:	a909      	add	r1, sp, #36	; 0x24
 8007b2e:	4638      	mov	r0, r7
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8007b30:	9309      	str	r3, [sp, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007b32:	950a      	str	r5, [sp, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b34:	940b      	str	r4, [sp, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007b36:	940c      	str	r4, [sp, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8007b38:	f7fd fb8c 	bl	8005254 <HAL_GPIO_Init>

}
 8007b3c:	b00e      	add	sp, #56	; 0x38
 8007b3e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007b42:	bf00      	nop
 8007b44:	40023800 	.word	0x40023800
 8007b48:	40020c00 	.word	0x40020c00
 8007b4c:	40021800 	.word	0x40021800
 8007b50:	10110000 	.word	0x10110000
 8007b54:	40020000 	.word	0x40020000
 8007b58:	40020800 	.word	0x40020800

08007b5c <MX_I2C3_Init>:

I2C_HandleTypeDef hi2c3;

/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8007b5c:	b508      	push	{r3, lr}

  hi2c3.Instance = I2C3;
 8007b5e:	4813      	ldr	r0, [pc, #76]	; (8007bac <MX_I2C3_Init+0x50>)
  hi2c3.Init.ClockSpeed = 100000;
 8007b60:	4b13      	ldr	r3, [pc, #76]	; (8007bb0 <MX_I2C3_Init+0x54>)
 8007b62:	f8df e050 	ldr.w	lr, [pc, #80]	; 8007bb4 <MX_I2C3_Init+0x58>
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
  hi2c3.Init.OwnAddress1 = 0;
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b66:	f44f 4280 	mov.w	r2, #16384	; 0x4000
  hi2c3.Init.ClockSpeed = 100000;
 8007b6a:	e880 4008 	stmia.w	r0, {r3, lr}
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8007b6e:	2300      	movs	r3, #0
 8007b70:	6083      	str	r3, [r0, #8]
  hi2c3.Init.OwnAddress1 = 0;
 8007b72:	60c3      	str	r3, [r0, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8007b74:	6102      	str	r2, [r0, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8007b76:	6143      	str	r3, [r0, #20]
  hi2c3.Init.OwnAddress2 = 0;
 8007b78:	6183      	str	r3, [r0, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8007b7a:	61c3      	str	r3, [r0, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8007b7c:	6203      	str	r3, [r0, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8007b7e:	f7fd fecb 	bl	8005918 <HAL_I2C_Init>
 8007b82:	b108      	cbz	r0, 8007b88 <MX_I2C3_Init+0x2c>
  {
    Error_Handler();
 8007b84:	f000 fb26 	bl	80081d4 <Error_Handler>
  }
  /** Configure Analogue filter 
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8007b88:	2100      	movs	r1, #0
 8007b8a:	4808      	ldr	r0, [pc, #32]	; (8007bac <MX_I2C3_Init+0x50>)
 8007b8c:	f7fe f921 	bl	8005dd2 <HAL_I2CEx_ConfigAnalogFilter>
 8007b90:	b108      	cbz	r0, 8007b96 <MX_I2C3_Init+0x3a>
  {
    Error_Handler();
 8007b92:	f000 fb1f 	bl	80081d4 <Error_Handler>
  }
  /** Configure Digital filter 
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8007b96:	2100      	movs	r1, #0
 8007b98:	4804      	ldr	r0, [pc, #16]	; (8007bac <MX_I2C3_Init+0x50>)
 8007b9a:	f7fe f939 	bl	8005e10 <HAL_I2CEx_ConfigDigitalFilter>
 8007b9e:	b118      	cbz	r0, 8007ba8 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
  }

}
 8007ba0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8007ba4:	f000 bb16 	b.w	80081d4 <Error_Handler>
 8007ba8:	bd08      	pop	{r3, pc}
 8007baa:	bf00      	nop
 8007bac:	20027cbc 	.word	0x20027cbc
 8007bb0:	40005c00 	.word	0x40005c00
 8007bb4:	000186a0 	.word	0x000186a0

08007bb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8007bb8:	4770      	bx	lr
	...

08007bbc <HAL_I2C_MspDeInit>:
  /* USER CODE END I2C3_MspInit 1 */
  }
}

void HAL_I2C_MspDeInit(I2C_HandleTypeDef* i2cHandle)
{
 8007bbc:	b508      	push	{r3, lr}

  if(i2cHandle->Instance==I2C3)
 8007bbe:	6802      	ldr	r2, [r0, #0]
 8007bc0:	4b0a      	ldr	r3, [pc, #40]	; (8007bec <HAL_I2C_MspDeInit+0x30>)
 8007bc2:	429a      	cmp	r2, r3
 8007bc4:	d110      	bne.n	8007be8 <HAL_I2C_MspDeInit+0x2c>
  {
  /* USER CODE BEGIN I2C3_MspDeInit 0 */

  /* USER CODE END I2C3_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007bc6:	4a0a      	ldr	r2, [pc, #40]	; (8007bf0 <HAL_I2C_MspDeInit+0x34>)
  
    /**I2C3 GPIO Configuration    
    PC9     ------> I2C3_SDA
    PA8     ------> I2C3_SCL 
    */
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8007bc8:	480a      	ldr	r0, [pc, #40]	; (8007bf4 <HAL_I2C_MspDeInit+0x38>)
    __HAL_RCC_I2C3_CLK_DISABLE();
 8007bca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8007bcc:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8007bd0:	6413      	str	r3, [r2, #64]	; 0x40
    HAL_GPIO_DeInit(GPIOC, GPIO_PIN_9);
 8007bd2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8007bd6:	f7fd fc29 	bl	800542c <HAL_GPIO_DeInit>

    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007bda:	f44f 7180 	mov.w	r1, #256	; 0x100
 8007bde:	4806      	ldr	r0, [pc, #24]	; (8007bf8 <HAL_I2C_MspDeInit+0x3c>)

  /* USER CODE BEGIN I2C3_MspDeInit 1 */

  /* USER CODE END I2C3_MspDeInit 1 */
  }
} 
 8007be0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_8);
 8007be4:	f7fd bc22 	b.w	800542c <HAL_GPIO_DeInit>
 8007be8:	bd08      	pop	{r3, pc}
 8007bea:	bf00      	nop
 8007bec:	40005c00 	.word	0x40005c00
 8007bf0:	40023800 	.word	0x40023800
 8007bf4:	40020800 	.word	0x40020800
 8007bf8:	40020000 	.word	0x40020000

08007bfc <MX_LTDC_Init>:

LTDC_HandleTypeDef hltdc;

/* LTDC init function */
void MX_LTDC_Init(void)
{
 8007bfc:	b510      	push	{r4, lr}
 8007bfe:	b08e      	sub	sp, #56	; 0x38
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8007c00:	2234      	movs	r2, #52	; 0x34
 8007c02:	2100      	movs	r1, #0
 8007c04:	a801      	add	r0, sp, #4
 8007c06:	f000 fdbf 	bl	8008788 <memset>

  hltdc.Instance = LTDC;
 8007c0a:	4826      	ldr	r0, [pc, #152]	; (8007ca4 <MX_LTDC_Init+0xa8>)
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007c0c:	4b26      	ldr	r3, [pc, #152]	; (8007ca8 <MX_LTDC_Init+0xac>)
 8007c0e:	2400      	movs	r4, #0
 8007c10:	e880 0018 	stmia.w	r0, {r3, r4}
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
  hltdc.Init.HorizontalSync = 9;
 8007c14:	2309      	movs	r3, #9
 8007c16:	6143      	str	r3, [r0, #20]
  hltdc.Init.VerticalSync = 1;
 8007c18:	2301      	movs	r3, #1
 8007c1a:	6183      	str	r3, [r0, #24]
  hltdc.Init.AccumulatedHBP = 29;
 8007c1c:	231d      	movs	r3, #29
 8007c1e:	61c3      	str	r3, [r0, #28]
  hltdc.Init.AccumulatedVBP = 3;
 8007c20:	2303      	movs	r3, #3
 8007c22:	6203      	str	r3, [r0, #32]
  hltdc.Init.AccumulatedActiveW = 269;
 8007c24:	f240 130d 	movw	r3, #269	; 0x10d
 8007c28:	6243      	str	r3, [r0, #36]	; 0x24
  hltdc.Init.AccumulatedActiveH = 323;
 8007c2a:	f240 1343 	movw	r3, #323	; 0x143
 8007c2e:	6283      	str	r3, [r0, #40]	; 0x28
  hltdc.Init.TotalWidth = 279;
 8007c30:	f240 1317 	movw	r3, #279	; 0x117
 8007c34:	62c3      	str	r3, [r0, #44]	; 0x2c
  hltdc.Init.TotalHeigh = 327;
 8007c36:	f240 1347 	movw	r3, #327	; 0x147
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007c3a:	6084      	str	r4, [r0, #8]
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007c3c:	60c4      	str	r4, [r0, #12]
  hltdc.Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007c3e:	6104      	str	r4, [r0, #16]
  hltdc.Init.TotalHeigh = 327;
 8007c40:	6303      	str	r3, [r0, #48]	; 0x30
  hltdc.Init.Backcolor.Blue = 0;
 8007c42:	f880 4034 	strb.w	r4, [r0, #52]	; 0x34
  hltdc.Init.Backcolor.Green = 0;
 8007c46:	f880 4035 	strb.w	r4, [r0, #53]	; 0x35
  hltdc.Init.Backcolor.Red = 0;
 8007c4a:	f880 4036 	strb.w	r4, [r0, #54]	; 0x36
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8007c4e:	f7fe f985 	bl	8005f5c <HAL_LTDC_Init>
 8007c52:	b108      	cbz	r0, 8007c58 <MX_LTDC_Init+0x5c>
  {
    Error_Handler();
 8007c54:	f000 fabe 	bl	80081d4 <Error_Handler>
  }
  pLayerCfg.WindowX0 = 0;
  pLayerCfg.WindowX1 = 240;
  pLayerCfg.WindowY0 = 0;
  pLayerCfg.WindowY1 = 320;
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB565;
 8007c58:	2102      	movs	r1, #2
 8007c5a:	9105      	str	r1, [sp, #20]
  pLayerCfg.Alpha = 255;
 8007c5c:	21ff      	movs	r1, #255	; 0xff
 8007c5e:	9106      	str	r1, [sp, #24]
  pLayerCfg.Alpha0 = 0;
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007c60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 8007c64:	9108      	str	r1, [sp, #32]
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007c66:	2107      	movs	r1, #7
  pLayerCfg.WindowX1 = 240;
 8007c68:	22f0      	movs	r2, #240	; 0xf0
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007c6a:	9109      	str	r1, [sp, #36]	; 0x24
  pLayerCfg.FBStartAdress = 0xD0000000;
 8007c6c:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
  pLayerCfg.WindowY1 = 320;
 8007c70:	f44f 73a0 	mov.w	r3, #320	; 0x140
  pLayerCfg.WindowX1 = 240;
 8007c74:	9202      	str	r2, [sp, #8]
  pLayerCfg.FBStartAdress = 0xD0000000;
 8007c76:	910a      	str	r1, [sp, #40]	; 0x28
  pLayerCfg.ImageWidth = 240;
 8007c78:	920b      	str	r2, [sp, #44]	; 0x2c
  pLayerCfg.ImageHeight = 320;
  pLayerCfg.Backcolor.Blue = 0;
  pLayerCfg.Backcolor.Green = 0;
  pLayerCfg.Backcolor.Red = 0;
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007c7a:	a901      	add	r1, sp, #4
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	4809      	ldr	r0, [pc, #36]	; (8007ca4 <MX_LTDC_Init+0xa8>)
  pLayerCfg.WindowX0 = 0;
 8007c80:	9401      	str	r4, [sp, #4]
  pLayerCfg.WindowY0 = 0;
 8007c82:	9403      	str	r4, [sp, #12]
  pLayerCfg.WindowY1 = 320;
 8007c84:	9304      	str	r3, [sp, #16]
  pLayerCfg.Alpha0 = 0;
 8007c86:	9407      	str	r4, [sp, #28]
  pLayerCfg.ImageHeight = 320;
 8007c88:	930c      	str	r3, [sp, #48]	; 0x30
  pLayerCfg.Backcolor.Blue = 0;
 8007c8a:	f88d 4034 	strb.w	r4, [sp, #52]	; 0x34
  pLayerCfg.Backcolor.Green = 0;
 8007c8e:	f88d 4035 	strb.w	r4, [sp, #53]	; 0x35
  pLayerCfg.Backcolor.Red = 0;
 8007c92:	f88d 4036 	strb.w	r4, [sp, #54]	; 0x36
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8007c96:	f7fe fa2d 	bl	80060f4 <HAL_LTDC_ConfigLayer>
 8007c9a:	b108      	cbz	r0, 8007ca0 <MX_LTDC_Init+0xa4>
  {
    Error_Handler();
 8007c9c:	f000 fa9a 	bl	80081d4 <Error_Handler>
  }

}
 8007ca0:	b00e      	add	sp, #56	; 0x38
 8007ca2:	bd10      	pop	{r4, pc}
 8007ca4:	20027d10 	.word	0x20027d10
 8007ca8:	40016800 	.word	0x40016800

08007cac <HAL_LTDC_MspInit>:

void HAL_LTDC_MspInit(LTDC_HandleTypeDef* ltdcHandle)
{
 8007cac:	4770      	bx	lr
	...

08007cb0 <Draw_Menu>:
  }
}

/* USER CODE BEGIN 4 */
static void Draw_Menu(void)
{
 8007cb0:	b570      	push	{r4, r5, r6, lr}
  /* Set background Layer */
  BSP_LCD_SelectLayer(0);
 8007cb2:	2000      	movs	r0, #0
 8007cb4:	f7fc f956 	bl	8003f64 <BSP_LCD_SelectLayer>

  /* Clear the LCD */

	BSP_LCD_Clear(LCD_COLOR_BLACK);
 8007cb8:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007cbc:	f7fc f9e2 	bl	8004084 <BSP_LCD_Clear>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007cc0:	f04f 30ff 	mov.w	r0, #4294967295
 8007cc4:	f7fc f978 	bl	8003fb8 <BSP_LCD_SetTextColor>
	BSP_LCD_DrawRect((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1, (BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2), WINDOWS_WITH+2, WINDOWS_HEIGHT+2);
 8007cc8:	f7fc f8fc 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007ccc:	4604      	mov	r4, r0
 8007cce:	f7fc f901 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007cd2:	0841      	lsrs	r1, r0, #1
 8007cd4:	0860      	lsrs	r0, r4, #1
 8007cd6:	23e2      	movs	r3, #226	; 0xe2
 8007cd8:	3970      	subs	r1, #112	; 0x70
 8007cda:	3871      	subs	r0, #113	; 0x71
 8007cdc:	461a      	mov	r2, r3
 8007cde:	b289      	uxth	r1, r1
 8007ce0:	b280      	uxth	r0, r0
 8007ce2:	f7fc fa41 	bl	8004168 <BSP_LCD_DrawRect>
	/* OK */
	BSP_LCD_FillCircle( BSP_LCD_GetXSize()-50,BSP_LCD_GetYSize()-20, 15);
 8007ce6:	f7fc f8ed 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007cea:	4604      	mov	r4, r0
 8007cec:	f7fc f8f2 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007cf0:	3c32      	subs	r4, #50	; 0x32
 8007cf2:	f1a0 0114 	sub.w	r1, r0, #20
 8007cf6:	220f      	movs	r2, #15
 8007cf8:	b289      	uxth	r1, r1
 8007cfa:	b2a0      	uxth	r0, r4
 8007cfc:	f7fc fcc6 	bl	800468c <BSP_LCD_FillCircle>
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
	sprintf(riga, "OK");
 8007d00:	4c17      	ldr	r4, [pc, #92]	; (8007d60 <Draw_Menu+0xb0>)
	BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 8007d02:	f04f 30ff 	mov.w	r0, #4294967295
 8007d06:	f7fc f963 	bl	8003fd0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 8007d0a:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007d0e:	f7fc f953 	bl	8003fb8 <BSP_LCD_SetTextColor>
	sprintf(riga, "OK");
 8007d12:	4914      	ldr	r1, [pc, #80]	; (8007d64 <Draw_Menu+0xb4>)
 8007d14:	4620      	mov	r0, r4
 8007d16:	f000 fddf 	bl	80088d8 <strcpy>
	BSP_LCD_DisplayStringAt(BSP_LCD_GetXSize()-50-5,BSP_LCD_GetYSize()-20-6,(uint8_t*)riga,LEFT_MODE);
 8007d1a:	f7fc f8d3 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007d1e:	4605      	mov	r5, r0
 8007d20:	f7fc f8d8 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007d24:	f1a0 011a 	sub.w	r1, r0, #26
 8007d28:	f1a5 0037 	sub.w	r0, r5, #55	; 0x37
 8007d2c:	4622      	mov	r2, r4
 8007d2e:	2303      	movs	r3, #3
 8007d30:	b289      	uxth	r1, r1
 8007d32:	b280      	uxth	r0, r0
 8007d34:	f7fc fbb0 	bl	8004498 <BSP_LCD_DisplayStringAt>
	/* msg */
	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8007d38:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 8007d3c:	f7fc f948 	bl	8003fd0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 8007d40:	f04f 30ff 	mov.w	r0, #4294967295
 8007d44:	f7fc f938 	bl	8003fb8 <BSP_LCD_SetTextColor>
	sprintf(riga, "Write number in the box!");
 8007d48:	4907      	ldr	r1, [pc, #28]	; (8007d68 <Draw_Menu+0xb8>)
 8007d4a:	4620      	mov	r0, r4
 8007d4c:	f000 fdc4 	bl	80088d8 <strcpy>
	BSP_LCD_DisplayStringAt(0,10,(uint8_t*)riga,CENTER_MODE);
 8007d50:	4622      	mov	r2, r4
 8007d52:	2301      	movs	r3, #1
 8007d54:	210a      	movs	r1, #10
 8007d56:	2000      	movs	r0, #0

}
 8007d58:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	BSP_LCD_DisplayStringAt(0,10,(uint8_t*)riga,CENTER_MODE);
 8007d5c:	f7fc bb9c 	b.w	8004498 <BSP_LCD_DisplayStringAt>
 8007d60:	20029690 	.word	0x20029690
 8007d64:	08141670 	.word	0x08141670
 8007d68:	08141673 	.word	0x08141673

08007d6c <SystemClock_Config>:
{
 8007d6c:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d6e:	2430      	movs	r4, #48	; 0x30
{
 8007d70:	b0a1      	sub	sp, #132	; 0x84
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007d72:	4622      	mov	r2, r4
 8007d74:	2100      	movs	r1, #0
 8007d76:	a808      	add	r0, sp, #32
 8007d78:	f000 fd06 	bl	8008788 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007d7c:	2214      	movs	r2, #20
 8007d7e:	2100      	movs	r1, #0
 8007d80:	a803      	add	r0, sp, #12
 8007d82:	f000 fd01 	bl	8008788 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8007d86:	2100      	movs	r1, #0
 8007d88:	4622      	mov	r2, r4
 8007d8a:	a814      	add	r0, sp, #80	; 0x50
 8007d8c:	f000 fcfc 	bl	8008788 <memset>
  __HAL_RCC_PWR_CLK_ENABLE();
 8007d90:	2400      	movs	r4, #0
 8007d92:	4b22      	ldr	r3, [pc, #136]	; (8007e1c <SystemClock_Config+0xb0>)
 8007d94:	9401      	str	r4, [sp, #4]
 8007d96:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007d98:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8007d9c:	641a      	str	r2, [r3, #64]	; 0x40
 8007d9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007da0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007da4:	9301      	str	r3, [sp, #4]
 8007da6:	9b01      	ldr	r3, [sp, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8007da8:	4b1d      	ldr	r3, [pc, #116]	; (8007e20 <SystemClock_Config+0xb4>)
 8007daa:	9402      	str	r4, [sp, #8]
 8007dac:	681a      	ldr	r2, [r3, #0]
 8007dae:	f442 4240 	orr.w	r2, r2, #49152	; 0xc000
 8007db2:	601a      	str	r2, [r3, #0]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8007dba:	9302      	str	r3, [sp, #8]
 8007dbc:	9b02      	ldr	r3, [sp, #8]
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8007dbe:	2301      	movs	r3, #1
 8007dc0:	9308      	str	r3, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8007dc2:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8007dc6:	9309      	str	r3, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007dc8:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007dcc:	22b4      	movs	r2, #180	; 0xb4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007dce:	2502      	movs	r5, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8007dd0:	930f      	str	r3, [sp, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007dd2:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007dd4:	2304      	movs	r3, #4
  RCC_OscInitStruct.PLL.PLLN = 180;
 8007dd6:	9211      	str	r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLM = 4;
 8007dd8:	9310      	str	r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8007dda:	9313      	str	r3, [sp, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8007ddc:	950e      	str	r5, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8007dde:	9512      	str	r5, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007de0:	f7fe fa3a 	bl	8006258 <HAL_RCC_OscConfig>
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8007de4:	f7fe f9fc 	bl	80061e0 <HAL_PWREx_EnableOverDrive>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007de8:	230f      	movs	r3, #15
 8007dea:	9303      	str	r3, [sp, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8007dec:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8007df0:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007df2:	2105      	movs	r1, #5
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007df4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007df8:	a803      	add	r0, sp, #12
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8007dfa:	9307      	str	r3, [sp, #28]
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007dfc:	9504      	str	r5, [sp, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007dfe:	9405      	str	r4, [sp, #20]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8007e00:	f7fe fbda 	bl	80065b8 <HAL_RCC_ClockConfig>
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8007e04:	2308      	movs	r3, #8
 8007e06:	9314      	str	r3, [sp, #80]	; 0x50
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e08:	a814      	add	r0, sp, #80	; 0x50
  PeriphClkInitStruct.PLLSAI.PLLSAIN = 50;
 8007e0a:	2332      	movs	r3, #50	; 0x32
 8007e0c:	9318      	str	r3, [sp, #96]	; 0x60
  PeriphClkInitStruct.PLLSAI.PLLSAIR = 2;
 8007e0e:	951a      	str	r5, [sp, #104]	; 0x68
  PeriphClkInitStruct.PLLSAIDivR = RCC_PLLSAIDIVR_2;
 8007e10:	941d      	str	r4, [sp, #116]	; 0x74
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8007e12:	f7fe fc8b 	bl	800672c <HAL_RCCEx_PeriphCLKConfig>
}
 8007e16:	b021      	add	sp, #132	; 0x84
 8007e18:	bd30      	pop	{r4, r5, pc}
 8007e1a:	bf00      	nop
 8007e1c:	40023800 	.word	0x40023800
 8007e20:	40007000 	.word	0x40007000

08007e24 <main>:
{
 8007e24:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  HAL_Init();
 8007e28:	f7fc feba 	bl	8004ba0 <HAL_Init>
  SystemClock_Config();
 8007e2c:	f7ff ff9e 	bl	8007d6c <SystemClock_Config>
  MX_GPIO_Init();
 8007e30:	f7ff fde4 	bl	80079fc <MX_GPIO_Init>
  MX_DMA2D_Init();
 8007e34:	f7ff fd6c 	bl	8007910 <MX_DMA2D_Init>
  MX_FMC_Init();
 8007e38:	f7ff fda8 	bl	800798c <MX_FMC_Init>
  MX_I2C3_Init();
 8007e3c:	f7ff fe8e 	bl	8007b5c <MX_I2C3_Init>
  MX_LTDC_Init();
 8007e40:	f7ff fedc 	bl	8007bfc <MX_LTDC_Init>
  MX_CRC_Init();
 8007e44:	f7ff fd3c 	bl	80078c0 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8007e48:	f7ff fca4 	bl	8007794 <MX_X_CUBE_AI_Init>
  MX_SPI5_Init();
 8007e4c:	f000 f9c4 	bl	80081d8 <MX_SPI5_Init>
  BSP_LED_Init(LED3);
 8007e50:	2000      	movs	r0, #0
 8007e52:	f7fb fe5b 	bl	8003b0c <BSP_LED_Init>
  BSP_LED_Init(LED4);
 8007e56:	2001      	movs	r0, #1
 8007e58:	f7fb fe58 	bl	8003b0c <BSP_LED_Init>
  BSP_LED_On(LED3);
 8007e5c:	2000      	movs	r0, #0
 8007e5e:	f7fb fe91 	bl	8003b84 <BSP_LED_On>
  BSP_LCD_Init();
 8007e62:	f7fc fa47 	bl	80042f4 <BSP_LCD_Init>
  BSP_LCD_LayerDefaultInit(1, LCD_FRAME_BUFFER_LAYER1);
 8007e66:	f04f 4150 	mov.w	r1, #3489660928	; 0xd0000000
 8007e6a:	2001      	movs	r0, #1
 8007e6c:	f7fc f83a 	bl	8003ee4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(1);
 8007e70:	2001      	movs	r0, #1
 8007e72:	f7fc f877 	bl	8003f64 <BSP_LCD_SelectLayer>
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 8007e76:	f04f 30ff 	mov.w	r0, #4294967295
 8007e7a:	f7fc f903 	bl	8004084 <BSP_LCD_Clear>
  BSP_LCD_SetColorKeying(1, LCD_COLOR_WHITE);
 8007e7e:	f04f 31ff 	mov.w	r1, #4294967295
 8007e82:	2001      	movs	r0, #1
 8007e84:	f7fc f888 	bl	8003f98 <BSP_LCD_SetColorKeying>
  BSP_LCD_SetLayerVisible(1, DISABLE);
 8007e88:	2100      	movs	r1, #0
 8007e8a:	2001      	movs	r0, #1
 8007e8c:	f7fc f870 	bl	8003f70 <BSP_LCD_SetLayerVisible>
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8007e90:	49b8      	ldr	r1, [pc, #736]	; (8008174 <main+0x350>)
	{
		for ( xsrc=(BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2),xpos=0; xsrc<((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2))+WINDOWS_WITH; xsrc+=8,xpos++)
		{
			for ( ystp=0; ystp<8; ystp++)
			{
				for ( xstp=0; xstp<8; xstp++)
 8007e92:	4fb9      	ldr	r7, [pc, #740]	; (8008178 <main+0x354>)
  BSP_LCD_LayerDefaultInit(0, LCD_FRAME_BUFFER_LAYER0);
 8007e94:	2000      	movs	r0, #0
 8007e96:	f7fc f825 	bl	8003ee4 <BSP_LCD_LayerDefaultInit>
  BSP_LCD_SelectLayer(0);
 8007e9a:	2000      	movs	r0, #0
 8007e9c:	f7fc f862 	bl	8003f64 <BSP_LCD_SelectLayer>
  BSP_LCD_DisplayOn();
 8007ea0:	f7fc f97c 	bl	800419c <BSP_LCD_DisplayOn>
  BSP_LCD_Clear(LCD_COLOR_BLUE);
 8007ea4:	48b5      	ldr	r0, [pc, #724]	; (800817c <main+0x358>)
 8007ea6:	f7fc f8ed 	bl	8004084 <BSP_LCD_Clear>
  Touchscreen_Calibration();
 8007eaa:	f000 fa89 	bl	80083c0 <Touchscreen_Calibration>
  BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 8007eae:	f7fc f809 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007eb2:	4604      	mov	r4, r0
 8007eb4:	f7fc f80e 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007eb8:	b281      	uxth	r1, r0
 8007eba:	b2a0      	uxth	r0, r4
 8007ebc:	f7fc fd90 	bl	80049e0 <BSP_TS_Init>
  Draw_Menu();
 8007ec0:	f7ff fef6 	bl	8007cb0 <Draw_Menu>
  ledtimer=HAL_GetTick();
 8007ec4:	f7fc fe92 	bl	8004bec <HAL_GetTick>
 8007ec8:	4680      	mov	r8, r0
  printf("STM32 AI Test\r\n");
 8007eca:	48ad      	ldr	r0, [pc, #692]	; (8008180 <main+0x35c>)
 8007ecc:	f000 fcd8 	bl	8008880 <puts>
  BSP_TS_GetState(&TS_State);
 8007ed0:	4eac      	ldr	r6, [pc, #688]	; (8008184 <main+0x360>)
  x = Calibration_GetX(TS_State.X);
 8007ed2:	f8df 92f0 	ldr.w	r9, [pc, #752]	; 80081c4 <main+0x3a0>
  y = Calibration_GetX(TS_State.Y);
 8007ed6:	f8df a2f0 	ldr.w	sl, [pc, #752]	; 80081c8 <main+0x3a4>
  BSP_TS_GetState(&TS_State);
 8007eda:	4630      	mov	r0, r6
 8007edc:	f7fc fda2 	bl	8004a24 <BSP_TS_GetState>
  x = Calibration_GetX(TS_State.X);
 8007ee0:	8870      	ldrh	r0, [r6, #2]
 8007ee2:	f000 fb6b 	bl	80085bc <Calibration_GetX>
 8007ee6:	f8c9 0000 	str.w	r0, [r9]
  y = Calibration_GetX(TS_State.Y);
 8007eea:	88b0      	ldrh	r0, [r6, #4]
 8007eec:	f000 fb66 	bl	80085bc <Calibration_GetX>
 if ((TS_State.TouchDetected) & ( x > ((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1 + radius)) & ( y > ((BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2)-1 ) ) & ( x < (BSP_LCD_GetXSize()-((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1  + radius )) ) & ( y < (BSP_LCD_GetYSize()-((BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2)-1 + radius )) ))
 8007ef0:	f8b6 b000 	ldrh.w	fp, [r6]
  y = Calibration_GetX(TS_State.Y);
 8007ef4:	f8ca 0000 	str.w	r0, [sl]
 if ((TS_State.TouchDetected) & ( x > ((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1 + radius)) & ( y > ((BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2)-1 ) ) & ( x < (BSP_LCD_GetXSize()-((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2)-1  + radius )) ) & ( y < (BSP_LCD_GetYSize()-((BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2)-1 + radius )) ))
 8007ef8:	f7fb ffe4 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007efc:	f8d9 4000 	ldr.w	r4, [r9]
 8007f00:	0845      	lsrs	r5, r0, #1
 8007f02:	3d6f      	subs	r5, #111	; 0x6f
 8007f04:	42a5      	cmp	r5, r4
 8007f06:	bf2c      	ite	cs
 8007f08:	2500      	movcs	r5, #0
 8007f0a:	2501      	movcc	r5, #1
 8007f0c:	f7fb ffe2 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007f10:	f8da 4000 	ldr.w	r4, [sl]
 8007f14:	0840      	lsrs	r0, r0, #1
 8007f16:	3871      	subs	r0, #113	; 0x71
 8007f18:	42a0      	cmp	r0, r4
 8007f1a:	bf2c      	ite	cs
 8007f1c:	2500      	movcs	r5, #0
 8007f1e:	f005 0501 	andcc.w	r5, r5, #1
 8007f22:	f7fb ffcf 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007f26:	4604      	mov	r4, r0
 8007f28:	f7fb ffcc 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007f2c:	346f      	adds	r4, #111	; 0x6f
 8007f2e:	f8d9 3000 	ldr.w	r3, [r9]
 8007f32:	eba4 0450 	sub.w	r4, r4, r0, lsr #1
 8007f36:	429c      	cmp	r4, r3
 8007f38:	bf94      	ite	ls
 8007f3a:	2400      	movls	r4, #0
 8007f3c:	f005 0401 	andhi.w	r4, r5, #1
 8007f40:	f7fb ffc8 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007f44:	4605      	mov	r5, r0
 8007f46:	f7fb ffc5 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007f4a:	356f      	adds	r5, #111	; 0x6f
 8007f4c:	f8da 1000 	ldr.w	r1, [sl]
 8007f50:	ea04 040b 	and.w	r4, r4, fp
 8007f54:	eba5 0550 	sub.w	r5, r5, r0, lsr #1
 8007f58:	428d      	cmp	r5, r1
 8007f5a:	bf94      	ite	ls
 8007f5c:	2400      	movls	r4, #0
 8007f5e:	f004 0401 	andhi.w	r4, r4, #1
 8007f62:	b1ac      	cbz	r4, 8007f90 <main+0x16c>
    BSP_LCD_FillCircle((x), (y), 7);
 8007f64:	f8b9 0000 	ldrh.w	r0, [r9]
 8007f68:	2207      	movs	r2, #7
 8007f6a:	b289      	uxth	r1, r1
 8007f6c:	f7fc fb8e 	bl	800468c <BSP_LCD_FillCircle>
    BSP_LED_Off(LED4);
 8007f70:	2001      	movs	r0, #1
 8007f72:	f7fb fe15 	bl	8003ba0 <BSP_LED_Off>
     if(HAL_GetTick()-ledtimer>100){
 8007f76:	f7fc fe39 	bl	8004bec <HAL_GetTick>
 8007f7a:	eba0 0008 	sub.w	r0, r0, r8
 8007f7e:	2864      	cmp	r0, #100	; 0x64
 8007f80:	d9a6      	bls.n	8007ed0 <main+0xac>
    	 BSP_LED_Toggle(LED3);
 8007f82:	2000      	movs	r0, #0
 8007f84:	f7fb fe1a 	bl	8003bbc <BSP_LED_Toggle>
    	 ledtimer=HAL_GetTick();
 8007f88:	f7fc fe30 	bl	8004bec <HAL_GetTick>
 8007f8c:	4680      	mov	r8, r0
 8007f8e:	e79f      	b.n	8007ed0 <main+0xac>
  else if ((TS_State.TouchDetected) & ( (x > BSP_LCD_GetXSize()-50) & ( y > (BSP_LCD_GetYSize() - 50) )) & ( x < BSP_LCD_GetXSize()-50+28 ) & ( y < (BSP_LCD_GetYSize()) ))
 8007f90:	f8b6 b000 	ldrh.w	fp, [r6]
 8007f94:	f7fb ff96 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007f98:	f1a0 0532 	sub.w	r5, r0, #50	; 0x32
 8007f9c:	f8d9 0000 	ldr.w	r0, [r9]
 8007fa0:	4285      	cmp	r5, r0
 8007fa2:	bf2c      	ite	cs
 8007fa4:	2500      	movcs	r5, #0
 8007fa6:	2501      	movcc	r5, #1
 8007fa8:	f7fb ff94 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007fac:	f8da 3000 	ldr.w	r3, [sl]
 8007fb0:	3832      	subs	r0, #50	; 0x32
 8007fb2:	4298      	cmp	r0, r3
 8007fb4:	bf2c      	ite	cs
 8007fb6:	2500      	movcs	r5, #0
 8007fb8:	f005 0501 	andcc.w	r5, r5, #1
 8007fbc:	f7fb ff82 	bl	8003ec4 <BSP_LCD_GetXSize>
 8007fc0:	f8d9 6000 	ldr.w	r6, [r9]
 8007fc4:	3816      	subs	r0, #22
 8007fc6:	42b0      	cmp	r0, r6
 8007fc8:	bf94      	ite	ls
 8007fca:	2600      	movls	r6, #0
 8007fcc:	2601      	movhi	r6, #1
 8007fce:	f7fb ff81 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007fd2:	f8da 3000 	ldr.w	r3, [sl]
 8007fd6:	4298      	cmp	r0, r3
 8007fd8:	bf94      	ite	ls
 8007fda:	2000      	movls	r0, #0
 8007fdc:	f00b 0001 	andhi.w	r0, fp, #1
 8007fe0:	4030      	ands	r0, r6
 8007fe2:	4228      	tst	r0, r5
 8007fe4:	d0c7      	beq.n	8007f76 <main+0x152>
	  BSP_LED_On(LED4);
 8007fe6:	2001      	movs	r0, #1
 8007fe8:	f7fb fdcc 	bl	8003b84 <BSP_LED_On>
	pxl=0;
 8007fec:	4e66      	ldr	r6, [pc, #408]	; (8008188 <main+0x364>)
	idx=0;
 8007fee:	4b67      	ldr	r3, [pc, #412]	; (800818c <main+0x368>)
	pxl=0;
 8007ff0:	6034      	str	r4, [r6, #0]
	idx=0;
 8007ff2:	601c      	str	r4, [r3, #0]
	for ( ysrc=(BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2)+radius,ypos=0; ysrc<((BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2))+WINDOWS_HEIGHT+2; ysrc+=8,ypos++)
 8007ff4:	f7fb ff6e 	bl	8003ed4 <BSP_LCD_GetYSize>
 8007ff8:	f8df a1d0 	ldr.w	sl, [pc, #464]	; 80081cc <main+0x3a8>
 8007ffc:	4d64      	ldr	r5, [pc, #400]	; (8008190 <main+0x36c>)
 8007ffe:	f8ca 4000 	str.w	r4, [sl]
 8008002:	0840      	lsrs	r0, r0, #1
 8008004:	386e      	subs	r0, #110	; 0x6e
 8008006:	6028      	str	r0, [r5, #0]
 8008008:	4634      	mov	r4, r6
 800800a:	46d3      	mov	fp, sl
 800800c:	f7fb ff62 	bl	8003ed4 <BSP_LCD_GetYSize>
 8008010:	682b      	ldr	r3, [r5, #0]
 8008012:	f8df 91bc 	ldr.w	r9, [pc, #444]	; 80081d0 <main+0x3ac>
 8008016:	0840      	lsrs	r0, r0, #1
 8008018:	3072      	adds	r0, #114	; 0x72
 800801a:	4298      	cmp	r0, r3
 800801c:	d833      	bhi.n	8008086 <main+0x262>
			pxl=0;
		}
		//break;

	}
	BSP_LED_Off(LED4);
 800801e:	2001      	movs	r0, #1
 8008020:	f7fb fdbe 	bl	8003ba0 <BSP_LED_Off>
	printf("Call AI Process xpos %d ypos %d\r\n",xpos, ypos);

	MX_X_CUBE_AI_Process();
	BSP_LCD_SetFont(&Font16);
	printf("The Number is: %lu\r\n",classification_result);
 8008024:	4c5b      	ldr	r4, [pc, #364]	; (8008194 <main+0x370>)
	printf("Call AI Process xpos %d ypos %d\r\n",xpos, ypos);
 8008026:	f8da 2000 	ldr.w	r2, [sl]
 800802a:	f8d9 1000 	ldr.w	r1, [r9]
 800802e:	485a      	ldr	r0, [pc, #360]	; (8008198 <main+0x374>)
 8008030:	f000 fbb2 	bl	8008798 <iprintf>
	MX_X_CUBE_AI_Process();
 8008034:	f7ff fc06 	bl	8007844 <MX_X_CUBE_AI_Process>
	BSP_LCD_SetFont(&Font16);
 8008038:	4858      	ldr	r0, [pc, #352]	; (800819c <main+0x378>)
 800803a:	f7fb ffd5 	bl	8003fe8 <BSP_LCD_SetFont>
	printf("The Number is: %lu\r\n",classification_result);
 800803e:	6821      	ldr	r1, [r4, #0]
 8008040:	4857      	ldr	r0, [pc, #348]	; (80081a0 <main+0x37c>)
 8008042:	f000 fba9 	bl	8008798 <iprintf>
	if ( classification_result <= 9)
 8008046:	6822      	ldr	r2, [r4, #0]
 8008048:	2a09      	cmp	r2, #9
 800804a:	f200 808d 	bhi.w	8008168 <main+0x344>
	{
		sprintf((char*)riga,"The Number is: %lu",classification_result);
 800804e:	4955      	ldr	r1, [pc, #340]	; (80081a4 <main+0x380>)
	} else {
		if ( classification_result <= 36)
		{
			sprintf((char*)riga,"The Letter is: %c",(classification_result-10)+65);
		} else {
			sprintf((char*)riga,"The Letter is: %c",(classification_result-36)+97);
 8008050:	4855      	ldr	r0, [pc, #340]	; (80081a8 <main+0x384>)
 8008052:	f000 fc1d 	bl	8008890 <siprintf>
		}
	}

	BSP_LCD_SetBackColor(LCD_COLOR_BLACK);
 8008056:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 800805a:	f7fb ffb9 	bl	8003fd0 <BSP_LCD_SetBackColor>
	BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 800805e:	f04f 30ff 	mov.w	r0, #4294967295
 8008062:	f7fb ffa9 	bl	8003fb8 <BSP_LCD_SetTextColor>
	BSP_LCD_DisplayStringAt(0,25,(uint8_t*)riga,CENTER_MODE);
 8008066:	2301      	movs	r3, #1
 8008068:	4a4f      	ldr	r2, [pc, #316]	; (80081a8 <main+0x384>)
 800806a:	2119      	movs	r1, #25
 800806c:	2000      	movs	r0, #0
 800806e:	f7fc fa13 	bl	8004498 <BSP_LCD_DisplayStringAt>
	BSP_LCD_SetFont(&Font12);
 8008072:	484e      	ldr	r0, [pc, #312]	; (80081ac <main+0x388>)
 8008074:	f7fb ffb8 	bl	8003fe8 <BSP_LCD_SetFont>
	//sprintf(riga, "AI process:%2.3f", tdiff[cTIME_MEASURE_1]*0.001);
	//BSP_LCD_DisplayStringAt(0,20,(uint8_t*)riga,CENTER_MODE);

	HAL_Delay(3000);
 8008078:	f640 30b8 	movw	r0, #3000	; 0xbb8
 800807c:	f7fc fdbc 	bl	8004bf8 <HAL_Delay>
	//BSP_LCD_Clear(LCD_COLOR_BLACK);
	Draw_Menu();
 8008080:	f7ff fe16 	bl	8007cb0 <Draw_Menu>
 8008084:	e777      	b.n	8007f76 <main+0x152>
		for ( xsrc=(BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2),xpos=0; xsrc<((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2))+WINDOWS_WITH; xsrc+=8,xpos++)
 8008086:	f7fb ff1d 	bl	8003ec4 <BSP_LCD_GetXSize>
 800808a:	4e49      	ldr	r6, [pc, #292]	; (80081b0 <main+0x38c>)
 800808c:	0840      	lsrs	r0, r0, #1
 800808e:	3870      	subs	r0, #112	; 0x70
 8008090:	6030      	str	r0, [r6, #0]
 8008092:	2300      	movs	r3, #0
 8008094:	f8c9 3000 	str.w	r3, [r9]
 8008098:	f7fb ff14 	bl	8003ec4 <BSP_LCD_GetXSize>
 800809c:	6833      	ldr	r3, [r6, #0]
 800809e:	0840      	lsrs	r0, r0, #1
 80080a0:	3070      	adds	r0, #112	; 0x70
 80080a2:	4298      	cmp	r0, r3
 80080a4:	d808      	bhi.n	80080b8 <main+0x294>
	for ( ysrc=(BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2)+radius,ypos=0; ysrc<((BSP_LCD_GetYSize()/2)-(WINDOWS_HEIGHT/2))+WINDOWS_HEIGHT+2; ysrc+=8,ypos++)
 80080a6:	682b      	ldr	r3, [r5, #0]
 80080a8:	3308      	adds	r3, #8
 80080aa:	602b      	str	r3, [r5, #0]
 80080ac:	f8db 3000 	ldr.w	r3, [fp]
 80080b0:	3301      	adds	r3, #1
 80080b2:	f8cb 3000 	str.w	r3, [fp]
 80080b6:	e7a9      	b.n	800800c <main+0x1e8>
			for ( ystp=0; ystp<8; ystp++)
 80080b8:	4b3e      	ldr	r3, [pc, #248]	; (80081b4 <main+0x390>)
 80080ba:	2200      	movs	r2, #0
 80080bc:	601a      	str	r2, [r3, #0]
 80080be:	6819      	ldr	r1, [r3, #0]
 80080c0:	2907      	cmp	r1, #7
 80080c2:	d933      	bls.n	800812c <main+0x308>
			if (pxl>0) pxl=255;
 80080c4:	6823      	ldr	r3, [r4, #0]
			PxlNet2D[ypos][xpos] = (float)pxl;
 80080c6:	f8db 2000 	ldr.w	r2, [fp]
 80080ca:	f8d9 1000 	ldr.w	r1, [r9]
			if (pxl>0) pxl=255;
 80080ce:	2b63      	cmp	r3, #99	; 0x63
			pxl /= 100;
 80080d0:	bf94      	ite	ls
 80080d2:	2300      	movls	r3, #0
			if (pxl>0) pxl=255;
 80080d4:	23ff      	movhi	r3, #255	; 0xff
 80080d6:	6023      	str	r3, [r4, #0]
			PxlNet2D[ypos][xpos] = (float)pxl;
 80080d8:	6823      	ldr	r3, [r4, #0]
 80080da:	201c      	movs	r0, #28
 80080dc:	ee07 3a90 	vmov	s15, r3
 80080e0:	fb00 1102 	mla	r1, r0, r2, r1
 80080e4:	4a34      	ldr	r2, [pc, #208]	; (80081b8 <main+0x394>)
			BSP_LCD_DrawPixel(xsrc/10,ysrc/10+270,(0xFF<<24)|(pxl<<16)|(pxl<<8)|pxl);
 80080e6:	6830      	ldr	r0, [r6, #0]
			PxlNet2D[ypos][xpos] = (float)pxl;
 80080e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80080ec:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80080f0:	edc2 7a00 	vstr	s15, [r2]
			BSP_LCD_DrawPixel(xsrc/10,ysrc/10+270,(0xFF<<24)|(pxl<<16)|(pxl<<8)|pxl);
 80080f4:	f043 427f 	orr.w	r2, r3, #4278190080	; 0xff000000
 80080f8:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80080fc:	f04f 0e0a 	mov.w	lr, #10
 8008100:	6829      	ldr	r1, [r5, #0]
 8008102:	fbb1 f1fe 	udiv	r1, r1, lr
 8008106:	f501 7187 	add.w	r1, r1, #270	; 0x10e
 800810a:	fbb0 f0fe 	udiv	r0, r0, lr
 800810e:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
 8008112:	b289      	uxth	r1, r1
 8008114:	b280      	uxth	r0, r0
 8008116:	f7fc f943 	bl	80043a0 <BSP_LCD_DrawPixel>
			pxl=0;
 800811a:	2300      	movs	r3, #0
 800811c:	6023      	str	r3, [r4, #0]
		for ( xsrc=(BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2),xpos=0; xsrc<((BSP_LCD_GetXSize()/2)-(WINDOWS_WITH/2))+WINDOWS_WITH; xsrc+=8,xpos++)
 800811e:	6833      	ldr	r3, [r6, #0]
 8008120:	3308      	adds	r3, #8
 8008122:	6033      	str	r3, [r6, #0]
 8008124:	f8d9 3000 	ldr.w	r3, [r9]
 8008128:	3301      	adds	r3, #1
 800812a:	e7b3      	b.n	8008094 <main+0x270>
				for ( xstp=0; xstp<8; xstp++)
 800812c:	2100      	movs	r1, #0
 800812e:	6039      	str	r1, [r7, #0]
 8008130:	683a      	ldr	r2, [r7, #0]
 8008132:	2a07      	cmp	r2, #7
 8008134:	d903      	bls.n	800813e <main+0x31a>
			for ( ystp=0; ystp<8; ystp++)
 8008136:	6819      	ldr	r1, [r3, #0]
 8008138:	3101      	adds	r1, #1
 800813a:	6019      	str	r1, [r3, #0]
 800813c:	e7bf      	b.n	80080be <main+0x29a>
					tmp = BSP_LCD_ReadPixel( xsrc+xstp,ysrc+ystp);
 800813e:	6818      	ldr	r0, [r3, #0]
 8008140:	6829      	ldr	r1, [r5, #0]
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	4401      	add	r1, r0
 8008146:	6830      	ldr	r0, [r6, #0]
 8008148:	4410      	add	r0, r2
 800814a:	b289      	uxth	r1, r1
 800814c:	b280      	uxth	r0, r0
 800814e:	f7fb ff57 	bl	8004000 <BSP_LCD_ReadPixel>
					pxl += (tmp&0xFF);
 8008152:	6821      	ldr	r1, [r4, #0]
					tmp = BSP_LCD_ReadPixel( xsrc+xstp,ysrc+ystp);
 8008154:	4b19      	ldr	r3, [pc, #100]	; (80081bc <main+0x398>)
 8008156:	6018      	str	r0, [r3, #0]
					pxl += (tmp&0xFF);
 8008158:	fa51 f080 	uxtab	r0, r1, r0
				for ( xstp=0; xstp<8; xstp++)
 800815c:	6839      	ldr	r1, [r7, #0]
					pxl += (tmp&0xFF);
 800815e:	6020      	str	r0, [r4, #0]
				for ( xstp=0; xstp<8; xstp++)
 8008160:	3101      	adds	r1, #1
 8008162:	6039      	str	r1, [r7, #0]
 8008164:	9b01      	ldr	r3, [sp, #4]
 8008166:	e7e3      	b.n	8008130 <main+0x30c>
		if ( classification_result <= 36)
 8008168:	2a24      	cmp	r2, #36	; 0x24
			sprintf((char*)riga,"The Letter is: %c",(classification_result-10)+65);
 800816a:	bf94      	ite	ls
 800816c:	3237      	addls	r2, #55	; 0x37
			sprintf((char*)riga,"The Letter is: %c",(classification_result-36)+97);
 800816e:	323d      	addhi	r2, #61	; 0x3d
 8008170:	4913      	ldr	r1, [pc, #76]	; (80081c0 <main+0x39c>)
 8008172:	e76d      	b.n	8008050 <main+0x22c>
 8008174:	d0130000 	.word	0xd0130000
 8008178:	20028a14 	.word	0x20028a14
 800817c:	ff0000ff 	.word	0xff0000ff
 8008180:	0814168c 	.word	0x0814168c
 8008184:	20027af8 	.word	0x20027af8
 8008188:	20027dbc 	.word	0x20027dbc
 800818c:	20027b00 	.word	0x20027b00
 8008190:	20028a10 	.word	0x20028a10
 8008194:	20027c3c 	.word	0x20027c3c
 8008198:	0814169b 	.word	0x0814169b
 800819c:	20000080 	.word	0x20000080
 80081a0:	081416bd 	.word	0x081416bd
 80081a4:	081416d2 	.word	0x081416d2
 80081a8:	20029690 	.word	0x20029690
 80081ac:	20000078 	.word	0x20000078
 80081b0:	20027db8 	.word	0x20027db8
 80081b4:	20028a34 	.word	0x20028a34
 80081b8:	20027dd0 	.word	0x20027dd0
 80081bc:	20027dc0 	.word	0x20027dc0
 80081c0:	081416e5 	.word	0x081416e5
 80081c4:	20027b04 	.word	0x20027b04
 80081c8:	20027b08 	.word	0x20027b08
 80081cc:	2002968c 	.word	0x2002968c
 80081d0:	20027dc8 	.word	0x20027dc8

080081d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80081d4:	4770      	bx	lr
	...

080081d8 <MX_SPI5_Init>:

SPI_HandleTypeDef hspi5;

/* SPI5 init function */
void MX_SPI5_Init(void)
{
 80081d8:	b508      	push	{r3, lr}

  hspi5.Instance = SPI5;
 80081da:	480e      	ldr	r0, [pc, #56]	; (8008214 <MX_SPI5_Init+0x3c>)
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80081dc:	4b0e      	ldr	r3, [pc, #56]	; (8008218 <MX_SPI5_Init+0x40>)
 80081de:	f44f 7e82 	mov.w	lr, #260	; 0x104
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80081e2:	f44f 7200 	mov.w	r2, #512	; 0x200
  hspi5.Init.Mode = SPI_MODE_MASTER;
 80081e6:	e880 4008 	stmia.w	r0, {r3, lr}
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 80081ea:	2300      	movs	r3, #0
 80081ec:	6083      	str	r3, [r0, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 80081ee:	60c3      	str	r3, [r0, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 80081f0:	6103      	str	r3, [r0, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 80081f2:	6143      	str	r3, [r0, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 80081f4:	6182      	str	r2, [r0, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80081f6:	6203      	str	r3, [r0, #32]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 80081f8:	2218      	movs	r2, #24
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80081fa:	6243      	str	r3, [r0, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80081fc:	6283      	str	r3, [r0, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 10;
 80081fe:	230a      	movs	r3, #10
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 8008200:	61c2      	str	r2, [r0, #28]
  hspi5.Init.CRCPolynomial = 10;
 8008202:	62c3      	str	r3, [r0, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8008204:	f7fe fc86 	bl	8006b14 <HAL_SPI_Init>
 8008208:	b118      	cbz	r0, 8008212 <MX_SPI5_Init+0x3a>
  {
    Error_Handler();
  }

}
 800820a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 800820e:	f7ff bfe1 	b.w	80081d4 <Error_Handler>
 8008212:	bd08      	pop	{r3, pc}
 8008214:	20029794 	.word	0x20029794
 8008218:	40015000 	.word	0x40015000

0800821c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800821c:	4770      	bx	lr
	...

08008220 <HAL_SPI_MspDeInit>:
}

void HAL_SPI_MspDeInit(SPI_HandleTypeDef* spiHandle)
{

  if(spiHandle->Instance==SPI5)
 8008220:	6802      	ldr	r2, [r0, #0]
 8008222:	4b07      	ldr	r3, [pc, #28]	; (8008240 <HAL_SPI_MspDeInit+0x20>)
 8008224:	429a      	cmp	r2, r3
 8008226:	d109      	bne.n	800823c <HAL_SPI_MspDeInit+0x1c>
  {
  /* USER CODE BEGIN SPI5_MspDeInit 0 */

  /* USER CODE END SPI5_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_SPI5_CLK_DISABLE();
 8008228:	4a06      	ldr	r2, [pc, #24]	; (8008244 <HAL_SPI_MspDeInit+0x24>)
    /**SPI5 GPIO Configuration    
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI 
    */
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 800822a:	4807      	ldr	r0, [pc, #28]	; (8008248 <HAL_SPI_MspDeInit+0x28>)
    __HAL_RCC_SPI5_CLK_DISABLE();
 800822c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800822e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 8008232:	6453      	str	r3, [r2, #68]	; 0x44
    HAL_GPIO_DeInit(GPIOF, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9);
 8008234:	f44f 7160 	mov.w	r1, #896	; 0x380
 8008238:	f7fd b8f8 	b.w	800542c <HAL_GPIO_DeInit>
 800823c:	4770      	bx	lr
 800823e:	bf00      	nop
 8008240:	40015000 	.word	0x40015000
 8008244:	40023800 	.word	0x40023800
 8008248:	40021400 	.word	0x40021400

0800824c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800824c:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800824e:	4b0c      	ldr	r3, [pc, #48]	; (8008280 <HAL_MspInit+0x34>)
 8008250:	2100      	movs	r1, #0
 8008252:	9100      	str	r1, [sp, #0]
 8008254:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008256:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800825a:	645a      	str	r2, [r3, #68]	; 0x44
 800825c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800825e:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8008262:	9200      	str	r2, [sp, #0]
 8008264:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008266:	9101      	str	r1, [sp, #4]
 8008268:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800826a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 800826e:	641a      	str	r2, [r3, #64]	; 0x40
 8008270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008276:	9301      	str	r3, [sp, #4]
 8008278:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800827a:	b002      	add	sp, #8
 800827c:	4770      	bx	lr
 800827e:	bf00      	nop
 8008280:	40023800 	.word	0x40023800

08008284 <NMI_Handler>:
 8008284:	4770      	bx	lr

08008286 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008286:	e7fe      	b.n	8008286 <HardFault_Handler>

08008288 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008288:	e7fe      	b.n	8008288 <MemManage_Handler>

0800828a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800828a:	e7fe      	b.n	800828a <BusFault_Handler>

0800828c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800828c:	e7fe      	b.n	800828c <UsageFault_Handler>

0800828e <SVC_Handler>:
 800828e:	4770      	bx	lr

08008290 <DebugMon_Handler>:
 8008290:	4770      	bx	lr

08008292 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008292:	4770      	bx	lr

08008294 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008294:	f7fc bc9e 	b.w	8004bd4 <HAL_IncTick>

08008298 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */
////
  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8008298:	4801      	ldr	r0, [pc, #4]	; (80082a0 <LTDC_IRQHandler+0x8>)
 800829a:	f7fd bece 	b.w	800603a <HAL_LTDC_IRQHandler>
 800829e:	bf00      	nop
 80082a0:	20027d10 	.word	0x20027d10

080082a4 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */
////
  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 80082a4:	4801      	ldr	r0, [pc, #4]	; (80082ac <DMA2D_IRQHandler+0x8>)
 80082a6:	f7fc bf00 	b.w	80050aa <HAL_DMA2D_IRQHandler>
 80082aa:	bf00      	nop
 80082ac:	20027c48 	.word	0x20027c48

080082b0 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80082b0:	b570      	push	{r4, r5, r6, lr}
 80082b2:	460e      	mov	r6, r1
 80082b4:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082b6:	460c      	mov	r4, r1
 80082b8:	1ba3      	subs	r3, r4, r6
 80082ba:	429d      	cmp	r5, r3
 80082bc:	dc01      	bgt.n	80082c2 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 80082be:	4628      	mov	r0, r5
 80082c0:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 80082c2:	f3af 8000 	nop.w
 80082c6:	f804 0b01 	strb.w	r0, [r4], #1
 80082ca:	e7f5      	b.n	80082b8 <_read+0x8>

080082cc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80082cc:	b570      	push	{r4, r5, r6, lr}
 80082ce:	460e      	mov	r6, r1
 80082d0:	4615      	mov	r5, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80082d2:	460c      	mov	r4, r1
 80082d4:	1ba3      	subs	r3, r4, r6
 80082d6:	429d      	cmp	r5, r3
 80082d8:	dc01      	bgt.n	80082de <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 80082da:	4628      	mov	r0, r5
 80082dc:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 80082de:	f814 0b01 	ldrb.w	r0, [r4], #1
 80082e2:	f000 f9d1 	bl	8008688 <__io_putchar>
 80082e6:	e7f5      	b.n	80082d4 <_write+0x8>

080082e8 <_sbrk>:

caddr_t _sbrk(int incr)
{
 80082e8:	b508      	push	{r3, lr}
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 80082ea:	4b0a      	ldr	r3, [pc, #40]	; (8008314 <_sbrk+0x2c>)
 80082ec:	6819      	ldr	r1, [r3, #0]
{
 80082ee:	4602      	mov	r2, r0
	if (heap_end == 0)
 80082f0:	b909      	cbnz	r1, 80082f6 <_sbrk+0xe>
		heap_end = &end;
 80082f2:	4909      	ldr	r1, [pc, #36]	; (8008318 <_sbrk+0x30>)
 80082f4:	6019      	str	r1, [r3, #0]

	prev_heap_end = heap_end;
 80082f6:	6818      	ldr	r0, [r3, #0]
	if (heap_end + incr > stack_ptr)
 80082f8:	4669      	mov	r1, sp
 80082fa:	4402      	add	r2, r0
 80082fc:	428a      	cmp	r2, r1
 80082fe:	d906      	bls.n	800830e <_sbrk+0x26>
	{
//		write(1, "Heap and stack collision\n", 25);
//		abort();
		errno = ENOMEM;
 8008300:	f000 f9fe 	bl	8008700 <__errno>
 8008304:	230c      	movs	r3, #12
 8008306:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8008308:	f04f 30ff 	mov.w	r0, #4294967295
 800830c:	bd08      	pop	{r3, pc}
	}

	heap_end += incr;
 800830e:	601a      	str	r2, [r3, #0]

	return (caddr_t) prev_heap_end;
}
 8008310:	bd08      	pop	{r3, pc}
 8008312:	bf00      	nop
 8008314:	20027b0c 	.word	0x20027b0c
 8008318:	20029830 	.word	0x20029830

0800831c <_close>:

int _close(int file)
{
	return -1;
}
 800831c:	f04f 30ff 	mov.w	r0, #4294967295
 8008320:	4770      	bx	lr

08008322 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8008322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8008326:	604b      	str	r3, [r1, #4]
	return 0;
}
 8008328:	2000      	movs	r0, #0
 800832a:	4770      	bx	lr

0800832c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 800832c:	2001      	movs	r0, #1
 800832e:	4770      	bx	lr

08008330 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8008330:	2000      	movs	r0, #0
 8008332:	4770      	bx	lr

08008334 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008334:	490f      	ldr	r1, [pc, #60]	; (8008374 <SystemInit+0x40>)
 8008336:	f8d1 3088 	ldr.w	r3, [r1, #136]	; 0x88
 800833a:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800833e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  #endif
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= (uint32_t)0x00000001;
 8008342:	4b0d      	ldr	r3, [pc, #52]	; (8008378 <SystemInit+0x44>)
 8008344:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8008346:	2000      	movs	r0, #0
  RCC->CR |= (uint32_t)0x00000001;
 8008348:	f042 0201 	orr.w	r2, r2, #1
 800834c:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000;
 800834e:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON and PLLON bits */
  RCC->CR &= (uint32_t)0xFEF6FFFF;
 8008350:	681a      	ldr	r2, [r3, #0]
 8008352:	f022 7284 	bic.w	r2, r2, #17301504	; 0x1080000
 8008356:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800835a:	601a      	str	r2, [r3, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x24003010;
 800835c:	4a07      	ldr	r2, [pc, #28]	; (800837c <SystemInit+0x48>)
 800835e:	605a      	str	r2, [r3, #4]

  /* Reset HSEBYP bit */
  RCC->CR &= (uint32_t)0xFFFBFFFF;
 8008360:	681a      	ldr	r2, [r3, #0]
 8008362:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8008366:	601a      	str	r2, [r3, #0]

  /* Disable all interrupts */
  RCC->CIR = 0x00000000;
 8008368:	60d8      	str	r0, [r3, #12]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 800836a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800836e:	608b      	str	r3, [r1, #8]
 8008370:	4770      	bx	lr
 8008372:	bf00      	nop
 8008374:	e000ed00 	.word	0xe000ed00
 8008378:	40023800 	.word	0x40023800
 800837c:	24003010 	.word	0x24003010

08008380 <WaitForPressedState>:
  * @brief  Wait For Pressed State
  * @param  Pressed: Pressed State
  * @retval None
  */
static void WaitForPressedState(uint8_t Pressed) 
{
 8008380:	b573      	push	{r0, r1, r4, r5, r6, lr}
  
  do 
  {
    BSP_TS_GetState(&State);
    HAL_Delay(10);
    if (State.TouchDetected == Pressed) 
 8008382:	4606      	mov	r6, r0
    BSP_TS_GetState(&State);
 8008384:	4668      	mov	r0, sp
 8008386:	f7fc fb4d 	bl	8004a24 <BSP_TS_GetState>
    HAL_Delay(10);
 800838a:	200a      	movs	r0, #10
 800838c:	f7fc fc34 	bl	8004bf8 <HAL_Delay>
    if (State.TouchDetected == Pressed) 
 8008390:	f8bd 4000 	ldrh.w	r4, [sp]
 8008394:	42b4      	cmp	r4, r6
 8008396:	d1f5      	bne.n	8008384 <WaitForPressedState+0x4>
    {
      uint16_t TimeStart = HAL_GetTick();
 8008398:	f7fc fc28 	bl	8004bec <HAL_GetTick>
        BSP_TS_GetState(&State);      
        HAL_Delay(10);
        if (State.TouchDetected != Pressed) 
        {
          break;
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 800839c:	b285      	uxth	r5, r0
        BSP_TS_GetState(&State);      
 800839e:	4668      	mov	r0, sp
 80083a0:	f7fc fb40 	bl	8004a24 <BSP_TS_GetState>
        HAL_Delay(10);
 80083a4:	200a      	movs	r0, #10
 80083a6:	f7fc fc27 	bl	8004bf8 <HAL_Delay>
        if (State.TouchDetected != Pressed) 
 80083aa:	f8bd 3000 	ldrh.w	r3, [sp]
 80083ae:	42a3      	cmp	r3, r4
 80083b0:	d1e8      	bne.n	8008384 <WaitForPressedState+0x4>
        } else if ((HAL_GetTick() - 100) > TimeStart) 
 80083b2:	f7fc fc1b 	bl	8004bec <HAL_GetTick>
 80083b6:	3864      	subs	r0, #100	; 0x64
 80083b8:	42a8      	cmp	r0, r5
 80083ba:	d9f0      	bls.n	800839e <WaitForPressedState+0x1e>
          return;
        }
      } while (1);
    }
  } while (1);
}
 80083bc:	b002      	add	sp, #8
 80083be:	bd70      	pop	{r4, r5, r6, pc}

080083c0 <Touchscreen_Calibration>:
{ 
 80083c0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  BSP_LCD_Clear(LCD_COLOR_WHITE);
 80083c4:	f04f 30ff 	mov.w	r0, #4294967295
 80083c8:	f7fb fe5c 	bl	8004084 <BSP_LCD_Clear>
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80083cc:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80083d0:	f7fb fdf2 	bl	8003fb8 <BSP_LCD_SetTextColor>
  BSP_LCD_SetBackColor(LCD_COLOR_WHITE);
 80083d4:	f04f 30ff 	mov.w	r0, #4294967295
 80083d8:	f7fb fdfa 	bl	8003fd0 <BSP_LCD_SetBackColor>
  BSP_LCD_SetFont(&Font12);
 80083dc:	4866      	ldr	r0, [pc, #408]	; (8008578 <Touchscreen_Calibration+0x1b8>)
 80083de:	f7fb fe03 	bl	8003fe8 <BSP_LCD_SetFont>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 27, (uint8_t*)"Before using the Touchscreen", CENTER_MODE);
 80083e2:	f7fb fd77 	bl	8003ed4 <BSP_LCD_GetYSize>
 80083e6:	0841      	lsrs	r1, r0, #1
 80083e8:	391b      	subs	r1, #27
 80083ea:	2301      	movs	r3, #1
 80083ec:	4a63      	ldr	r2, [pc, #396]	; (800857c <Touchscreen_Calibration+0x1bc>)
 80083ee:	b289      	uxth	r1, r1
 80083f0:	2000      	movs	r0, #0
 80083f2:	f7fc f851 	bl	8004498 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 - 12, (uint8_t*)"you need to calibrate it.", CENTER_MODE);
 80083f6:	f7fb fd6d 	bl	8003ed4 <BSP_LCD_GetYSize>
 80083fa:	0841      	lsrs	r1, r0, #1
 80083fc:	390c      	subs	r1, #12
 80083fe:	2301      	movs	r3, #1
 8008400:	4a5f      	ldr	r2, [pc, #380]	; (8008580 <Touchscreen_Calibration+0x1c0>)
 8008402:	b289      	uxth	r1, r1
 8008404:	2000      	movs	r0, #0
 8008406:	f7fc f847 	bl	8004498 <BSP_LCD_DisplayStringAt>
  BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()/2 + 3, (uint8_t*)"Press on the black circles", CENTER_MODE);
 800840a:	f7fb fd63 	bl	8003ed4 <BSP_LCD_GetYSize>
 800840e:	0841      	lsrs	r1, r0, #1
 8008410:	3103      	adds	r1, #3
 8008412:	2301      	movs	r3, #1
 8008414:	4a5b      	ldr	r2, [pc, #364]	; (8008584 <Touchscreen_Calibration+0x1c4>)
 8008416:	b289      	uxth	r1, r1
 8008418:	2000      	movs	r0, #0
 800841a:	f7fc f83d 	bl	8004498 <BSP_LCD_DisplayStringAt>
  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  	  status = BSP_TS_Init(BSP_LCD_GetXSize(), BSP_LCD_GetYSize());
 800841e:	f7fb fd51 	bl	8003ec4 <BSP_LCD_GetXSize>
 8008422:	4604      	mov	r4, r0
 8008424:	f7fb fd56 	bl	8003ed4 <BSP_LCD_GetYSize>
 8008428:	b281      	uxth	r1, r0
 800842a:	b2a0      	uxth	r0, r4
 800842c:	f7fc fad8 	bl	80049e0 <BSP_TS_Init>
  if (status != TS_OK)
 8008430:	4604      	mov	r4, r0
 8008432:	b1f0      	cbz	r0, 8008472 <Touchscreen_Calibration+0xb2>
    BSP_LCD_SetBackColor(LCD_COLOR_WHITE); 
 8008434:	f04f 30ff 	mov.w	r0, #4294967295
 8008438:	f7fb fdca 	bl	8003fd0 <BSP_LCD_SetBackColor>
    BSP_LCD_SetTextColor(LCD_COLOR_RED);
 800843c:	4852      	ldr	r0, [pc, #328]	; (8008588 <Touchscreen_Calibration+0x1c8>)
 800843e:	f7fb fdbb 	bl	8003fb8 <BSP_LCD_SetTextColor>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 95, (uint8_t*)"ERROR", CENTER_MODE);
 8008442:	f7fb fd47 	bl	8003ed4 <BSP_LCD_GetYSize>
 8008446:	f1a0 015f 	sub.w	r1, r0, #95	; 0x5f
 800844a:	2301      	movs	r3, #1
 800844c:	4a4f      	ldr	r2, [pc, #316]	; (800858c <Touchscreen_Calibration+0x1cc>)
 800844e:	b289      	uxth	r1, r1
 8008450:	2000      	movs	r0, #0
 8008452:	f7fc f821 	bl	8004498 <BSP_LCD_DisplayStringAt>
    BSP_LCD_DisplayStringAt(0, BSP_LCD_GetYSize()- 80, (uint8_t*)"Touchscreen cannot be initialized", CENTER_MODE);
 8008456:	f7fb fd3d 	bl	8003ed4 <BSP_LCD_GetYSize>
 800845a:	f1a0 0150 	sub.w	r1, r0, #80	; 0x50
 800845e:	2301      	movs	r3, #1
 8008460:	4a4b      	ldr	r2, [pc, #300]	; (8008590 <Touchscreen_Calibration+0x1d0>)
 8008462:	b289      	uxth	r1, r1
 8008464:	2000      	movs	r0, #0
 8008466:	f7fc f817 	bl	8004498 <BSP_LCD_DisplayStringAt>
    HAL_Delay(5);
 800846a:	2005      	movs	r0, #5
 800846c:	f7fc fbc4 	bl	8004bf8 <HAL_Delay>
 8008470:	e7fb      	b.n	800846a <Touchscreen_Calibration+0xaa>
      aLogX[0] = 15;
 8008472:	4f48      	ldr	r7, [pc, #288]	; (8008594 <Touchscreen_Calibration+0x1d4>)
      aLogY[0] = 15;
 8008474:	4d48      	ldr	r5, [pc, #288]	; (8008598 <Touchscreen_Calibration+0x1d8>)
  BSP_TS_GetState(&TS_State);
 8008476:	f8df b128 	ldr.w	fp, [pc, #296]	; 80085a0 <Touchscreen_Calibration+0x1e0>
      aLogX[0] = 15;
 800847a:	230f      	movs	r3, #15
 800847c:	803b      	strh	r3, [r7, #0]
      aLogY[0] = 15;
 800847e:	802b      	strh	r3, [r5, #0]
      aLogX[1] = BSP_LCD_GetXSize() - 15;
 8008480:	f7fb fd20 	bl	8003ec4 <BSP_LCD_GetXSize>
 8008484:	380f      	subs	r0, #15
 8008486:	8078      	strh	r0, [r7, #2]
      aLogY[1] = BSP_LCD_GetYSize() - 15;
 8008488:	f7fb fd24 	bl	8003ed4 <BSP_LCD_GetYSize>
 800848c:	380f      	subs	r0, #15
 800848e:	8068      	strh	r0, [r5, #2]
        GetPhysValues(aLogX[i], aLogY[i], &aPhysX[i], &aPhysY[i]);
 8008490:	f937 9014 	ldrsh.w	r9, [r7, r4, lsl #1]
 8008494:	f935 a014 	ldrsh.w	sl, [r5, r4, lsl #1]
  *pPhysX = TS_State.X;
 8008498:	f8df 811c 	ldr.w	r8, [pc, #284]	; 80085b8 <Touchscreen_Calibration+0x1f8>
  *pPhysY = TS_State.Y; 
 800849c:	4e3f      	ldr	r6, [pc, #252]	; (800859c <Touchscreen_Calibration+0x1dc>)
  BSP_LCD_FillCircle(LogX, LogY, 5);
 800849e:	fa1f f989 	uxth.w	r9, r9
 80084a2:	fa1f fa8a 	uxth.w	sl, sl
  BSP_LCD_SetTextColor(LCD_COLOR_BLACK);
 80084a6:	f04f 407f 	mov.w	r0, #4278190080	; 0xff000000
 80084aa:	f7fb fd85 	bl	8003fb8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 5);
 80084ae:	2205      	movs	r2, #5
 80084b0:	4651      	mov	r1, sl
 80084b2:	4648      	mov	r0, r9
 80084b4:	f7fc f8ea 	bl	800468c <BSP_LCD_FillCircle>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80084b8:	f04f 30ff 	mov.w	r0, #4294967295
 80084bc:	f7fb fd7c 	bl	8003fb8 <BSP_LCD_SetTextColor>
  BSP_LCD_FillCircle(LogX, LogY, 2);
 80084c0:	2202      	movs	r2, #2
 80084c2:	4651      	mov	r1, sl
 80084c4:	4648      	mov	r0, r9
 80084c6:	f7fc f8e1 	bl	800468c <BSP_LCD_FillCircle>
  WaitForPressedState(1);
 80084ca:	2001      	movs	r0, #1
 80084cc:	f7ff ff58 	bl	8008380 <WaitForPressedState>
  BSP_TS_GetState(&TS_State);
 80084d0:	4833      	ldr	r0, [pc, #204]	; (80085a0 <Touchscreen_Calibration+0x1e0>)
 80084d2:	f7fc faa7 	bl	8004a24 <BSP_TS_GetState>
  *pPhysX = TS_State.X;
 80084d6:	f8bb 3002 	ldrh.w	r3, [fp, #2]
 80084da:	f828 3014 	strh.w	r3, [r8, r4, lsl #1]
  *pPhysY = TS_State.Y; 
 80084de:	f8bb 3004 	ldrh.w	r3, [fp, #4]
 80084e2:	f826 3014 	strh.w	r3, [r6, r4, lsl #1]
  WaitForPressedState(0);
 80084e6:	2000      	movs	r0, #0
 80084e8:	f7ff ff4a 	bl	8008380 <WaitForPressedState>
  BSP_LCD_SetTextColor(LCD_COLOR_WHITE);
 80084ec:	f04f 30ff 	mov.w	r0, #4294967295
 80084f0:	f7fb fd62 	bl	8003fb8 <BSP_LCD_SetTextColor>
 80084f4:	3401      	adds	r4, #1
  BSP_LCD_FillCircle(LogX, LogY, 5);
 80084f6:	2205      	movs	r2, #5
 80084f8:	4651      	mov	r1, sl
 80084fa:	4648      	mov	r0, r9
 80084fc:	f7fc f8c6 	bl	800468c <BSP_LCD_FillCircle>
      for (i = 0; i < 2; i++) 
 8008500:	2c02      	cmp	r4, #2
 8008502:	d1c5      	bne.n	8008490 <Touchscreen_Calibration+0xd0>
      A1 = (1000 * ( aLogX[1] - aLogX[0]))/ ( aPhysX[1] - aPhysX[0]); 
 8008504:	f9b7 0000 	ldrsh.w	r0, [r7]
 8008508:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800850c:	f9b8 1000 	ldrsh.w	r1, [r8]
 8008510:	f9b8 4002 	ldrsh.w	r4, [r8, #2]
 8008514:	1a1b      	subs	r3, r3, r0
 8008516:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800851a:	1a64      	subs	r4, r4, r1
 800851c:	4353      	muls	r3, r2
 800851e:	fb93 f3f4 	sdiv	r3, r3, r4
 8008522:	4c20      	ldr	r4, [pc, #128]	; (80085a4 <Touchscreen_Calibration+0x1e4>)
 8008524:	8023      	strh	r3, [r4, #0]
      B1 = (1000 * aLogX[0]) - A1 * aPhysX[0]; 
 8008526:	ebc0 1440 	rsb	r4, r0, r0, lsl #5
 800852a:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 800852e:	fb11 f303 	smulbb	r3, r1, r3
 8008532:	491d      	ldr	r1, [pc, #116]	; (80085a8 <Touchscreen_Calibration+0x1e8>)
 8008534:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
 8008538:	800b      	strh	r3, [r1, #0]
      A2 = (1000 * ( aLogY[1] - aLogY[0]))/ ( aPhysY[1] - aPhysY[0]); 
 800853a:	f9b5 0000 	ldrsh.w	r0, [r5]
 800853e:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8008542:	f9b6 1000 	ldrsh.w	r1, [r6]
 8008546:	1a1b      	subs	r3, r3, r0
 8008548:	435a      	muls	r2, r3
 800854a:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 800854e:	1a5b      	subs	r3, r3, r1
 8008550:	fb92 f3f3 	sdiv	r3, r2, r3
 8008554:	4a15      	ldr	r2, [pc, #84]	; (80085ac <Touchscreen_Calibration+0x1ec>)
 8008556:	8013      	strh	r3, [r2, #0]
      B2 = (1000 * aLogY[0]) - A2 * aPhysY[0]; 
 8008558:	ebc0 1240 	rsb	r2, r0, r0, lsl #5
 800855c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008560:	fb11 f303 	smulbb	r3, r1, r3
 8008564:	4a12      	ldr	r2, [pc, #72]	; (80085b0 <Touchscreen_Calibration+0x1f0>)
 8008566:	ebc3 03c0 	rsb	r3, r3, r0, lsl #3
 800856a:	8013      	strh	r3, [r2, #0]
      Calibration_Done = 1;
 800856c:	4b11      	ldr	r3, [pc, #68]	; (80085b4 <Touchscreen_Calibration+0x1f4>)
 800856e:	2201      	movs	r2, #1
 8008570:	701a      	strb	r2, [r3, #0]
 8008572:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008576:	bf00      	nop
 8008578:	20000078 	.word	0x20000078
 800857c:	0814170f 	.word	0x0814170f
 8008580:	0814172c 	.word	0x0814172c
 8008584:	08141746 	.word	0x08141746
 8008588:	ffff0000 	.word	0xffff0000
 800858c:	08141761 	.word	0x08141761
 8008590:	08141767 	.word	0x08141767
 8008594:	20027b1a 	.word	0x20027b1a
 8008598:	20027b1e 	.word	0x20027b1e
 800859c:	20027b26 	.word	0x20027b26
 80085a0:	20027af0 	.word	0x20027af0
 80085a4:	20027b10 	.word	0x20027b10
 80085a8:	20027b14 	.word	0x20027b14
 80085ac:	20027b12 	.word	0x20027b12
 80085b0:	20027b16 	.word	0x20027b16
 80085b4:	20027b18 	.word	0x20027b18
 80085b8:	20027b22 	.word	0x20027b22

080085bc <Calibration_GetX>:
  * @param  x: X position
  * @retval calibrated x
  */
uint16_t Calibration_GetX(uint16_t x)
{
  return (((A1 * x) + B1)/1000);
 80085bc:	4b06      	ldr	r3, [pc, #24]	; (80085d8 <Calibration_GetX+0x1c>)
 80085be:	4a07      	ldr	r2, [pc, #28]	; (80085dc <Calibration_GetX+0x20>)
 80085c0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80085c4:	f9b2 2000 	ldrsh.w	r2, [r2]
 80085c8:	fb00 2003 	mla	r0, r0, r3, r2
 80085cc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80085d0:	fb90 f0f3 	sdiv	r0, r0, r3
}
 80085d4:	b280      	uxth	r0, r0
 80085d6:	4770      	bx	lr
 80085d8:	20027b10 	.word	0x20027b10
 80085dc:	20027b14 	.word	0x20027b14

080085e0 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80085e0:	b508      	push	{r3, lr}

  huart1.Instance = USART1;
 80085e2:	480b      	ldr	r0, [pc, #44]	; (8008610 <MX_USART1_UART_Init+0x30>)
  huart1.Init.BaudRate = 115200;
 80085e4:	4b0b      	ldr	r3, [pc, #44]	; (8008614 <MX_USART1_UART_Init+0x34>)
 80085e6:	f44f 3ee1 	mov.w	lr, #115200	; 0x1c200
 80085ea:	e880 4008 	stmia.w	r0, {r3, lr}
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
 80085ee:	220c      	movs	r2, #12
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80085f0:	2300      	movs	r3, #0
 80085f2:	6083      	str	r3, [r0, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80085f4:	60c3      	str	r3, [r0, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80085f6:	6103      	str	r3, [r0, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80085f8:	6142      	str	r2, [r0, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80085fa:	6183      	str	r3, [r0, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80085fc:	61c3      	str	r3, [r0, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80085fe:	f7fe fe51 	bl	80072a4 <HAL_UART_Init>
 8008602:	b118      	cbz	r0, 800860c <MX_USART1_UART_Init+0x2c>
  {
    Error_Handler();
  }

}
 8008604:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    Error_Handler();
 8008608:	f7ff bde4 	b.w	80081d4 <Error_Handler>
 800860c:	bd08      	pop	{r3, pc}
 800860e:	bf00      	nop
 8008610:	200297ec 	.word	0x200297ec
 8008614:	40011000 	.word	0x40011000

08008618 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8008618:	b510      	push	{r4, lr}
 800861a:	4604      	mov	r4, r0
 800861c:	b088      	sub	sp, #32

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800861e:	2214      	movs	r2, #20
 8008620:	2100      	movs	r1, #0
 8008622:	a803      	add	r0, sp, #12
 8008624:	f000 f8b0 	bl	8008788 <memset>
  if(uartHandle->Instance==USART1)
 8008628:	6822      	ldr	r2, [r4, #0]
 800862a:	4b15      	ldr	r3, [pc, #84]	; (8008680 <HAL_UART_MspInit+0x68>)
 800862c:	429a      	cmp	r2, r3
 800862e:	d125      	bne.n	800867c <HAL_UART_MspInit+0x64>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8008630:	f503 3394 	add.w	r3, r3, #75776	; 0x12800
 8008634:	2100      	movs	r1, #0
 8008636:	9101      	str	r1, [sp, #4]
 8008638:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_PULLUP;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800863a:	4812      	ldr	r0, [pc, #72]	; (8008684 <HAL_UART_MspInit+0x6c>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800863c:	f042 0210 	orr.w	r2, r2, #16
 8008640:	645a      	str	r2, [r3, #68]	; 0x44
 8008642:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008644:	f002 0210 	and.w	r2, r2, #16
 8008648:	9201      	str	r2, [sp, #4]
 800864a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800864c:	9102      	str	r1, [sp, #8]
 800864e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008650:	f042 0201 	orr.w	r2, r2, #1
 8008654:	631a      	str	r2, [r3, #48]	; 0x30
 8008656:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008658:	f003 0301 	and.w	r3, r3, #1
 800865c:	9302      	str	r3, [sp, #8]
 800865e:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8008660:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8008664:	9303      	str	r3, [sp, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8008666:	2302      	movs	r3, #2
 8008668:	9304      	str	r3, [sp, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800866a:	2301      	movs	r3, #1
 800866c:	9305      	str	r3, [sp, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800866e:	2303      	movs	r3, #3
 8008670:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008672:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8008674:	2307      	movs	r3, #7
 8008676:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8008678:	f7fc fdec 	bl	8005254 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 800867c:	b008      	add	sp, #32
 800867e:	bd10      	pop	{r4, pc}
 8008680:	40011000 	.word	0x40011000
 8008684:	40020000 	.word	0x40020000

08008688 <__io_putchar>:
  }
} 

/* USER CODE BEGIN 1 */
PUTCHAR_PROTOTYPE
{
 8008688:	b507      	push	{r0, r1, r2, lr}
 800868a:	a902      	add	r1, sp, #8
  /* Place your implementation of fputc here */
  /* e.g. write a character to the USART */
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 800868c:	f64f 73ff 	movw	r3, #65535	; 0xffff
{
 8008690:	f841 0d04 	str.w	r0, [r1, #-4]!
 HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, 0xFFFF);
 8008694:	2201      	movs	r2, #1
 8008696:	4803      	ldr	r0, [pc, #12]	; (80086a4 <__io_putchar+0x1c>)
 8008698:	f7fe fe32 	bl	8007300 <HAL_UART_Transmit>
 //HAL_UART_Transmit_DMA()
 return ch;

}
 800869c:	9801      	ldr	r0, [sp, #4]
 800869e:	b003      	add	sp, #12
 80086a0:	f85d fb04 	ldr.w	pc, [sp], #4
 80086a4:	200297ec 	.word	0x200297ec

080086a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80086a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80086e0 <LoopFillZerobss+0x14>
 
/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80086ac:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80086ae:	e003      	b.n	80086b8 <LoopCopyDataInit>

080086b0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80086b0:	4b0c      	ldr	r3, [pc, #48]	; (80086e4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80086b2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80086b4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80086b6:	3104      	adds	r1, #4

080086b8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80086b8:	480b      	ldr	r0, [pc, #44]	; (80086e8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80086ba:	4b0c      	ldr	r3, [pc, #48]	; (80086ec <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80086bc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80086be:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80086c0:	d3f6      	bcc.n	80086b0 <CopyDataInit>
  ldr  r2, =_sbss
 80086c2:	4a0b      	ldr	r2, [pc, #44]	; (80086f0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80086c4:	e002      	b.n	80086cc <LoopFillZerobss>

080086c6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80086c6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80086c8:	f842 3b04 	str.w	r3, [r2], #4

080086cc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80086cc:	4b09      	ldr	r3, [pc, #36]	; (80086f4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80086ce:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80086d0:	d3f9      	bcc.n	80086c6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80086d2:	f7ff fe2f 	bl	8008334 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80086d6:	f000 f819 	bl	800870c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80086da:	f7ff fba3 	bl	8007e24 <main>
  bx  lr    
 80086de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80086e0:	20030000 	.word	0x20030000
  ldr  r3, =_sidata
 80086e4:	08141880 	.word	0x08141880
  ldr  r0, =_sdata
 80086e8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80086ec:	20000678 	.word	0x20000678
  ldr  r2, =_sbss
 80086f0:	20000678 	.word	0x20000678
  ldr  r3, = _ebss
 80086f4:	20029830 	.word	0x20029830

080086f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80086f8:	e7fe      	b.n	80086f8 <ADC_IRQHandler>

080086fa <__aeabi_memcpy>:
 80086fa:	f000 b83a 	b.w	8008772 <memcpy>
	...

08008700 <__errno>:
 8008700:	4b01      	ldr	r3, [pc, #4]	; (8008708 <__errno+0x8>)
 8008702:	6818      	ldr	r0, [r3, #0]
 8008704:	4770      	bx	lr
 8008706:	bf00      	nop
 8008708:	20000610 	.word	0x20000610

0800870c <__libc_init_array>:
 800870c:	b570      	push	{r4, r5, r6, lr}
 800870e:	4e0d      	ldr	r6, [pc, #52]	; (8008744 <__libc_init_array+0x38>)
 8008710:	4c0d      	ldr	r4, [pc, #52]	; (8008748 <__libc_init_array+0x3c>)
 8008712:	1ba4      	subs	r4, r4, r6
 8008714:	10a4      	asrs	r4, r4, #2
 8008716:	2500      	movs	r5, #0
 8008718:	42a5      	cmp	r5, r4
 800871a:	d109      	bne.n	8008730 <__libc_init_array+0x24>
 800871c:	4e0b      	ldr	r6, [pc, #44]	; (800874c <__libc_init_array+0x40>)
 800871e:	4c0c      	ldr	r4, [pc, #48]	; (8008750 <__libc_init_array+0x44>)
 8008720:	f002 f9bc 	bl	800aa9c <_init>
 8008724:	1ba4      	subs	r4, r4, r6
 8008726:	10a4      	asrs	r4, r4, #2
 8008728:	2500      	movs	r5, #0
 800872a:	42a5      	cmp	r5, r4
 800872c:	d105      	bne.n	800873a <__libc_init_array+0x2e>
 800872e:	bd70      	pop	{r4, r5, r6, pc}
 8008730:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8008734:	4798      	blx	r3
 8008736:	3501      	adds	r5, #1
 8008738:	e7ee      	b.n	8008718 <__libc_init_array+0xc>
 800873a:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800873e:	4798      	blx	r3
 8008740:	3501      	adds	r5, #1
 8008742:	e7f2      	b.n	800872a <__libc_init_array+0x1e>
 8008744:	08141878 	.word	0x08141878
 8008748:	08141878 	.word	0x08141878
 800874c:	08141878 	.word	0x08141878
 8008750:	0814187c 	.word	0x0814187c

08008754 <memcmp>:
 8008754:	b510      	push	{r4, lr}
 8008756:	3901      	subs	r1, #1
 8008758:	4402      	add	r2, r0
 800875a:	4290      	cmp	r0, r2
 800875c:	d101      	bne.n	8008762 <memcmp+0xe>
 800875e:	2000      	movs	r0, #0
 8008760:	bd10      	pop	{r4, pc}
 8008762:	f810 3b01 	ldrb.w	r3, [r0], #1
 8008766:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 800876a:	42a3      	cmp	r3, r4
 800876c:	d0f5      	beq.n	800875a <memcmp+0x6>
 800876e:	1b18      	subs	r0, r3, r4
 8008770:	bd10      	pop	{r4, pc}

08008772 <memcpy>:
 8008772:	b510      	push	{r4, lr}
 8008774:	1e43      	subs	r3, r0, #1
 8008776:	440a      	add	r2, r1
 8008778:	4291      	cmp	r1, r2
 800877a:	d100      	bne.n	800877e <memcpy+0xc>
 800877c:	bd10      	pop	{r4, pc}
 800877e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008782:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008786:	e7f7      	b.n	8008778 <memcpy+0x6>

08008788 <memset>:
 8008788:	4402      	add	r2, r0
 800878a:	4603      	mov	r3, r0
 800878c:	4293      	cmp	r3, r2
 800878e:	d100      	bne.n	8008792 <memset+0xa>
 8008790:	4770      	bx	lr
 8008792:	f803 1b01 	strb.w	r1, [r3], #1
 8008796:	e7f9      	b.n	800878c <memset+0x4>

08008798 <iprintf>:
 8008798:	b40f      	push	{r0, r1, r2, r3}
 800879a:	4b0a      	ldr	r3, [pc, #40]	; (80087c4 <iprintf+0x2c>)
 800879c:	b513      	push	{r0, r1, r4, lr}
 800879e:	681c      	ldr	r4, [r3, #0]
 80087a0:	b124      	cbz	r4, 80087ac <iprintf+0x14>
 80087a2:	69a3      	ldr	r3, [r4, #24]
 80087a4:	b913      	cbnz	r3, 80087ac <iprintf+0x14>
 80087a6:	4620      	mov	r0, r4
 80087a8:	f000 fa50 	bl	8008c4c <__sinit>
 80087ac:	ab05      	add	r3, sp, #20
 80087ae:	9a04      	ldr	r2, [sp, #16]
 80087b0:	68a1      	ldr	r1, [r4, #8]
 80087b2:	9301      	str	r3, [sp, #4]
 80087b4:	4620      	mov	r0, r4
 80087b6:	f000 fd5d 	bl	8009274 <_vfiprintf_r>
 80087ba:	b002      	add	sp, #8
 80087bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80087c0:	b004      	add	sp, #16
 80087c2:	4770      	bx	lr
 80087c4:	20000610 	.word	0x20000610

080087c8 <_puts_r>:
 80087c8:	b570      	push	{r4, r5, r6, lr}
 80087ca:	460e      	mov	r6, r1
 80087cc:	4605      	mov	r5, r0
 80087ce:	b118      	cbz	r0, 80087d8 <_puts_r+0x10>
 80087d0:	6983      	ldr	r3, [r0, #24]
 80087d2:	b90b      	cbnz	r3, 80087d8 <_puts_r+0x10>
 80087d4:	f000 fa3a 	bl	8008c4c <__sinit>
 80087d8:	69ab      	ldr	r3, [r5, #24]
 80087da:	68ac      	ldr	r4, [r5, #8]
 80087dc:	b913      	cbnz	r3, 80087e4 <_puts_r+0x1c>
 80087de:	4628      	mov	r0, r5
 80087e0:	f000 fa34 	bl	8008c4c <__sinit>
 80087e4:	4b23      	ldr	r3, [pc, #140]	; (8008874 <_puts_r+0xac>)
 80087e6:	429c      	cmp	r4, r3
 80087e8:	d117      	bne.n	800881a <_puts_r+0x52>
 80087ea:	686c      	ldr	r4, [r5, #4]
 80087ec:	89a3      	ldrh	r3, [r4, #12]
 80087ee:	071b      	lsls	r3, r3, #28
 80087f0:	d51d      	bpl.n	800882e <_puts_r+0x66>
 80087f2:	6923      	ldr	r3, [r4, #16]
 80087f4:	b1db      	cbz	r3, 800882e <_puts_r+0x66>
 80087f6:	3e01      	subs	r6, #1
 80087f8:	68a3      	ldr	r3, [r4, #8]
 80087fa:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80087fe:	3b01      	subs	r3, #1
 8008800:	60a3      	str	r3, [r4, #8]
 8008802:	b9e9      	cbnz	r1, 8008840 <_puts_r+0x78>
 8008804:	2b00      	cmp	r3, #0
 8008806:	da2e      	bge.n	8008866 <_puts_r+0x9e>
 8008808:	4622      	mov	r2, r4
 800880a:	210a      	movs	r1, #10
 800880c:	4628      	mov	r0, r5
 800880e:	f000 f86b 	bl	80088e8 <__swbuf_r>
 8008812:	3001      	adds	r0, #1
 8008814:	d011      	beq.n	800883a <_puts_r+0x72>
 8008816:	200a      	movs	r0, #10
 8008818:	bd70      	pop	{r4, r5, r6, pc}
 800881a:	4b17      	ldr	r3, [pc, #92]	; (8008878 <_puts_r+0xb0>)
 800881c:	429c      	cmp	r4, r3
 800881e:	d101      	bne.n	8008824 <_puts_r+0x5c>
 8008820:	68ac      	ldr	r4, [r5, #8]
 8008822:	e7e3      	b.n	80087ec <_puts_r+0x24>
 8008824:	4b15      	ldr	r3, [pc, #84]	; (800887c <_puts_r+0xb4>)
 8008826:	429c      	cmp	r4, r3
 8008828:	bf08      	it	eq
 800882a:	68ec      	ldreq	r4, [r5, #12]
 800882c:	e7de      	b.n	80087ec <_puts_r+0x24>
 800882e:	4621      	mov	r1, r4
 8008830:	4628      	mov	r0, r5
 8008832:	f000 f8ab 	bl	800898c <__swsetup_r>
 8008836:	2800      	cmp	r0, #0
 8008838:	d0dd      	beq.n	80087f6 <_puts_r+0x2e>
 800883a:	f04f 30ff 	mov.w	r0, #4294967295
 800883e:	bd70      	pop	{r4, r5, r6, pc}
 8008840:	2b00      	cmp	r3, #0
 8008842:	da04      	bge.n	800884e <_puts_r+0x86>
 8008844:	69a2      	ldr	r2, [r4, #24]
 8008846:	4293      	cmp	r3, r2
 8008848:	db06      	blt.n	8008858 <_puts_r+0x90>
 800884a:	290a      	cmp	r1, #10
 800884c:	d004      	beq.n	8008858 <_puts_r+0x90>
 800884e:	6823      	ldr	r3, [r4, #0]
 8008850:	1c5a      	adds	r2, r3, #1
 8008852:	6022      	str	r2, [r4, #0]
 8008854:	7019      	strb	r1, [r3, #0]
 8008856:	e7cf      	b.n	80087f8 <_puts_r+0x30>
 8008858:	4622      	mov	r2, r4
 800885a:	4628      	mov	r0, r5
 800885c:	f000 f844 	bl	80088e8 <__swbuf_r>
 8008860:	3001      	adds	r0, #1
 8008862:	d1c9      	bne.n	80087f8 <_puts_r+0x30>
 8008864:	e7e9      	b.n	800883a <_puts_r+0x72>
 8008866:	6823      	ldr	r3, [r4, #0]
 8008868:	200a      	movs	r0, #10
 800886a:	1c5a      	adds	r2, r3, #1
 800886c:	6022      	str	r2, [r4, #0]
 800886e:	7018      	strb	r0, [r3, #0]
 8008870:	bd70      	pop	{r4, r5, r6, pc}
 8008872:	bf00      	nop
 8008874:	081417b0 	.word	0x081417b0
 8008878:	081417d0 	.word	0x081417d0
 800887c:	08141790 	.word	0x08141790

08008880 <puts>:
 8008880:	4b02      	ldr	r3, [pc, #8]	; (800888c <puts+0xc>)
 8008882:	4601      	mov	r1, r0
 8008884:	6818      	ldr	r0, [r3, #0]
 8008886:	f7ff bf9f 	b.w	80087c8 <_puts_r>
 800888a:	bf00      	nop
 800888c:	20000610 	.word	0x20000610

08008890 <siprintf>:
 8008890:	b40e      	push	{r1, r2, r3}
 8008892:	b500      	push	{lr}
 8008894:	b09c      	sub	sp, #112	; 0x70
 8008896:	f44f 7102 	mov.w	r1, #520	; 0x208
 800889a:	ab1d      	add	r3, sp, #116	; 0x74
 800889c:	f8ad 1014 	strh.w	r1, [sp, #20]
 80088a0:	9002      	str	r0, [sp, #8]
 80088a2:	9006      	str	r0, [sp, #24]
 80088a4:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80088a8:	480a      	ldr	r0, [pc, #40]	; (80088d4 <siprintf+0x44>)
 80088aa:	9104      	str	r1, [sp, #16]
 80088ac:	9107      	str	r1, [sp, #28]
 80088ae:	f64f 71ff 	movw	r1, #65535	; 0xffff
 80088b2:	f853 2b04 	ldr.w	r2, [r3], #4
 80088b6:	f8ad 1016 	strh.w	r1, [sp, #22]
 80088ba:	6800      	ldr	r0, [r0, #0]
 80088bc:	9301      	str	r3, [sp, #4]
 80088be:	a902      	add	r1, sp, #8
 80088c0:	f000 fbba 	bl	8009038 <_svfiprintf_r>
 80088c4:	9b02      	ldr	r3, [sp, #8]
 80088c6:	2200      	movs	r2, #0
 80088c8:	701a      	strb	r2, [r3, #0]
 80088ca:	b01c      	add	sp, #112	; 0x70
 80088cc:	f85d eb04 	ldr.w	lr, [sp], #4
 80088d0:	b003      	add	sp, #12
 80088d2:	4770      	bx	lr
 80088d4:	20000610 	.word	0x20000610

080088d8 <strcpy>:
 80088d8:	4603      	mov	r3, r0
 80088da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80088de:	f803 2b01 	strb.w	r2, [r3], #1
 80088e2:	2a00      	cmp	r2, #0
 80088e4:	d1f9      	bne.n	80088da <strcpy+0x2>
 80088e6:	4770      	bx	lr

080088e8 <__swbuf_r>:
 80088e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80088ea:	460e      	mov	r6, r1
 80088ec:	4614      	mov	r4, r2
 80088ee:	4605      	mov	r5, r0
 80088f0:	b118      	cbz	r0, 80088fa <__swbuf_r+0x12>
 80088f2:	6983      	ldr	r3, [r0, #24]
 80088f4:	b90b      	cbnz	r3, 80088fa <__swbuf_r+0x12>
 80088f6:	f000 f9a9 	bl	8008c4c <__sinit>
 80088fa:	4b21      	ldr	r3, [pc, #132]	; (8008980 <__swbuf_r+0x98>)
 80088fc:	429c      	cmp	r4, r3
 80088fe:	d12a      	bne.n	8008956 <__swbuf_r+0x6e>
 8008900:	686c      	ldr	r4, [r5, #4]
 8008902:	69a3      	ldr	r3, [r4, #24]
 8008904:	60a3      	str	r3, [r4, #8]
 8008906:	89a3      	ldrh	r3, [r4, #12]
 8008908:	071a      	lsls	r2, r3, #28
 800890a:	d52e      	bpl.n	800896a <__swbuf_r+0x82>
 800890c:	6923      	ldr	r3, [r4, #16]
 800890e:	b363      	cbz	r3, 800896a <__swbuf_r+0x82>
 8008910:	6923      	ldr	r3, [r4, #16]
 8008912:	6820      	ldr	r0, [r4, #0]
 8008914:	1ac0      	subs	r0, r0, r3
 8008916:	6963      	ldr	r3, [r4, #20]
 8008918:	b2f6      	uxtb	r6, r6
 800891a:	4298      	cmp	r0, r3
 800891c:	4637      	mov	r7, r6
 800891e:	db04      	blt.n	800892a <__swbuf_r+0x42>
 8008920:	4621      	mov	r1, r4
 8008922:	4628      	mov	r0, r5
 8008924:	f000 f928 	bl	8008b78 <_fflush_r>
 8008928:	bb28      	cbnz	r0, 8008976 <__swbuf_r+0x8e>
 800892a:	68a3      	ldr	r3, [r4, #8]
 800892c:	3b01      	subs	r3, #1
 800892e:	60a3      	str	r3, [r4, #8]
 8008930:	6823      	ldr	r3, [r4, #0]
 8008932:	1c5a      	adds	r2, r3, #1
 8008934:	6022      	str	r2, [r4, #0]
 8008936:	701e      	strb	r6, [r3, #0]
 8008938:	6963      	ldr	r3, [r4, #20]
 800893a:	3001      	adds	r0, #1
 800893c:	4298      	cmp	r0, r3
 800893e:	d004      	beq.n	800894a <__swbuf_r+0x62>
 8008940:	89a3      	ldrh	r3, [r4, #12]
 8008942:	07db      	lsls	r3, r3, #31
 8008944:	d519      	bpl.n	800897a <__swbuf_r+0x92>
 8008946:	2e0a      	cmp	r6, #10
 8008948:	d117      	bne.n	800897a <__swbuf_r+0x92>
 800894a:	4621      	mov	r1, r4
 800894c:	4628      	mov	r0, r5
 800894e:	f000 f913 	bl	8008b78 <_fflush_r>
 8008952:	b190      	cbz	r0, 800897a <__swbuf_r+0x92>
 8008954:	e00f      	b.n	8008976 <__swbuf_r+0x8e>
 8008956:	4b0b      	ldr	r3, [pc, #44]	; (8008984 <__swbuf_r+0x9c>)
 8008958:	429c      	cmp	r4, r3
 800895a:	d101      	bne.n	8008960 <__swbuf_r+0x78>
 800895c:	68ac      	ldr	r4, [r5, #8]
 800895e:	e7d0      	b.n	8008902 <__swbuf_r+0x1a>
 8008960:	4b09      	ldr	r3, [pc, #36]	; (8008988 <__swbuf_r+0xa0>)
 8008962:	429c      	cmp	r4, r3
 8008964:	bf08      	it	eq
 8008966:	68ec      	ldreq	r4, [r5, #12]
 8008968:	e7cb      	b.n	8008902 <__swbuf_r+0x1a>
 800896a:	4621      	mov	r1, r4
 800896c:	4628      	mov	r0, r5
 800896e:	f000 f80d 	bl	800898c <__swsetup_r>
 8008972:	2800      	cmp	r0, #0
 8008974:	d0cc      	beq.n	8008910 <__swbuf_r+0x28>
 8008976:	f04f 37ff 	mov.w	r7, #4294967295
 800897a:	4638      	mov	r0, r7
 800897c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800897e:	bf00      	nop
 8008980:	081417b0 	.word	0x081417b0
 8008984:	081417d0 	.word	0x081417d0
 8008988:	08141790 	.word	0x08141790

0800898c <__swsetup_r>:
 800898c:	4b32      	ldr	r3, [pc, #200]	; (8008a58 <__swsetup_r+0xcc>)
 800898e:	b570      	push	{r4, r5, r6, lr}
 8008990:	681d      	ldr	r5, [r3, #0]
 8008992:	4606      	mov	r6, r0
 8008994:	460c      	mov	r4, r1
 8008996:	b125      	cbz	r5, 80089a2 <__swsetup_r+0x16>
 8008998:	69ab      	ldr	r3, [r5, #24]
 800899a:	b913      	cbnz	r3, 80089a2 <__swsetup_r+0x16>
 800899c:	4628      	mov	r0, r5
 800899e:	f000 f955 	bl	8008c4c <__sinit>
 80089a2:	4b2e      	ldr	r3, [pc, #184]	; (8008a5c <__swsetup_r+0xd0>)
 80089a4:	429c      	cmp	r4, r3
 80089a6:	d10f      	bne.n	80089c8 <__swsetup_r+0x3c>
 80089a8:	686c      	ldr	r4, [r5, #4]
 80089aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089ae:	b29a      	uxth	r2, r3
 80089b0:	0715      	lsls	r5, r2, #28
 80089b2:	d42c      	bmi.n	8008a0e <__swsetup_r+0x82>
 80089b4:	06d0      	lsls	r0, r2, #27
 80089b6:	d411      	bmi.n	80089dc <__swsetup_r+0x50>
 80089b8:	2209      	movs	r2, #9
 80089ba:	6032      	str	r2, [r6, #0]
 80089bc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80089c0:	81a3      	strh	r3, [r4, #12]
 80089c2:	f04f 30ff 	mov.w	r0, #4294967295
 80089c6:	bd70      	pop	{r4, r5, r6, pc}
 80089c8:	4b25      	ldr	r3, [pc, #148]	; (8008a60 <__swsetup_r+0xd4>)
 80089ca:	429c      	cmp	r4, r3
 80089cc:	d101      	bne.n	80089d2 <__swsetup_r+0x46>
 80089ce:	68ac      	ldr	r4, [r5, #8]
 80089d0:	e7eb      	b.n	80089aa <__swsetup_r+0x1e>
 80089d2:	4b24      	ldr	r3, [pc, #144]	; (8008a64 <__swsetup_r+0xd8>)
 80089d4:	429c      	cmp	r4, r3
 80089d6:	bf08      	it	eq
 80089d8:	68ec      	ldreq	r4, [r5, #12]
 80089da:	e7e6      	b.n	80089aa <__swsetup_r+0x1e>
 80089dc:	0751      	lsls	r1, r2, #29
 80089de:	d512      	bpl.n	8008a06 <__swsetup_r+0x7a>
 80089e0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80089e2:	b141      	cbz	r1, 80089f6 <__swsetup_r+0x6a>
 80089e4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80089e8:	4299      	cmp	r1, r3
 80089ea:	d002      	beq.n	80089f2 <__swsetup_r+0x66>
 80089ec:	4630      	mov	r0, r6
 80089ee:	f000 fa1b 	bl	8008e28 <_free_r>
 80089f2:	2300      	movs	r3, #0
 80089f4:	6363      	str	r3, [r4, #52]	; 0x34
 80089f6:	89a3      	ldrh	r3, [r4, #12]
 80089f8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80089fc:	81a3      	strh	r3, [r4, #12]
 80089fe:	2300      	movs	r3, #0
 8008a00:	6063      	str	r3, [r4, #4]
 8008a02:	6923      	ldr	r3, [r4, #16]
 8008a04:	6023      	str	r3, [r4, #0]
 8008a06:	89a3      	ldrh	r3, [r4, #12]
 8008a08:	f043 0308 	orr.w	r3, r3, #8
 8008a0c:	81a3      	strh	r3, [r4, #12]
 8008a0e:	6923      	ldr	r3, [r4, #16]
 8008a10:	b94b      	cbnz	r3, 8008a26 <__swsetup_r+0x9a>
 8008a12:	89a3      	ldrh	r3, [r4, #12]
 8008a14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008a18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008a1c:	d003      	beq.n	8008a26 <__swsetup_r+0x9a>
 8008a1e:	4621      	mov	r1, r4
 8008a20:	4630      	mov	r0, r6
 8008a22:	f000 f9c1 	bl	8008da8 <__smakebuf_r>
 8008a26:	89a2      	ldrh	r2, [r4, #12]
 8008a28:	f012 0301 	ands.w	r3, r2, #1
 8008a2c:	d00c      	beq.n	8008a48 <__swsetup_r+0xbc>
 8008a2e:	2300      	movs	r3, #0
 8008a30:	60a3      	str	r3, [r4, #8]
 8008a32:	6963      	ldr	r3, [r4, #20]
 8008a34:	425b      	negs	r3, r3
 8008a36:	61a3      	str	r3, [r4, #24]
 8008a38:	6923      	ldr	r3, [r4, #16]
 8008a3a:	b953      	cbnz	r3, 8008a52 <__swsetup_r+0xc6>
 8008a3c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008a40:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8008a44:	d1ba      	bne.n	80089bc <__swsetup_r+0x30>
 8008a46:	bd70      	pop	{r4, r5, r6, pc}
 8008a48:	0792      	lsls	r2, r2, #30
 8008a4a:	bf58      	it	pl
 8008a4c:	6963      	ldrpl	r3, [r4, #20]
 8008a4e:	60a3      	str	r3, [r4, #8]
 8008a50:	e7f2      	b.n	8008a38 <__swsetup_r+0xac>
 8008a52:	2000      	movs	r0, #0
 8008a54:	e7f7      	b.n	8008a46 <__swsetup_r+0xba>
 8008a56:	bf00      	nop
 8008a58:	20000610 	.word	0x20000610
 8008a5c:	081417b0 	.word	0x081417b0
 8008a60:	081417d0 	.word	0x081417d0
 8008a64:	08141790 	.word	0x08141790

08008a68 <__sflush_r>:
 8008a68:	898a      	ldrh	r2, [r1, #12]
 8008a6a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a6e:	4605      	mov	r5, r0
 8008a70:	0710      	lsls	r0, r2, #28
 8008a72:	460c      	mov	r4, r1
 8008a74:	d45a      	bmi.n	8008b2c <__sflush_r+0xc4>
 8008a76:	684b      	ldr	r3, [r1, #4]
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	dc05      	bgt.n	8008a88 <__sflush_r+0x20>
 8008a7c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a7e:	2b00      	cmp	r3, #0
 8008a80:	dc02      	bgt.n	8008a88 <__sflush_r+0x20>
 8008a82:	2000      	movs	r0, #0
 8008a84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a88:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a8a:	2e00      	cmp	r6, #0
 8008a8c:	d0f9      	beq.n	8008a82 <__sflush_r+0x1a>
 8008a8e:	2300      	movs	r3, #0
 8008a90:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a94:	682f      	ldr	r7, [r5, #0]
 8008a96:	602b      	str	r3, [r5, #0]
 8008a98:	d033      	beq.n	8008b02 <__sflush_r+0x9a>
 8008a9a:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a9c:	89a3      	ldrh	r3, [r4, #12]
 8008a9e:	075a      	lsls	r2, r3, #29
 8008aa0:	d505      	bpl.n	8008aae <__sflush_r+0x46>
 8008aa2:	6863      	ldr	r3, [r4, #4]
 8008aa4:	1ac0      	subs	r0, r0, r3
 8008aa6:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008aa8:	b10b      	cbz	r3, 8008aae <__sflush_r+0x46>
 8008aaa:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008aac:	1ac0      	subs	r0, r0, r3
 8008aae:	2300      	movs	r3, #0
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008ab4:	6a21      	ldr	r1, [r4, #32]
 8008ab6:	4628      	mov	r0, r5
 8008ab8:	47b0      	blx	r6
 8008aba:	1c43      	adds	r3, r0, #1
 8008abc:	89a3      	ldrh	r3, [r4, #12]
 8008abe:	d106      	bne.n	8008ace <__sflush_r+0x66>
 8008ac0:	6829      	ldr	r1, [r5, #0]
 8008ac2:	291d      	cmp	r1, #29
 8008ac4:	d84b      	bhi.n	8008b5e <__sflush_r+0xf6>
 8008ac6:	4a2b      	ldr	r2, [pc, #172]	; (8008b74 <__sflush_r+0x10c>)
 8008ac8:	40ca      	lsrs	r2, r1
 8008aca:	07d6      	lsls	r6, r2, #31
 8008acc:	d547      	bpl.n	8008b5e <__sflush_r+0xf6>
 8008ace:	2200      	movs	r2, #0
 8008ad0:	6062      	str	r2, [r4, #4]
 8008ad2:	04d9      	lsls	r1, r3, #19
 8008ad4:	6922      	ldr	r2, [r4, #16]
 8008ad6:	6022      	str	r2, [r4, #0]
 8008ad8:	d504      	bpl.n	8008ae4 <__sflush_r+0x7c>
 8008ada:	1c42      	adds	r2, r0, #1
 8008adc:	d101      	bne.n	8008ae2 <__sflush_r+0x7a>
 8008ade:	682b      	ldr	r3, [r5, #0]
 8008ae0:	b903      	cbnz	r3, 8008ae4 <__sflush_r+0x7c>
 8008ae2:	6560      	str	r0, [r4, #84]	; 0x54
 8008ae4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ae6:	602f      	str	r7, [r5, #0]
 8008ae8:	2900      	cmp	r1, #0
 8008aea:	d0ca      	beq.n	8008a82 <__sflush_r+0x1a>
 8008aec:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008af0:	4299      	cmp	r1, r3
 8008af2:	d002      	beq.n	8008afa <__sflush_r+0x92>
 8008af4:	4628      	mov	r0, r5
 8008af6:	f000 f997 	bl	8008e28 <_free_r>
 8008afa:	2000      	movs	r0, #0
 8008afc:	6360      	str	r0, [r4, #52]	; 0x34
 8008afe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b02:	6a21      	ldr	r1, [r4, #32]
 8008b04:	2301      	movs	r3, #1
 8008b06:	4628      	mov	r0, r5
 8008b08:	47b0      	blx	r6
 8008b0a:	1c41      	adds	r1, r0, #1
 8008b0c:	d1c6      	bne.n	8008a9c <__sflush_r+0x34>
 8008b0e:	682b      	ldr	r3, [r5, #0]
 8008b10:	2b00      	cmp	r3, #0
 8008b12:	d0c3      	beq.n	8008a9c <__sflush_r+0x34>
 8008b14:	2b1d      	cmp	r3, #29
 8008b16:	d001      	beq.n	8008b1c <__sflush_r+0xb4>
 8008b18:	2b16      	cmp	r3, #22
 8008b1a:	d101      	bne.n	8008b20 <__sflush_r+0xb8>
 8008b1c:	602f      	str	r7, [r5, #0]
 8008b1e:	e7b0      	b.n	8008a82 <__sflush_r+0x1a>
 8008b20:	89a3      	ldrh	r3, [r4, #12]
 8008b22:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b26:	81a3      	strh	r3, [r4, #12]
 8008b28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b2c:	690f      	ldr	r7, [r1, #16]
 8008b2e:	2f00      	cmp	r7, #0
 8008b30:	d0a7      	beq.n	8008a82 <__sflush_r+0x1a>
 8008b32:	0793      	lsls	r3, r2, #30
 8008b34:	680e      	ldr	r6, [r1, #0]
 8008b36:	bf08      	it	eq
 8008b38:	694b      	ldreq	r3, [r1, #20]
 8008b3a:	600f      	str	r7, [r1, #0]
 8008b3c:	bf18      	it	ne
 8008b3e:	2300      	movne	r3, #0
 8008b40:	eba6 0807 	sub.w	r8, r6, r7
 8008b44:	608b      	str	r3, [r1, #8]
 8008b46:	f1b8 0f00 	cmp.w	r8, #0
 8008b4a:	dd9a      	ble.n	8008a82 <__sflush_r+0x1a>
 8008b4c:	4643      	mov	r3, r8
 8008b4e:	463a      	mov	r2, r7
 8008b50:	6a21      	ldr	r1, [r4, #32]
 8008b52:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b54:	4628      	mov	r0, r5
 8008b56:	47b0      	blx	r6
 8008b58:	2800      	cmp	r0, #0
 8008b5a:	dc07      	bgt.n	8008b6c <__sflush_r+0x104>
 8008b5c:	89a3      	ldrh	r3, [r4, #12]
 8008b5e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b62:	81a3      	strh	r3, [r4, #12]
 8008b64:	f04f 30ff 	mov.w	r0, #4294967295
 8008b68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b6c:	4407      	add	r7, r0
 8008b6e:	eba8 0800 	sub.w	r8, r8, r0
 8008b72:	e7e8      	b.n	8008b46 <__sflush_r+0xde>
 8008b74:	20400001 	.word	0x20400001

08008b78 <_fflush_r>:
 8008b78:	b538      	push	{r3, r4, r5, lr}
 8008b7a:	690b      	ldr	r3, [r1, #16]
 8008b7c:	4605      	mov	r5, r0
 8008b7e:	460c      	mov	r4, r1
 8008b80:	b1db      	cbz	r3, 8008bba <_fflush_r+0x42>
 8008b82:	b118      	cbz	r0, 8008b8c <_fflush_r+0x14>
 8008b84:	6983      	ldr	r3, [r0, #24]
 8008b86:	b90b      	cbnz	r3, 8008b8c <_fflush_r+0x14>
 8008b88:	f000 f860 	bl	8008c4c <__sinit>
 8008b8c:	4b0c      	ldr	r3, [pc, #48]	; (8008bc0 <_fflush_r+0x48>)
 8008b8e:	429c      	cmp	r4, r3
 8008b90:	d109      	bne.n	8008ba6 <_fflush_r+0x2e>
 8008b92:	686c      	ldr	r4, [r5, #4]
 8008b94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b98:	b17b      	cbz	r3, 8008bba <_fflush_r+0x42>
 8008b9a:	4621      	mov	r1, r4
 8008b9c:	4628      	mov	r0, r5
 8008b9e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ba2:	f7ff bf61 	b.w	8008a68 <__sflush_r>
 8008ba6:	4b07      	ldr	r3, [pc, #28]	; (8008bc4 <_fflush_r+0x4c>)
 8008ba8:	429c      	cmp	r4, r3
 8008baa:	d101      	bne.n	8008bb0 <_fflush_r+0x38>
 8008bac:	68ac      	ldr	r4, [r5, #8]
 8008bae:	e7f1      	b.n	8008b94 <_fflush_r+0x1c>
 8008bb0:	4b05      	ldr	r3, [pc, #20]	; (8008bc8 <_fflush_r+0x50>)
 8008bb2:	429c      	cmp	r4, r3
 8008bb4:	bf08      	it	eq
 8008bb6:	68ec      	ldreq	r4, [r5, #12]
 8008bb8:	e7ec      	b.n	8008b94 <_fflush_r+0x1c>
 8008bba:	2000      	movs	r0, #0
 8008bbc:	bd38      	pop	{r3, r4, r5, pc}
 8008bbe:	bf00      	nop
 8008bc0:	081417b0 	.word	0x081417b0
 8008bc4:	081417d0 	.word	0x081417d0
 8008bc8:	08141790 	.word	0x08141790

08008bcc <_cleanup_r>:
 8008bcc:	4901      	ldr	r1, [pc, #4]	; (8008bd4 <_cleanup_r+0x8>)
 8008bce:	f000 b8a9 	b.w	8008d24 <_fwalk_reent>
 8008bd2:	bf00      	nop
 8008bd4:	08008b79 	.word	0x08008b79

08008bd8 <std.isra.0>:
 8008bd8:	2300      	movs	r3, #0
 8008bda:	b510      	push	{r4, lr}
 8008bdc:	4604      	mov	r4, r0
 8008bde:	6003      	str	r3, [r0, #0]
 8008be0:	6043      	str	r3, [r0, #4]
 8008be2:	6083      	str	r3, [r0, #8]
 8008be4:	8181      	strh	r1, [r0, #12]
 8008be6:	6643      	str	r3, [r0, #100]	; 0x64
 8008be8:	81c2      	strh	r2, [r0, #14]
 8008bea:	6103      	str	r3, [r0, #16]
 8008bec:	6143      	str	r3, [r0, #20]
 8008bee:	6183      	str	r3, [r0, #24]
 8008bf0:	4619      	mov	r1, r3
 8008bf2:	2208      	movs	r2, #8
 8008bf4:	305c      	adds	r0, #92	; 0x5c
 8008bf6:	f7ff fdc7 	bl	8008788 <memset>
 8008bfa:	4b05      	ldr	r3, [pc, #20]	; (8008c10 <std.isra.0+0x38>)
 8008bfc:	6263      	str	r3, [r4, #36]	; 0x24
 8008bfe:	4b05      	ldr	r3, [pc, #20]	; (8008c14 <std.isra.0+0x3c>)
 8008c00:	62a3      	str	r3, [r4, #40]	; 0x28
 8008c02:	4b05      	ldr	r3, [pc, #20]	; (8008c18 <std.isra.0+0x40>)
 8008c04:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008c06:	4b05      	ldr	r3, [pc, #20]	; (8008c1c <std.isra.0+0x44>)
 8008c08:	6224      	str	r4, [r4, #32]
 8008c0a:	6323      	str	r3, [r4, #48]	; 0x30
 8008c0c:	bd10      	pop	{r4, pc}
 8008c0e:	bf00      	nop
 8008c10:	080097ed 	.word	0x080097ed
 8008c14:	0800980f 	.word	0x0800980f
 8008c18:	08009847 	.word	0x08009847
 8008c1c:	0800986b 	.word	0x0800986b

08008c20 <__sfmoreglue>:
 8008c20:	b570      	push	{r4, r5, r6, lr}
 8008c22:	1e4a      	subs	r2, r1, #1
 8008c24:	2568      	movs	r5, #104	; 0x68
 8008c26:	4355      	muls	r5, r2
 8008c28:	460e      	mov	r6, r1
 8008c2a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008c2e:	f000 f949 	bl	8008ec4 <_malloc_r>
 8008c32:	4604      	mov	r4, r0
 8008c34:	b140      	cbz	r0, 8008c48 <__sfmoreglue+0x28>
 8008c36:	2100      	movs	r1, #0
 8008c38:	e880 0042 	stmia.w	r0, {r1, r6}
 8008c3c:	300c      	adds	r0, #12
 8008c3e:	60a0      	str	r0, [r4, #8]
 8008c40:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008c44:	f7ff fda0 	bl	8008788 <memset>
 8008c48:	4620      	mov	r0, r4
 8008c4a:	bd70      	pop	{r4, r5, r6, pc}

08008c4c <__sinit>:
 8008c4c:	6983      	ldr	r3, [r0, #24]
 8008c4e:	b510      	push	{r4, lr}
 8008c50:	4604      	mov	r4, r0
 8008c52:	bb33      	cbnz	r3, 8008ca2 <__sinit+0x56>
 8008c54:	6483      	str	r3, [r0, #72]	; 0x48
 8008c56:	64c3      	str	r3, [r0, #76]	; 0x4c
 8008c58:	6503      	str	r3, [r0, #80]	; 0x50
 8008c5a:	4b12      	ldr	r3, [pc, #72]	; (8008ca4 <__sinit+0x58>)
 8008c5c:	4a12      	ldr	r2, [pc, #72]	; (8008ca8 <__sinit+0x5c>)
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	6282      	str	r2, [r0, #40]	; 0x28
 8008c62:	4298      	cmp	r0, r3
 8008c64:	bf04      	itt	eq
 8008c66:	2301      	moveq	r3, #1
 8008c68:	6183      	streq	r3, [r0, #24]
 8008c6a:	f000 f81f 	bl	8008cac <__sfp>
 8008c6e:	6060      	str	r0, [r4, #4]
 8008c70:	4620      	mov	r0, r4
 8008c72:	f000 f81b 	bl	8008cac <__sfp>
 8008c76:	60a0      	str	r0, [r4, #8]
 8008c78:	4620      	mov	r0, r4
 8008c7a:	f000 f817 	bl	8008cac <__sfp>
 8008c7e:	2200      	movs	r2, #0
 8008c80:	60e0      	str	r0, [r4, #12]
 8008c82:	2104      	movs	r1, #4
 8008c84:	6860      	ldr	r0, [r4, #4]
 8008c86:	f7ff ffa7 	bl	8008bd8 <std.isra.0>
 8008c8a:	2201      	movs	r2, #1
 8008c8c:	2109      	movs	r1, #9
 8008c8e:	68a0      	ldr	r0, [r4, #8]
 8008c90:	f7ff ffa2 	bl	8008bd8 <std.isra.0>
 8008c94:	2202      	movs	r2, #2
 8008c96:	2112      	movs	r1, #18
 8008c98:	68e0      	ldr	r0, [r4, #12]
 8008c9a:	f7ff ff9d 	bl	8008bd8 <std.isra.0>
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	61a3      	str	r3, [r4, #24]
 8008ca2:	bd10      	pop	{r4, pc}
 8008ca4:	0814178c 	.word	0x0814178c
 8008ca8:	08008bcd 	.word	0x08008bcd

08008cac <__sfp>:
 8008cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008cae:	4b1c      	ldr	r3, [pc, #112]	; (8008d20 <__sfp+0x74>)
 8008cb0:	681e      	ldr	r6, [r3, #0]
 8008cb2:	69b3      	ldr	r3, [r6, #24]
 8008cb4:	4607      	mov	r7, r0
 8008cb6:	b913      	cbnz	r3, 8008cbe <__sfp+0x12>
 8008cb8:	4630      	mov	r0, r6
 8008cba:	f7ff ffc7 	bl	8008c4c <__sinit>
 8008cbe:	3648      	adds	r6, #72	; 0x48
 8008cc0:	68b4      	ldr	r4, [r6, #8]
 8008cc2:	6873      	ldr	r3, [r6, #4]
 8008cc4:	3b01      	subs	r3, #1
 8008cc6:	d503      	bpl.n	8008cd0 <__sfp+0x24>
 8008cc8:	6833      	ldr	r3, [r6, #0]
 8008cca:	b133      	cbz	r3, 8008cda <__sfp+0x2e>
 8008ccc:	6836      	ldr	r6, [r6, #0]
 8008cce:	e7f7      	b.n	8008cc0 <__sfp+0x14>
 8008cd0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008cd4:	b16d      	cbz	r5, 8008cf2 <__sfp+0x46>
 8008cd6:	3468      	adds	r4, #104	; 0x68
 8008cd8:	e7f4      	b.n	8008cc4 <__sfp+0x18>
 8008cda:	2104      	movs	r1, #4
 8008cdc:	4638      	mov	r0, r7
 8008cde:	f7ff ff9f 	bl	8008c20 <__sfmoreglue>
 8008ce2:	6030      	str	r0, [r6, #0]
 8008ce4:	2800      	cmp	r0, #0
 8008ce6:	d1f1      	bne.n	8008ccc <__sfp+0x20>
 8008ce8:	230c      	movs	r3, #12
 8008cea:	603b      	str	r3, [r7, #0]
 8008cec:	4604      	mov	r4, r0
 8008cee:	4620      	mov	r0, r4
 8008cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008cf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8008cf6:	81e3      	strh	r3, [r4, #14]
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	81a3      	strh	r3, [r4, #12]
 8008cfc:	6665      	str	r5, [r4, #100]	; 0x64
 8008cfe:	6025      	str	r5, [r4, #0]
 8008d00:	60a5      	str	r5, [r4, #8]
 8008d02:	6065      	str	r5, [r4, #4]
 8008d04:	6125      	str	r5, [r4, #16]
 8008d06:	6165      	str	r5, [r4, #20]
 8008d08:	61a5      	str	r5, [r4, #24]
 8008d0a:	2208      	movs	r2, #8
 8008d0c:	4629      	mov	r1, r5
 8008d0e:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008d12:	f7ff fd39 	bl	8008788 <memset>
 8008d16:	6365      	str	r5, [r4, #52]	; 0x34
 8008d18:	63a5      	str	r5, [r4, #56]	; 0x38
 8008d1a:	64a5      	str	r5, [r4, #72]	; 0x48
 8008d1c:	64e5      	str	r5, [r4, #76]	; 0x4c
 8008d1e:	e7e6      	b.n	8008cee <__sfp+0x42>
 8008d20:	0814178c 	.word	0x0814178c

08008d24 <_fwalk_reent>:
 8008d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008d28:	4680      	mov	r8, r0
 8008d2a:	4689      	mov	r9, r1
 8008d2c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008d30:	2600      	movs	r6, #0
 8008d32:	b914      	cbnz	r4, 8008d3a <_fwalk_reent+0x16>
 8008d34:	4630      	mov	r0, r6
 8008d36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008d3a:	68a5      	ldr	r5, [r4, #8]
 8008d3c:	6867      	ldr	r7, [r4, #4]
 8008d3e:	3f01      	subs	r7, #1
 8008d40:	d501      	bpl.n	8008d46 <_fwalk_reent+0x22>
 8008d42:	6824      	ldr	r4, [r4, #0]
 8008d44:	e7f5      	b.n	8008d32 <_fwalk_reent+0xe>
 8008d46:	89ab      	ldrh	r3, [r5, #12]
 8008d48:	2b01      	cmp	r3, #1
 8008d4a:	d907      	bls.n	8008d5c <_fwalk_reent+0x38>
 8008d4c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008d50:	3301      	adds	r3, #1
 8008d52:	d003      	beq.n	8008d5c <_fwalk_reent+0x38>
 8008d54:	4629      	mov	r1, r5
 8008d56:	4640      	mov	r0, r8
 8008d58:	47c8      	blx	r9
 8008d5a:	4306      	orrs	r6, r0
 8008d5c:	3568      	adds	r5, #104	; 0x68
 8008d5e:	e7ee      	b.n	8008d3e <_fwalk_reent+0x1a>

08008d60 <__swhatbuf_r>:
 8008d60:	b570      	push	{r4, r5, r6, lr}
 8008d62:	460e      	mov	r6, r1
 8008d64:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008d68:	2900      	cmp	r1, #0
 8008d6a:	b090      	sub	sp, #64	; 0x40
 8008d6c:	4614      	mov	r4, r2
 8008d6e:	461d      	mov	r5, r3
 8008d70:	da07      	bge.n	8008d82 <__swhatbuf_r+0x22>
 8008d72:	2300      	movs	r3, #0
 8008d74:	602b      	str	r3, [r5, #0]
 8008d76:	89b3      	ldrh	r3, [r6, #12]
 8008d78:	061a      	lsls	r2, r3, #24
 8008d7a:	d410      	bmi.n	8008d9e <__swhatbuf_r+0x3e>
 8008d7c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008d80:	e00e      	b.n	8008da0 <__swhatbuf_r+0x40>
 8008d82:	aa01      	add	r2, sp, #4
 8008d84:	f000 fd98 	bl	80098b8 <_fstat_r>
 8008d88:	2800      	cmp	r0, #0
 8008d8a:	dbf2      	blt.n	8008d72 <__swhatbuf_r+0x12>
 8008d8c:	9a02      	ldr	r2, [sp, #8]
 8008d8e:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008d92:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008d96:	425a      	negs	r2, r3
 8008d98:	415a      	adcs	r2, r3
 8008d9a:	602a      	str	r2, [r5, #0]
 8008d9c:	e7ee      	b.n	8008d7c <__swhatbuf_r+0x1c>
 8008d9e:	2340      	movs	r3, #64	; 0x40
 8008da0:	2000      	movs	r0, #0
 8008da2:	6023      	str	r3, [r4, #0]
 8008da4:	b010      	add	sp, #64	; 0x40
 8008da6:	bd70      	pop	{r4, r5, r6, pc}

08008da8 <__smakebuf_r>:
 8008da8:	898b      	ldrh	r3, [r1, #12]
 8008daa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008dac:	079d      	lsls	r5, r3, #30
 8008dae:	4606      	mov	r6, r0
 8008db0:	460c      	mov	r4, r1
 8008db2:	d507      	bpl.n	8008dc4 <__smakebuf_r+0x1c>
 8008db4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008db8:	6023      	str	r3, [r4, #0]
 8008dba:	6123      	str	r3, [r4, #16]
 8008dbc:	2301      	movs	r3, #1
 8008dbe:	6163      	str	r3, [r4, #20]
 8008dc0:	b002      	add	sp, #8
 8008dc2:	bd70      	pop	{r4, r5, r6, pc}
 8008dc4:	ab01      	add	r3, sp, #4
 8008dc6:	466a      	mov	r2, sp
 8008dc8:	f7ff ffca 	bl	8008d60 <__swhatbuf_r>
 8008dcc:	9900      	ldr	r1, [sp, #0]
 8008dce:	4605      	mov	r5, r0
 8008dd0:	4630      	mov	r0, r6
 8008dd2:	f000 f877 	bl	8008ec4 <_malloc_r>
 8008dd6:	b948      	cbnz	r0, 8008dec <__smakebuf_r+0x44>
 8008dd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ddc:	059a      	lsls	r2, r3, #22
 8008dde:	d4ef      	bmi.n	8008dc0 <__smakebuf_r+0x18>
 8008de0:	f023 0303 	bic.w	r3, r3, #3
 8008de4:	f043 0302 	orr.w	r3, r3, #2
 8008de8:	81a3      	strh	r3, [r4, #12]
 8008dea:	e7e3      	b.n	8008db4 <__smakebuf_r+0xc>
 8008dec:	4b0d      	ldr	r3, [pc, #52]	; (8008e24 <__smakebuf_r+0x7c>)
 8008dee:	62b3      	str	r3, [r6, #40]	; 0x28
 8008df0:	89a3      	ldrh	r3, [r4, #12]
 8008df2:	6020      	str	r0, [r4, #0]
 8008df4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008df8:	81a3      	strh	r3, [r4, #12]
 8008dfa:	9b00      	ldr	r3, [sp, #0]
 8008dfc:	6163      	str	r3, [r4, #20]
 8008dfe:	9b01      	ldr	r3, [sp, #4]
 8008e00:	6120      	str	r0, [r4, #16]
 8008e02:	b15b      	cbz	r3, 8008e1c <__smakebuf_r+0x74>
 8008e04:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008e08:	4630      	mov	r0, r6
 8008e0a:	f000 fd67 	bl	80098dc <_isatty_r>
 8008e0e:	b128      	cbz	r0, 8008e1c <__smakebuf_r+0x74>
 8008e10:	89a3      	ldrh	r3, [r4, #12]
 8008e12:	f023 0303 	bic.w	r3, r3, #3
 8008e16:	f043 0301 	orr.w	r3, r3, #1
 8008e1a:	81a3      	strh	r3, [r4, #12]
 8008e1c:	89a3      	ldrh	r3, [r4, #12]
 8008e1e:	431d      	orrs	r5, r3
 8008e20:	81a5      	strh	r5, [r4, #12]
 8008e22:	e7cd      	b.n	8008dc0 <__smakebuf_r+0x18>
 8008e24:	08008bcd 	.word	0x08008bcd

08008e28 <_free_r>:
 8008e28:	b538      	push	{r3, r4, r5, lr}
 8008e2a:	4605      	mov	r5, r0
 8008e2c:	2900      	cmp	r1, #0
 8008e2e:	d045      	beq.n	8008ebc <_free_r+0x94>
 8008e30:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e34:	1f0c      	subs	r4, r1, #4
 8008e36:	2b00      	cmp	r3, #0
 8008e38:	bfb8      	it	lt
 8008e3a:	18e4      	addlt	r4, r4, r3
 8008e3c:	f000 fd8a 	bl	8009954 <__malloc_lock>
 8008e40:	4a1f      	ldr	r2, [pc, #124]	; (8008ec0 <_free_r+0x98>)
 8008e42:	6813      	ldr	r3, [r2, #0]
 8008e44:	4610      	mov	r0, r2
 8008e46:	b933      	cbnz	r3, 8008e56 <_free_r+0x2e>
 8008e48:	6063      	str	r3, [r4, #4]
 8008e4a:	6014      	str	r4, [r2, #0]
 8008e4c:	4628      	mov	r0, r5
 8008e4e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e52:	f000 bd80 	b.w	8009956 <__malloc_unlock>
 8008e56:	42a3      	cmp	r3, r4
 8008e58:	d90c      	bls.n	8008e74 <_free_r+0x4c>
 8008e5a:	6821      	ldr	r1, [r4, #0]
 8008e5c:	1862      	adds	r2, r4, r1
 8008e5e:	4293      	cmp	r3, r2
 8008e60:	bf04      	itt	eq
 8008e62:	681a      	ldreq	r2, [r3, #0]
 8008e64:	685b      	ldreq	r3, [r3, #4]
 8008e66:	6063      	str	r3, [r4, #4]
 8008e68:	bf04      	itt	eq
 8008e6a:	1852      	addeq	r2, r2, r1
 8008e6c:	6022      	streq	r2, [r4, #0]
 8008e6e:	6004      	str	r4, [r0, #0]
 8008e70:	e7ec      	b.n	8008e4c <_free_r+0x24>
 8008e72:	4613      	mov	r3, r2
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	b10a      	cbz	r2, 8008e7c <_free_r+0x54>
 8008e78:	42a2      	cmp	r2, r4
 8008e7a:	d9fa      	bls.n	8008e72 <_free_r+0x4a>
 8008e7c:	6819      	ldr	r1, [r3, #0]
 8008e7e:	1858      	adds	r0, r3, r1
 8008e80:	42a0      	cmp	r0, r4
 8008e82:	d10b      	bne.n	8008e9c <_free_r+0x74>
 8008e84:	6820      	ldr	r0, [r4, #0]
 8008e86:	4401      	add	r1, r0
 8008e88:	1858      	adds	r0, r3, r1
 8008e8a:	4282      	cmp	r2, r0
 8008e8c:	6019      	str	r1, [r3, #0]
 8008e8e:	d1dd      	bne.n	8008e4c <_free_r+0x24>
 8008e90:	6810      	ldr	r0, [r2, #0]
 8008e92:	6852      	ldr	r2, [r2, #4]
 8008e94:	605a      	str	r2, [r3, #4]
 8008e96:	4401      	add	r1, r0
 8008e98:	6019      	str	r1, [r3, #0]
 8008e9a:	e7d7      	b.n	8008e4c <_free_r+0x24>
 8008e9c:	d902      	bls.n	8008ea4 <_free_r+0x7c>
 8008e9e:	230c      	movs	r3, #12
 8008ea0:	602b      	str	r3, [r5, #0]
 8008ea2:	e7d3      	b.n	8008e4c <_free_r+0x24>
 8008ea4:	6820      	ldr	r0, [r4, #0]
 8008ea6:	1821      	adds	r1, r4, r0
 8008ea8:	428a      	cmp	r2, r1
 8008eaa:	bf04      	itt	eq
 8008eac:	6811      	ldreq	r1, [r2, #0]
 8008eae:	6852      	ldreq	r2, [r2, #4]
 8008eb0:	6062      	str	r2, [r4, #4]
 8008eb2:	bf04      	itt	eq
 8008eb4:	1809      	addeq	r1, r1, r0
 8008eb6:	6021      	streq	r1, [r4, #0]
 8008eb8:	605c      	str	r4, [r3, #4]
 8008eba:	e7c7      	b.n	8008e4c <_free_r+0x24>
 8008ebc:	bd38      	pop	{r3, r4, r5, pc}
 8008ebe:	bf00      	nop
 8008ec0:	20027b2c 	.word	0x20027b2c

08008ec4 <_malloc_r>:
 8008ec4:	b570      	push	{r4, r5, r6, lr}
 8008ec6:	1ccd      	adds	r5, r1, #3
 8008ec8:	f025 0503 	bic.w	r5, r5, #3
 8008ecc:	3508      	adds	r5, #8
 8008ece:	2d0c      	cmp	r5, #12
 8008ed0:	bf38      	it	cc
 8008ed2:	250c      	movcc	r5, #12
 8008ed4:	2d00      	cmp	r5, #0
 8008ed6:	4606      	mov	r6, r0
 8008ed8:	db01      	blt.n	8008ede <_malloc_r+0x1a>
 8008eda:	42a9      	cmp	r1, r5
 8008edc:	d903      	bls.n	8008ee6 <_malloc_r+0x22>
 8008ede:	230c      	movs	r3, #12
 8008ee0:	6033      	str	r3, [r6, #0]
 8008ee2:	2000      	movs	r0, #0
 8008ee4:	bd70      	pop	{r4, r5, r6, pc}
 8008ee6:	f000 fd35 	bl	8009954 <__malloc_lock>
 8008eea:	4a23      	ldr	r2, [pc, #140]	; (8008f78 <_malloc_r+0xb4>)
 8008eec:	6814      	ldr	r4, [r2, #0]
 8008eee:	4621      	mov	r1, r4
 8008ef0:	b991      	cbnz	r1, 8008f18 <_malloc_r+0x54>
 8008ef2:	4c22      	ldr	r4, [pc, #136]	; (8008f7c <_malloc_r+0xb8>)
 8008ef4:	6823      	ldr	r3, [r4, #0]
 8008ef6:	b91b      	cbnz	r3, 8008f00 <_malloc_r+0x3c>
 8008ef8:	4630      	mov	r0, r6
 8008efa:	f000 fc67 	bl	80097cc <_sbrk_r>
 8008efe:	6020      	str	r0, [r4, #0]
 8008f00:	4629      	mov	r1, r5
 8008f02:	4630      	mov	r0, r6
 8008f04:	f000 fc62 	bl	80097cc <_sbrk_r>
 8008f08:	1c43      	adds	r3, r0, #1
 8008f0a:	d126      	bne.n	8008f5a <_malloc_r+0x96>
 8008f0c:	230c      	movs	r3, #12
 8008f0e:	6033      	str	r3, [r6, #0]
 8008f10:	4630      	mov	r0, r6
 8008f12:	f000 fd20 	bl	8009956 <__malloc_unlock>
 8008f16:	e7e4      	b.n	8008ee2 <_malloc_r+0x1e>
 8008f18:	680b      	ldr	r3, [r1, #0]
 8008f1a:	1b5b      	subs	r3, r3, r5
 8008f1c:	d41a      	bmi.n	8008f54 <_malloc_r+0x90>
 8008f1e:	2b0b      	cmp	r3, #11
 8008f20:	d90f      	bls.n	8008f42 <_malloc_r+0x7e>
 8008f22:	600b      	str	r3, [r1, #0]
 8008f24:	50cd      	str	r5, [r1, r3]
 8008f26:	18cc      	adds	r4, r1, r3
 8008f28:	4630      	mov	r0, r6
 8008f2a:	f000 fd14 	bl	8009956 <__malloc_unlock>
 8008f2e:	f104 000b 	add.w	r0, r4, #11
 8008f32:	1d23      	adds	r3, r4, #4
 8008f34:	f020 0007 	bic.w	r0, r0, #7
 8008f38:	1ac3      	subs	r3, r0, r3
 8008f3a:	d01b      	beq.n	8008f74 <_malloc_r+0xb0>
 8008f3c:	425a      	negs	r2, r3
 8008f3e:	50e2      	str	r2, [r4, r3]
 8008f40:	bd70      	pop	{r4, r5, r6, pc}
 8008f42:	428c      	cmp	r4, r1
 8008f44:	bf0d      	iteet	eq
 8008f46:	6863      	ldreq	r3, [r4, #4]
 8008f48:	684b      	ldrne	r3, [r1, #4]
 8008f4a:	6063      	strne	r3, [r4, #4]
 8008f4c:	6013      	streq	r3, [r2, #0]
 8008f4e:	bf18      	it	ne
 8008f50:	460c      	movne	r4, r1
 8008f52:	e7e9      	b.n	8008f28 <_malloc_r+0x64>
 8008f54:	460c      	mov	r4, r1
 8008f56:	6849      	ldr	r1, [r1, #4]
 8008f58:	e7ca      	b.n	8008ef0 <_malloc_r+0x2c>
 8008f5a:	1cc4      	adds	r4, r0, #3
 8008f5c:	f024 0403 	bic.w	r4, r4, #3
 8008f60:	42a0      	cmp	r0, r4
 8008f62:	d005      	beq.n	8008f70 <_malloc_r+0xac>
 8008f64:	1a21      	subs	r1, r4, r0
 8008f66:	4630      	mov	r0, r6
 8008f68:	f000 fc30 	bl	80097cc <_sbrk_r>
 8008f6c:	3001      	adds	r0, #1
 8008f6e:	d0cd      	beq.n	8008f0c <_malloc_r+0x48>
 8008f70:	6025      	str	r5, [r4, #0]
 8008f72:	e7d9      	b.n	8008f28 <_malloc_r+0x64>
 8008f74:	bd70      	pop	{r4, r5, r6, pc}
 8008f76:	bf00      	nop
 8008f78:	20027b2c 	.word	0x20027b2c
 8008f7c:	20027b30 	.word	0x20027b30

08008f80 <__ssputs_r>:
 8008f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008f84:	688e      	ldr	r6, [r1, #8]
 8008f86:	429e      	cmp	r6, r3
 8008f88:	4682      	mov	sl, r0
 8008f8a:	460c      	mov	r4, r1
 8008f8c:	4691      	mov	r9, r2
 8008f8e:	4698      	mov	r8, r3
 8008f90:	d835      	bhi.n	8008ffe <__ssputs_r+0x7e>
 8008f92:	898a      	ldrh	r2, [r1, #12]
 8008f94:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008f98:	d031      	beq.n	8008ffe <__ssputs_r+0x7e>
 8008f9a:	6825      	ldr	r5, [r4, #0]
 8008f9c:	6909      	ldr	r1, [r1, #16]
 8008f9e:	1a6f      	subs	r7, r5, r1
 8008fa0:	6965      	ldr	r5, [r4, #20]
 8008fa2:	2302      	movs	r3, #2
 8008fa4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008fa8:	fb95 f5f3 	sdiv	r5, r5, r3
 8008fac:	f108 0301 	add.w	r3, r8, #1
 8008fb0:	443b      	add	r3, r7
 8008fb2:	429d      	cmp	r5, r3
 8008fb4:	bf38      	it	cc
 8008fb6:	461d      	movcc	r5, r3
 8008fb8:	0553      	lsls	r3, r2, #21
 8008fba:	d531      	bpl.n	8009020 <__ssputs_r+0xa0>
 8008fbc:	4629      	mov	r1, r5
 8008fbe:	f7ff ff81 	bl	8008ec4 <_malloc_r>
 8008fc2:	4606      	mov	r6, r0
 8008fc4:	b950      	cbnz	r0, 8008fdc <__ssputs_r+0x5c>
 8008fc6:	230c      	movs	r3, #12
 8008fc8:	f8ca 3000 	str.w	r3, [sl]
 8008fcc:	89a3      	ldrh	r3, [r4, #12]
 8008fce:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008fd2:	81a3      	strh	r3, [r4, #12]
 8008fd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008fd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008fdc:	463a      	mov	r2, r7
 8008fde:	6921      	ldr	r1, [r4, #16]
 8008fe0:	f7ff fbc7 	bl	8008772 <memcpy>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008fea:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fee:	81a3      	strh	r3, [r4, #12]
 8008ff0:	6126      	str	r6, [r4, #16]
 8008ff2:	6165      	str	r5, [r4, #20]
 8008ff4:	443e      	add	r6, r7
 8008ff6:	1bed      	subs	r5, r5, r7
 8008ff8:	6026      	str	r6, [r4, #0]
 8008ffa:	60a5      	str	r5, [r4, #8]
 8008ffc:	4646      	mov	r6, r8
 8008ffe:	4546      	cmp	r6, r8
 8009000:	bf28      	it	cs
 8009002:	4646      	movcs	r6, r8
 8009004:	4632      	mov	r2, r6
 8009006:	4649      	mov	r1, r9
 8009008:	6820      	ldr	r0, [r4, #0]
 800900a:	f000 fc89 	bl	8009920 <memmove>
 800900e:	68a3      	ldr	r3, [r4, #8]
 8009010:	1b9b      	subs	r3, r3, r6
 8009012:	60a3      	str	r3, [r4, #8]
 8009014:	6823      	ldr	r3, [r4, #0]
 8009016:	441e      	add	r6, r3
 8009018:	6026      	str	r6, [r4, #0]
 800901a:	2000      	movs	r0, #0
 800901c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009020:	462a      	mov	r2, r5
 8009022:	f000 fc99 	bl	8009958 <_realloc_r>
 8009026:	4606      	mov	r6, r0
 8009028:	2800      	cmp	r0, #0
 800902a:	d1e1      	bne.n	8008ff0 <__ssputs_r+0x70>
 800902c:	6921      	ldr	r1, [r4, #16]
 800902e:	4650      	mov	r0, sl
 8009030:	f7ff fefa 	bl	8008e28 <_free_r>
 8009034:	e7c7      	b.n	8008fc6 <__ssputs_r+0x46>
	...

08009038 <_svfiprintf_r>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	b09d      	sub	sp, #116	; 0x74
 800903e:	4680      	mov	r8, r0
 8009040:	9303      	str	r3, [sp, #12]
 8009042:	898b      	ldrh	r3, [r1, #12]
 8009044:	061c      	lsls	r4, r3, #24
 8009046:	460d      	mov	r5, r1
 8009048:	4616      	mov	r6, r2
 800904a:	d50f      	bpl.n	800906c <_svfiprintf_r+0x34>
 800904c:	690b      	ldr	r3, [r1, #16]
 800904e:	b96b      	cbnz	r3, 800906c <_svfiprintf_r+0x34>
 8009050:	2140      	movs	r1, #64	; 0x40
 8009052:	f7ff ff37 	bl	8008ec4 <_malloc_r>
 8009056:	6028      	str	r0, [r5, #0]
 8009058:	6128      	str	r0, [r5, #16]
 800905a:	b928      	cbnz	r0, 8009068 <_svfiprintf_r+0x30>
 800905c:	230c      	movs	r3, #12
 800905e:	f8c8 3000 	str.w	r3, [r8]
 8009062:	f04f 30ff 	mov.w	r0, #4294967295
 8009066:	e0c5      	b.n	80091f4 <_svfiprintf_r+0x1bc>
 8009068:	2340      	movs	r3, #64	; 0x40
 800906a:	616b      	str	r3, [r5, #20]
 800906c:	2300      	movs	r3, #0
 800906e:	9309      	str	r3, [sp, #36]	; 0x24
 8009070:	2320      	movs	r3, #32
 8009072:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009076:	2330      	movs	r3, #48	; 0x30
 8009078:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800907c:	f04f 0b01 	mov.w	fp, #1
 8009080:	4637      	mov	r7, r6
 8009082:	463c      	mov	r4, r7
 8009084:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009088:	2b00      	cmp	r3, #0
 800908a:	d13c      	bne.n	8009106 <_svfiprintf_r+0xce>
 800908c:	ebb7 0a06 	subs.w	sl, r7, r6
 8009090:	d00b      	beq.n	80090aa <_svfiprintf_r+0x72>
 8009092:	4653      	mov	r3, sl
 8009094:	4632      	mov	r2, r6
 8009096:	4629      	mov	r1, r5
 8009098:	4640      	mov	r0, r8
 800909a:	f7ff ff71 	bl	8008f80 <__ssputs_r>
 800909e:	3001      	adds	r0, #1
 80090a0:	f000 80a3 	beq.w	80091ea <_svfiprintf_r+0x1b2>
 80090a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80090a6:	4453      	add	r3, sl
 80090a8:	9309      	str	r3, [sp, #36]	; 0x24
 80090aa:	783b      	ldrb	r3, [r7, #0]
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 809c 	beq.w	80091ea <_svfiprintf_r+0x1b2>
 80090b2:	2300      	movs	r3, #0
 80090b4:	f04f 32ff 	mov.w	r2, #4294967295
 80090b8:	9304      	str	r3, [sp, #16]
 80090ba:	9307      	str	r3, [sp, #28]
 80090bc:	9205      	str	r2, [sp, #20]
 80090be:	9306      	str	r3, [sp, #24]
 80090c0:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80090c4:	931a      	str	r3, [sp, #104]	; 0x68
 80090c6:	2205      	movs	r2, #5
 80090c8:	7821      	ldrb	r1, [r4, #0]
 80090ca:	4850      	ldr	r0, [pc, #320]	; (800920c <_svfiprintf_r+0x1d4>)
 80090cc:	f7f9 fb20 	bl	8002710 <memchr>
 80090d0:	1c67      	adds	r7, r4, #1
 80090d2:	9b04      	ldr	r3, [sp, #16]
 80090d4:	b9d8      	cbnz	r0, 800910e <_svfiprintf_r+0xd6>
 80090d6:	06d9      	lsls	r1, r3, #27
 80090d8:	bf44      	itt	mi
 80090da:	2220      	movmi	r2, #32
 80090dc:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090e0:	071a      	lsls	r2, r3, #28
 80090e2:	bf44      	itt	mi
 80090e4:	222b      	movmi	r2, #43	; 0x2b
 80090e6:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80090ea:	7822      	ldrb	r2, [r4, #0]
 80090ec:	2a2a      	cmp	r2, #42	; 0x2a
 80090ee:	d016      	beq.n	800911e <_svfiprintf_r+0xe6>
 80090f0:	9a07      	ldr	r2, [sp, #28]
 80090f2:	2100      	movs	r1, #0
 80090f4:	200a      	movs	r0, #10
 80090f6:	4627      	mov	r7, r4
 80090f8:	3401      	adds	r4, #1
 80090fa:	783b      	ldrb	r3, [r7, #0]
 80090fc:	3b30      	subs	r3, #48	; 0x30
 80090fe:	2b09      	cmp	r3, #9
 8009100:	d951      	bls.n	80091a6 <_svfiprintf_r+0x16e>
 8009102:	b1c9      	cbz	r1, 8009138 <_svfiprintf_r+0x100>
 8009104:	e011      	b.n	800912a <_svfiprintf_r+0xf2>
 8009106:	2b25      	cmp	r3, #37	; 0x25
 8009108:	d0c0      	beq.n	800908c <_svfiprintf_r+0x54>
 800910a:	4627      	mov	r7, r4
 800910c:	e7b9      	b.n	8009082 <_svfiprintf_r+0x4a>
 800910e:	4a3f      	ldr	r2, [pc, #252]	; (800920c <_svfiprintf_r+0x1d4>)
 8009110:	1a80      	subs	r0, r0, r2
 8009112:	fa0b f000 	lsl.w	r0, fp, r0
 8009116:	4318      	orrs	r0, r3
 8009118:	9004      	str	r0, [sp, #16]
 800911a:	463c      	mov	r4, r7
 800911c:	e7d3      	b.n	80090c6 <_svfiprintf_r+0x8e>
 800911e:	9a03      	ldr	r2, [sp, #12]
 8009120:	1d11      	adds	r1, r2, #4
 8009122:	6812      	ldr	r2, [r2, #0]
 8009124:	9103      	str	r1, [sp, #12]
 8009126:	2a00      	cmp	r2, #0
 8009128:	db01      	blt.n	800912e <_svfiprintf_r+0xf6>
 800912a:	9207      	str	r2, [sp, #28]
 800912c:	e004      	b.n	8009138 <_svfiprintf_r+0x100>
 800912e:	4252      	negs	r2, r2
 8009130:	f043 0302 	orr.w	r3, r3, #2
 8009134:	9207      	str	r2, [sp, #28]
 8009136:	9304      	str	r3, [sp, #16]
 8009138:	783b      	ldrb	r3, [r7, #0]
 800913a:	2b2e      	cmp	r3, #46	; 0x2e
 800913c:	d10e      	bne.n	800915c <_svfiprintf_r+0x124>
 800913e:	787b      	ldrb	r3, [r7, #1]
 8009140:	2b2a      	cmp	r3, #42	; 0x2a
 8009142:	f107 0101 	add.w	r1, r7, #1
 8009146:	d132      	bne.n	80091ae <_svfiprintf_r+0x176>
 8009148:	9b03      	ldr	r3, [sp, #12]
 800914a:	1d1a      	adds	r2, r3, #4
 800914c:	681b      	ldr	r3, [r3, #0]
 800914e:	9203      	str	r2, [sp, #12]
 8009150:	2b00      	cmp	r3, #0
 8009152:	bfb8      	it	lt
 8009154:	f04f 33ff 	movlt.w	r3, #4294967295
 8009158:	3702      	adds	r7, #2
 800915a:	9305      	str	r3, [sp, #20]
 800915c:	4c2c      	ldr	r4, [pc, #176]	; (8009210 <_svfiprintf_r+0x1d8>)
 800915e:	7839      	ldrb	r1, [r7, #0]
 8009160:	2203      	movs	r2, #3
 8009162:	4620      	mov	r0, r4
 8009164:	f7f9 fad4 	bl	8002710 <memchr>
 8009168:	b138      	cbz	r0, 800917a <_svfiprintf_r+0x142>
 800916a:	2340      	movs	r3, #64	; 0x40
 800916c:	1b00      	subs	r0, r0, r4
 800916e:	fa03 f000 	lsl.w	r0, r3, r0
 8009172:	9b04      	ldr	r3, [sp, #16]
 8009174:	4303      	orrs	r3, r0
 8009176:	9304      	str	r3, [sp, #16]
 8009178:	3701      	adds	r7, #1
 800917a:	7839      	ldrb	r1, [r7, #0]
 800917c:	4825      	ldr	r0, [pc, #148]	; (8009214 <_svfiprintf_r+0x1dc>)
 800917e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8009182:	2206      	movs	r2, #6
 8009184:	1c7e      	adds	r6, r7, #1
 8009186:	f7f9 fac3 	bl	8002710 <memchr>
 800918a:	2800      	cmp	r0, #0
 800918c:	d035      	beq.n	80091fa <_svfiprintf_r+0x1c2>
 800918e:	4b22      	ldr	r3, [pc, #136]	; (8009218 <_svfiprintf_r+0x1e0>)
 8009190:	b9fb      	cbnz	r3, 80091d2 <_svfiprintf_r+0x19a>
 8009192:	9b03      	ldr	r3, [sp, #12]
 8009194:	3307      	adds	r3, #7
 8009196:	f023 0307 	bic.w	r3, r3, #7
 800919a:	3308      	adds	r3, #8
 800919c:	9303      	str	r3, [sp, #12]
 800919e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80091a0:	444b      	add	r3, r9
 80091a2:	9309      	str	r3, [sp, #36]	; 0x24
 80091a4:	e76c      	b.n	8009080 <_svfiprintf_r+0x48>
 80091a6:	fb00 3202 	mla	r2, r0, r2, r3
 80091aa:	2101      	movs	r1, #1
 80091ac:	e7a3      	b.n	80090f6 <_svfiprintf_r+0xbe>
 80091ae:	2300      	movs	r3, #0
 80091b0:	9305      	str	r3, [sp, #20]
 80091b2:	4618      	mov	r0, r3
 80091b4:	240a      	movs	r4, #10
 80091b6:	460f      	mov	r7, r1
 80091b8:	3101      	adds	r1, #1
 80091ba:	783a      	ldrb	r2, [r7, #0]
 80091bc:	3a30      	subs	r2, #48	; 0x30
 80091be:	2a09      	cmp	r2, #9
 80091c0:	d903      	bls.n	80091ca <_svfiprintf_r+0x192>
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d0ca      	beq.n	800915c <_svfiprintf_r+0x124>
 80091c6:	9005      	str	r0, [sp, #20]
 80091c8:	e7c8      	b.n	800915c <_svfiprintf_r+0x124>
 80091ca:	fb04 2000 	mla	r0, r4, r0, r2
 80091ce:	2301      	movs	r3, #1
 80091d0:	e7f1      	b.n	80091b6 <_svfiprintf_r+0x17e>
 80091d2:	ab03      	add	r3, sp, #12
 80091d4:	9300      	str	r3, [sp, #0]
 80091d6:	462a      	mov	r2, r5
 80091d8:	4b10      	ldr	r3, [pc, #64]	; (800921c <_svfiprintf_r+0x1e4>)
 80091da:	a904      	add	r1, sp, #16
 80091dc:	4640      	mov	r0, r8
 80091de:	f3af 8000 	nop.w
 80091e2:	f1b0 3fff 	cmp.w	r0, #4294967295
 80091e6:	4681      	mov	r9, r0
 80091e8:	d1d9      	bne.n	800919e <_svfiprintf_r+0x166>
 80091ea:	89ab      	ldrh	r3, [r5, #12]
 80091ec:	065b      	lsls	r3, r3, #25
 80091ee:	f53f af38 	bmi.w	8009062 <_svfiprintf_r+0x2a>
 80091f2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80091f4:	b01d      	add	sp, #116	; 0x74
 80091f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80091fa:	ab03      	add	r3, sp, #12
 80091fc:	9300      	str	r3, [sp, #0]
 80091fe:	462a      	mov	r2, r5
 8009200:	4b06      	ldr	r3, [pc, #24]	; (800921c <_svfiprintf_r+0x1e4>)
 8009202:	a904      	add	r1, sp, #16
 8009204:	4640      	mov	r0, r8
 8009206:	f000 f9c1 	bl	800958c <_printf_i>
 800920a:	e7ea      	b.n	80091e2 <_svfiprintf_r+0x1aa>
 800920c:	081417f0 	.word	0x081417f0
 8009210:	081417f6 	.word	0x081417f6
 8009214:	081417fa 	.word	0x081417fa
 8009218:	00000000 	.word	0x00000000
 800921c:	08008f81 	.word	0x08008f81

08009220 <__sfputc_r>:
 8009220:	6893      	ldr	r3, [r2, #8]
 8009222:	3b01      	subs	r3, #1
 8009224:	2b00      	cmp	r3, #0
 8009226:	b410      	push	{r4}
 8009228:	6093      	str	r3, [r2, #8]
 800922a:	da09      	bge.n	8009240 <__sfputc_r+0x20>
 800922c:	6994      	ldr	r4, [r2, #24]
 800922e:	42a3      	cmp	r3, r4
 8009230:	db02      	blt.n	8009238 <__sfputc_r+0x18>
 8009232:	b2cb      	uxtb	r3, r1
 8009234:	2b0a      	cmp	r3, #10
 8009236:	d103      	bne.n	8009240 <__sfputc_r+0x20>
 8009238:	f85d 4b04 	ldr.w	r4, [sp], #4
 800923c:	f7ff bb54 	b.w	80088e8 <__swbuf_r>
 8009240:	6813      	ldr	r3, [r2, #0]
 8009242:	1c58      	adds	r0, r3, #1
 8009244:	6010      	str	r0, [r2, #0]
 8009246:	7019      	strb	r1, [r3, #0]
 8009248:	b2c8      	uxtb	r0, r1
 800924a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800924e:	4770      	bx	lr

08009250 <__sfputs_r>:
 8009250:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009252:	4606      	mov	r6, r0
 8009254:	460f      	mov	r7, r1
 8009256:	4614      	mov	r4, r2
 8009258:	18d5      	adds	r5, r2, r3
 800925a:	42ac      	cmp	r4, r5
 800925c:	d101      	bne.n	8009262 <__sfputs_r+0x12>
 800925e:	2000      	movs	r0, #0
 8009260:	e007      	b.n	8009272 <__sfputs_r+0x22>
 8009262:	463a      	mov	r2, r7
 8009264:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009268:	4630      	mov	r0, r6
 800926a:	f7ff ffd9 	bl	8009220 <__sfputc_r>
 800926e:	1c43      	adds	r3, r0, #1
 8009270:	d1f3      	bne.n	800925a <__sfputs_r+0xa>
 8009272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08009274 <_vfiprintf_r>:
 8009274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009278:	b09d      	sub	sp, #116	; 0x74
 800927a:	460c      	mov	r4, r1
 800927c:	4617      	mov	r7, r2
 800927e:	9303      	str	r3, [sp, #12]
 8009280:	4606      	mov	r6, r0
 8009282:	b118      	cbz	r0, 800928c <_vfiprintf_r+0x18>
 8009284:	6983      	ldr	r3, [r0, #24]
 8009286:	b90b      	cbnz	r3, 800928c <_vfiprintf_r+0x18>
 8009288:	f7ff fce0 	bl	8008c4c <__sinit>
 800928c:	4b7c      	ldr	r3, [pc, #496]	; (8009480 <_vfiprintf_r+0x20c>)
 800928e:	429c      	cmp	r4, r3
 8009290:	d157      	bne.n	8009342 <_vfiprintf_r+0xce>
 8009292:	6874      	ldr	r4, [r6, #4]
 8009294:	89a3      	ldrh	r3, [r4, #12]
 8009296:	0718      	lsls	r0, r3, #28
 8009298:	d55d      	bpl.n	8009356 <_vfiprintf_r+0xe2>
 800929a:	6923      	ldr	r3, [r4, #16]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d05a      	beq.n	8009356 <_vfiprintf_r+0xe2>
 80092a0:	2300      	movs	r3, #0
 80092a2:	9309      	str	r3, [sp, #36]	; 0x24
 80092a4:	2320      	movs	r3, #32
 80092a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80092aa:	2330      	movs	r3, #48	; 0x30
 80092ac:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80092b0:	f04f 0b01 	mov.w	fp, #1
 80092b4:	46b8      	mov	r8, r7
 80092b6:	4645      	mov	r5, r8
 80092b8:	f815 3b01 	ldrb.w	r3, [r5], #1
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d155      	bne.n	800936c <_vfiprintf_r+0xf8>
 80092c0:	ebb8 0a07 	subs.w	sl, r8, r7
 80092c4:	d00b      	beq.n	80092de <_vfiprintf_r+0x6a>
 80092c6:	4653      	mov	r3, sl
 80092c8:	463a      	mov	r2, r7
 80092ca:	4621      	mov	r1, r4
 80092cc:	4630      	mov	r0, r6
 80092ce:	f7ff ffbf 	bl	8009250 <__sfputs_r>
 80092d2:	3001      	adds	r0, #1
 80092d4:	f000 80c4 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 80092d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80092da:	4453      	add	r3, sl
 80092dc:	9309      	str	r3, [sp, #36]	; 0x24
 80092de:	f898 3000 	ldrb.w	r3, [r8]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	f000 80bc 	beq.w	8009460 <_vfiprintf_r+0x1ec>
 80092e8:	2300      	movs	r3, #0
 80092ea:	f04f 32ff 	mov.w	r2, #4294967295
 80092ee:	9304      	str	r3, [sp, #16]
 80092f0:	9307      	str	r3, [sp, #28]
 80092f2:	9205      	str	r2, [sp, #20]
 80092f4:	9306      	str	r3, [sp, #24]
 80092f6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80092fa:	931a      	str	r3, [sp, #104]	; 0x68
 80092fc:	2205      	movs	r2, #5
 80092fe:	7829      	ldrb	r1, [r5, #0]
 8009300:	4860      	ldr	r0, [pc, #384]	; (8009484 <_vfiprintf_r+0x210>)
 8009302:	f7f9 fa05 	bl	8002710 <memchr>
 8009306:	f105 0801 	add.w	r8, r5, #1
 800930a:	9b04      	ldr	r3, [sp, #16]
 800930c:	2800      	cmp	r0, #0
 800930e:	d131      	bne.n	8009374 <_vfiprintf_r+0x100>
 8009310:	06d9      	lsls	r1, r3, #27
 8009312:	bf44      	itt	mi
 8009314:	2220      	movmi	r2, #32
 8009316:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 800931a:	071a      	lsls	r2, r3, #28
 800931c:	bf44      	itt	mi
 800931e:	222b      	movmi	r2, #43	; 0x2b
 8009320:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 8009324:	782a      	ldrb	r2, [r5, #0]
 8009326:	2a2a      	cmp	r2, #42	; 0x2a
 8009328:	d02c      	beq.n	8009384 <_vfiprintf_r+0x110>
 800932a:	9a07      	ldr	r2, [sp, #28]
 800932c:	2100      	movs	r1, #0
 800932e:	200a      	movs	r0, #10
 8009330:	46a8      	mov	r8, r5
 8009332:	3501      	adds	r5, #1
 8009334:	f898 3000 	ldrb.w	r3, [r8]
 8009338:	3b30      	subs	r3, #48	; 0x30
 800933a:	2b09      	cmp	r3, #9
 800933c:	d96d      	bls.n	800941a <_vfiprintf_r+0x1a6>
 800933e:	b371      	cbz	r1, 800939e <_vfiprintf_r+0x12a>
 8009340:	e026      	b.n	8009390 <_vfiprintf_r+0x11c>
 8009342:	4b51      	ldr	r3, [pc, #324]	; (8009488 <_vfiprintf_r+0x214>)
 8009344:	429c      	cmp	r4, r3
 8009346:	d101      	bne.n	800934c <_vfiprintf_r+0xd8>
 8009348:	68b4      	ldr	r4, [r6, #8]
 800934a:	e7a3      	b.n	8009294 <_vfiprintf_r+0x20>
 800934c:	4b4f      	ldr	r3, [pc, #316]	; (800948c <_vfiprintf_r+0x218>)
 800934e:	429c      	cmp	r4, r3
 8009350:	bf08      	it	eq
 8009352:	68f4      	ldreq	r4, [r6, #12]
 8009354:	e79e      	b.n	8009294 <_vfiprintf_r+0x20>
 8009356:	4621      	mov	r1, r4
 8009358:	4630      	mov	r0, r6
 800935a:	f7ff fb17 	bl	800898c <__swsetup_r>
 800935e:	2800      	cmp	r0, #0
 8009360:	d09e      	beq.n	80092a0 <_vfiprintf_r+0x2c>
 8009362:	f04f 30ff 	mov.w	r0, #4294967295
 8009366:	b01d      	add	sp, #116	; 0x74
 8009368:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800936c:	2b25      	cmp	r3, #37	; 0x25
 800936e:	d0a7      	beq.n	80092c0 <_vfiprintf_r+0x4c>
 8009370:	46a8      	mov	r8, r5
 8009372:	e7a0      	b.n	80092b6 <_vfiprintf_r+0x42>
 8009374:	4a43      	ldr	r2, [pc, #268]	; (8009484 <_vfiprintf_r+0x210>)
 8009376:	1a80      	subs	r0, r0, r2
 8009378:	fa0b f000 	lsl.w	r0, fp, r0
 800937c:	4318      	orrs	r0, r3
 800937e:	9004      	str	r0, [sp, #16]
 8009380:	4645      	mov	r5, r8
 8009382:	e7bb      	b.n	80092fc <_vfiprintf_r+0x88>
 8009384:	9a03      	ldr	r2, [sp, #12]
 8009386:	1d11      	adds	r1, r2, #4
 8009388:	6812      	ldr	r2, [r2, #0]
 800938a:	9103      	str	r1, [sp, #12]
 800938c:	2a00      	cmp	r2, #0
 800938e:	db01      	blt.n	8009394 <_vfiprintf_r+0x120>
 8009390:	9207      	str	r2, [sp, #28]
 8009392:	e004      	b.n	800939e <_vfiprintf_r+0x12a>
 8009394:	4252      	negs	r2, r2
 8009396:	f043 0302 	orr.w	r3, r3, #2
 800939a:	9207      	str	r2, [sp, #28]
 800939c:	9304      	str	r3, [sp, #16]
 800939e:	f898 3000 	ldrb.w	r3, [r8]
 80093a2:	2b2e      	cmp	r3, #46	; 0x2e
 80093a4:	d110      	bne.n	80093c8 <_vfiprintf_r+0x154>
 80093a6:	f898 3001 	ldrb.w	r3, [r8, #1]
 80093aa:	2b2a      	cmp	r3, #42	; 0x2a
 80093ac:	f108 0101 	add.w	r1, r8, #1
 80093b0:	d137      	bne.n	8009422 <_vfiprintf_r+0x1ae>
 80093b2:	9b03      	ldr	r3, [sp, #12]
 80093b4:	1d1a      	adds	r2, r3, #4
 80093b6:	681b      	ldr	r3, [r3, #0]
 80093b8:	9203      	str	r2, [sp, #12]
 80093ba:	2b00      	cmp	r3, #0
 80093bc:	bfb8      	it	lt
 80093be:	f04f 33ff 	movlt.w	r3, #4294967295
 80093c2:	f108 0802 	add.w	r8, r8, #2
 80093c6:	9305      	str	r3, [sp, #20]
 80093c8:	4d31      	ldr	r5, [pc, #196]	; (8009490 <_vfiprintf_r+0x21c>)
 80093ca:	f898 1000 	ldrb.w	r1, [r8]
 80093ce:	2203      	movs	r2, #3
 80093d0:	4628      	mov	r0, r5
 80093d2:	f7f9 f99d 	bl	8002710 <memchr>
 80093d6:	b140      	cbz	r0, 80093ea <_vfiprintf_r+0x176>
 80093d8:	2340      	movs	r3, #64	; 0x40
 80093da:	1b40      	subs	r0, r0, r5
 80093dc:	fa03 f000 	lsl.w	r0, r3, r0
 80093e0:	9b04      	ldr	r3, [sp, #16]
 80093e2:	4303      	orrs	r3, r0
 80093e4:	9304      	str	r3, [sp, #16]
 80093e6:	f108 0801 	add.w	r8, r8, #1
 80093ea:	f898 1000 	ldrb.w	r1, [r8]
 80093ee:	4829      	ldr	r0, [pc, #164]	; (8009494 <_vfiprintf_r+0x220>)
 80093f0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80093f4:	2206      	movs	r2, #6
 80093f6:	f108 0701 	add.w	r7, r8, #1
 80093fa:	f7f9 f989 	bl	8002710 <memchr>
 80093fe:	2800      	cmp	r0, #0
 8009400:	d034      	beq.n	800946c <_vfiprintf_r+0x1f8>
 8009402:	4b25      	ldr	r3, [pc, #148]	; (8009498 <_vfiprintf_r+0x224>)
 8009404:	bb03      	cbnz	r3, 8009448 <_vfiprintf_r+0x1d4>
 8009406:	9b03      	ldr	r3, [sp, #12]
 8009408:	3307      	adds	r3, #7
 800940a:	f023 0307 	bic.w	r3, r3, #7
 800940e:	3308      	adds	r3, #8
 8009410:	9303      	str	r3, [sp, #12]
 8009412:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009414:	444b      	add	r3, r9
 8009416:	9309      	str	r3, [sp, #36]	; 0x24
 8009418:	e74c      	b.n	80092b4 <_vfiprintf_r+0x40>
 800941a:	fb00 3202 	mla	r2, r0, r2, r3
 800941e:	2101      	movs	r1, #1
 8009420:	e786      	b.n	8009330 <_vfiprintf_r+0xbc>
 8009422:	2300      	movs	r3, #0
 8009424:	9305      	str	r3, [sp, #20]
 8009426:	4618      	mov	r0, r3
 8009428:	250a      	movs	r5, #10
 800942a:	4688      	mov	r8, r1
 800942c:	3101      	adds	r1, #1
 800942e:	f898 2000 	ldrb.w	r2, [r8]
 8009432:	3a30      	subs	r2, #48	; 0x30
 8009434:	2a09      	cmp	r2, #9
 8009436:	d903      	bls.n	8009440 <_vfiprintf_r+0x1cc>
 8009438:	2b00      	cmp	r3, #0
 800943a:	d0c5      	beq.n	80093c8 <_vfiprintf_r+0x154>
 800943c:	9005      	str	r0, [sp, #20]
 800943e:	e7c3      	b.n	80093c8 <_vfiprintf_r+0x154>
 8009440:	fb05 2000 	mla	r0, r5, r0, r2
 8009444:	2301      	movs	r3, #1
 8009446:	e7f0      	b.n	800942a <_vfiprintf_r+0x1b6>
 8009448:	ab03      	add	r3, sp, #12
 800944a:	9300      	str	r3, [sp, #0]
 800944c:	4622      	mov	r2, r4
 800944e:	4b13      	ldr	r3, [pc, #76]	; (800949c <_vfiprintf_r+0x228>)
 8009450:	a904      	add	r1, sp, #16
 8009452:	4630      	mov	r0, r6
 8009454:	f3af 8000 	nop.w
 8009458:	f1b0 3fff 	cmp.w	r0, #4294967295
 800945c:	4681      	mov	r9, r0
 800945e:	d1d8      	bne.n	8009412 <_vfiprintf_r+0x19e>
 8009460:	89a3      	ldrh	r3, [r4, #12]
 8009462:	065b      	lsls	r3, r3, #25
 8009464:	f53f af7d 	bmi.w	8009362 <_vfiprintf_r+0xee>
 8009468:	9809      	ldr	r0, [sp, #36]	; 0x24
 800946a:	e77c      	b.n	8009366 <_vfiprintf_r+0xf2>
 800946c:	ab03      	add	r3, sp, #12
 800946e:	9300      	str	r3, [sp, #0]
 8009470:	4622      	mov	r2, r4
 8009472:	4b0a      	ldr	r3, [pc, #40]	; (800949c <_vfiprintf_r+0x228>)
 8009474:	a904      	add	r1, sp, #16
 8009476:	4630      	mov	r0, r6
 8009478:	f000 f888 	bl	800958c <_printf_i>
 800947c:	e7ec      	b.n	8009458 <_vfiprintf_r+0x1e4>
 800947e:	bf00      	nop
 8009480:	081417b0 	.word	0x081417b0
 8009484:	081417f0 	.word	0x081417f0
 8009488:	081417d0 	.word	0x081417d0
 800948c:	08141790 	.word	0x08141790
 8009490:	081417f6 	.word	0x081417f6
 8009494:	081417fa 	.word	0x081417fa
 8009498:	00000000 	.word	0x00000000
 800949c:	08009251 	.word	0x08009251

080094a0 <_printf_common>:
 80094a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094a4:	4691      	mov	r9, r2
 80094a6:	461f      	mov	r7, r3
 80094a8:	688a      	ldr	r2, [r1, #8]
 80094aa:	690b      	ldr	r3, [r1, #16]
 80094ac:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80094b0:	4293      	cmp	r3, r2
 80094b2:	bfb8      	it	lt
 80094b4:	4613      	movlt	r3, r2
 80094b6:	f8c9 3000 	str.w	r3, [r9]
 80094ba:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80094be:	4606      	mov	r6, r0
 80094c0:	460c      	mov	r4, r1
 80094c2:	b112      	cbz	r2, 80094ca <_printf_common+0x2a>
 80094c4:	3301      	adds	r3, #1
 80094c6:	f8c9 3000 	str.w	r3, [r9]
 80094ca:	6823      	ldr	r3, [r4, #0]
 80094cc:	0699      	lsls	r1, r3, #26
 80094ce:	bf42      	ittt	mi
 80094d0:	f8d9 3000 	ldrmi.w	r3, [r9]
 80094d4:	3302      	addmi	r3, #2
 80094d6:	f8c9 3000 	strmi.w	r3, [r9]
 80094da:	6825      	ldr	r5, [r4, #0]
 80094dc:	f015 0506 	ands.w	r5, r5, #6
 80094e0:	d107      	bne.n	80094f2 <_printf_common+0x52>
 80094e2:	f104 0a19 	add.w	sl, r4, #25
 80094e6:	68e3      	ldr	r3, [r4, #12]
 80094e8:	f8d9 2000 	ldr.w	r2, [r9]
 80094ec:	1a9b      	subs	r3, r3, r2
 80094ee:	429d      	cmp	r5, r3
 80094f0:	db29      	blt.n	8009546 <_printf_common+0xa6>
 80094f2:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 80094f6:	6822      	ldr	r2, [r4, #0]
 80094f8:	3300      	adds	r3, #0
 80094fa:	bf18      	it	ne
 80094fc:	2301      	movne	r3, #1
 80094fe:	0692      	lsls	r2, r2, #26
 8009500:	d42e      	bmi.n	8009560 <_printf_common+0xc0>
 8009502:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009506:	4639      	mov	r1, r7
 8009508:	4630      	mov	r0, r6
 800950a:	47c0      	blx	r8
 800950c:	3001      	adds	r0, #1
 800950e:	d021      	beq.n	8009554 <_printf_common+0xb4>
 8009510:	6823      	ldr	r3, [r4, #0]
 8009512:	68e5      	ldr	r5, [r4, #12]
 8009514:	f8d9 2000 	ldr.w	r2, [r9]
 8009518:	f003 0306 	and.w	r3, r3, #6
 800951c:	2b04      	cmp	r3, #4
 800951e:	bf08      	it	eq
 8009520:	1aad      	subeq	r5, r5, r2
 8009522:	68a3      	ldr	r3, [r4, #8]
 8009524:	6922      	ldr	r2, [r4, #16]
 8009526:	bf0c      	ite	eq
 8009528:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800952c:	2500      	movne	r5, #0
 800952e:	4293      	cmp	r3, r2
 8009530:	bfc4      	itt	gt
 8009532:	1a9b      	subgt	r3, r3, r2
 8009534:	18ed      	addgt	r5, r5, r3
 8009536:	f04f 0900 	mov.w	r9, #0
 800953a:	341a      	adds	r4, #26
 800953c:	454d      	cmp	r5, r9
 800953e:	d11b      	bne.n	8009578 <_printf_common+0xd8>
 8009540:	2000      	movs	r0, #0
 8009542:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009546:	2301      	movs	r3, #1
 8009548:	4652      	mov	r2, sl
 800954a:	4639      	mov	r1, r7
 800954c:	4630      	mov	r0, r6
 800954e:	47c0      	blx	r8
 8009550:	3001      	adds	r0, #1
 8009552:	d103      	bne.n	800955c <_printf_common+0xbc>
 8009554:	f04f 30ff 	mov.w	r0, #4294967295
 8009558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800955c:	3501      	adds	r5, #1
 800955e:	e7c2      	b.n	80094e6 <_printf_common+0x46>
 8009560:	18e1      	adds	r1, r4, r3
 8009562:	1c5a      	adds	r2, r3, #1
 8009564:	2030      	movs	r0, #48	; 0x30
 8009566:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800956a:	4422      	add	r2, r4
 800956c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009570:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009574:	3302      	adds	r3, #2
 8009576:	e7c4      	b.n	8009502 <_printf_common+0x62>
 8009578:	2301      	movs	r3, #1
 800957a:	4622      	mov	r2, r4
 800957c:	4639      	mov	r1, r7
 800957e:	4630      	mov	r0, r6
 8009580:	47c0      	blx	r8
 8009582:	3001      	adds	r0, #1
 8009584:	d0e6      	beq.n	8009554 <_printf_common+0xb4>
 8009586:	f109 0901 	add.w	r9, r9, #1
 800958a:	e7d7      	b.n	800953c <_printf_common+0x9c>

0800958c <_printf_i>:
 800958c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009590:	4617      	mov	r7, r2
 8009592:	7e0a      	ldrb	r2, [r1, #24]
 8009594:	b085      	sub	sp, #20
 8009596:	2a6e      	cmp	r2, #110	; 0x6e
 8009598:	4698      	mov	r8, r3
 800959a:	4606      	mov	r6, r0
 800959c:	460c      	mov	r4, r1
 800959e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80095a0:	f101 0e43 	add.w	lr, r1, #67	; 0x43
 80095a4:	f000 80bc 	beq.w	8009720 <_printf_i+0x194>
 80095a8:	d81a      	bhi.n	80095e0 <_printf_i+0x54>
 80095aa:	2a63      	cmp	r2, #99	; 0x63
 80095ac:	d02e      	beq.n	800960c <_printf_i+0x80>
 80095ae:	d80a      	bhi.n	80095c6 <_printf_i+0x3a>
 80095b0:	2a00      	cmp	r2, #0
 80095b2:	f000 80c8 	beq.w	8009746 <_printf_i+0x1ba>
 80095b6:	2a58      	cmp	r2, #88	; 0x58
 80095b8:	f000 808a 	beq.w	80096d0 <_printf_i+0x144>
 80095bc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80095c0:	f884 2042 	strb.w	r2, [r4, #66]	; 0x42
 80095c4:	e02a      	b.n	800961c <_printf_i+0x90>
 80095c6:	2a64      	cmp	r2, #100	; 0x64
 80095c8:	d001      	beq.n	80095ce <_printf_i+0x42>
 80095ca:	2a69      	cmp	r2, #105	; 0x69
 80095cc:	d1f6      	bne.n	80095bc <_printf_i+0x30>
 80095ce:	6821      	ldr	r1, [r4, #0]
 80095d0:	681a      	ldr	r2, [r3, #0]
 80095d2:	f011 0f80 	tst.w	r1, #128	; 0x80
 80095d6:	d023      	beq.n	8009620 <_printf_i+0x94>
 80095d8:	1d11      	adds	r1, r2, #4
 80095da:	6019      	str	r1, [r3, #0]
 80095dc:	6813      	ldr	r3, [r2, #0]
 80095de:	e027      	b.n	8009630 <_printf_i+0xa4>
 80095e0:	2a73      	cmp	r2, #115	; 0x73
 80095e2:	f000 80b4 	beq.w	800974e <_printf_i+0x1c2>
 80095e6:	d808      	bhi.n	80095fa <_printf_i+0x6e>
 80095e8:	2a6f      	cmp	r2, #111	; 0x6f
 80095ea:	d02a      	beq.n	8009642 <_printf_i+0xb6>
 80095ec:	2a70      	cmp	r2, #112	; 0x70
 80095ee:	d1e5      	bne.n	80095bc <_printf_i+0x30>
 80095f0:	680a      	ldr	r2, [r1, #0]
 80095f2:	f042 0220 	orr.w	r2, r2, #32
 80095f6:	600a      	str	r2, [r1, #0]
 80095f8:	e003      	b.n	8009602 <_printf_i+0x76>
 80095fa:	2a75      	cmp	r2, #117	; 0x75
 80095fc:	d021      	beq.n	8009642 <_printf_i+0xb6>
 80095fe:	2a78      	cmp	r2, #120	; 0x78
 8009600:	d1dc      	bne.n	80095bc <_printf_i+0x30>
 8009602:	2278      	movs	r2, #120	; 0x78
 8009604:	f884 2045 	strb.w	r2, [r4, #69]	; 0x45
 8009608:	496e      	ldr	r1, [pc, #440]	; (80097c4 <_printf_i+0x238>)
 800960a:	e064      	b.n	80096d6 <_printf_i+0x14a>
 800960c:	681a      	ldr	r2, [r3, #0]
 800960e:	f101 0542 	add.w	r5, r1, #66	; 0x42
 8009612:	1d11      	adds	r1, r2, #4
 8009614:	6019      	str	r1, [r3, #0]
 8009616:	6813      	ldr	r3, [r2, #0]
 8009618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800961c:	2301      	movs	r3, #1
 800961e:	e0a3      	b.n	8009768 <_printf_i+0x1dc>
 8009620:	f011 0f40 	tst.w	r1, #64	; 0x40
 8009624:	f102 0104 	add.w	r1, r2, #4
 8009628:	6019      	str	r1, [r3, #0]
 800962a:	d0d7      	beq.n	80095dc <_printf_i+0x50>
 800962c:	f9b2 3000 	ldrsh.w	r3, [r2]
 8009630:	2b00      	cmp	r3, #0
 8009632:	da03      	bge.n	800963c <_printf_i+0xb0>
 8009634:	222d      	movs	r2, #45	; 0x2d
 8009636:	425b      	negs	r3, r3
 8009638:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 800963c:	4962      	ldr	r1, [pc, #392]	; (80097c8 <_printf_i+0x23c>)
 800963e:	220a      	movs	r2, #10
 8009640:	e017      	b.n	8009672 <_printf_i+0xe6>
 8009642:	6820      	ldr	r0, [r4, #0]
 8009644:	6819      	ldr	r1, [r3, #0]
 8009646:	f010 0f80 	tst.w	r0, #128	; 0x80
 800964a:	d003      	beq.n	8009654 <_printf_i+0xc8>
 800964c:	1d08      	adds	r0, r1, #4
 800964e:	6018      	str	r0, [r3, #0]
 8009650:	680b      	ldr	r3, [r1, #0]
 8009652:	e006      	b.n	8009662 <_printf_i+0xd6>
 8009654:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009658:	f101 0004 	add.w	r0, r1, #4
 800965c:	6018      	str	r0, [r3, #0]
 800965e:	d0f7      	beq.n	8009650 <_printf_i+0xc4>
 8009660:	880b      	ldrh	r3, [r1, #0]
 8009662:	4959      	ldr	r1, [pc, #356]	; (80097c8 <_printf_i+0x23c>)
 8009664:	2a6f      	cmp	r2, #111	; 0x6f
 8009666:	bf14      	ite	ne
 8009668:	220a      	movne	r2, #10
 800966a:	2208      	moveq	r2, #8
 800966c:	2000      	movs	r0, #0
 800966e:	f884 0043 	strb.w	r0, [r4, #67]	; 0x43
 8009672:	6865      	ldr	r5, [r4, #4]
 8009674:	60a5      	str	r5, [r4, #8]
 8009676:	2d00      	cmp	r5, #0
 8009678:	f2c0 809c 	blt.w	80097b4 <_printf_i+0x228>
 800967c:	6820      	ldr	r0, [r4, #0]
 800967e:	f020 0004 	bic.w	r0, r0, #4
 8009682:	6020      	str	r0, [r4, #0]
 8009684:	2b00      	cmp	r3, #0
 8009686:	d13f      	bne.n	8009708 <_printf_i+0x17c>
 8009688:	2d00      	cmp	r5, #0
 800968a:	f040 8095 	bne.w	80097b8 <_printf_i+0x22c>
 800968e:	4675      	mov	r5, lr
 8009690:	2a08      	cmp	r2, #8
 8009692:	d10b      	bne.n	80096ac <_printf_i+0x120>
 8009694:	6823      	ldr	r3, [r4, #0]
 8009696:	07da      	lsls	r2, r3, #31
 8009698:	d508      	bpl.n	80096ac <_printf_i+0x120>
 800969a:	6923      	ldr	r3, [r4, #16]
 800969c:	6862      	ldr	r2, [r4, #4]
 800969e:	429a      	cmp	r2, r3
 80096a0:	bfde      	ittt	le
 80096a2:	2330      	movle	r3, #48	; 0x30
 80096a4:	f805 3c01 	strble.w	r3, [r5, #-1]
 80096a8:	f105 35ff 	addle.w	r5, r5, #4294967295
 80096ac:	ebae 0305 	sub.w	r3, lr, r5
 80096b0:	6123      	str	r3, [r4, #16]
 80096b2:	f8cd 8000 	str.w	r8, [sp]
 80096b6:	463b      	mov	r3, r7
 80096b8:	aa03      	add	r2, sp, #12
 80096ba:	4621      	mov	r1, r4
 80096bc:	4630      	mov	r0, r6
 80096be:	f7ff feef 	bl	80094a0 <_printf_common>
 80096c2:	3001      	adds	r0, #1
 80096c4:	d155      	bne.n	8009772 <_printf_i+0x1e6>
 80096c6:	f04f 30ff 	mov.w	r0, #4294967295
 80096ca:	b005      	add	sp, #20
 80096cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096d0:	f881 2045 	strb.w	r2, [r1, #69]	; 0x45
 80096d4:	493c      	ldr	r1, [pc, #240]	; (80097c8 <_printf_i+0x23c>)
 80096d6:	6822      	ldr	r2, [r4, #0]
 80096d8:	6818      	ldr	r0, [r3, #0]
 80096da:	f012 0f80 	tst.w	r2, #128	; 0x80
 80096de:	f100 0504 	add.w	r5, r0, #4
 80096e2:	601d      	str	r5, [r3, #0]
 80096e4:	d001      	beq.n	80096ea <_printf_i+0x15e>
 80096e6:	6803      	ldr	r3, [r0, #0]
 80096e8:	e002      	b.n	80096f0 <_printf_i+0x164>
 80096ea:	0655      	lsls	r5, r2, #25
 80096ec:	d5fb      	bpl.n	80096e6 <_printf_i+0x15a>
 80096ee:	8803      	ldrh	r3, [r0, #0]
 80096f0:	07d0      	lsls	r0, r2, #31
 80096f2:	bf44      	itt	mi
 80096f4:	f042 0220 	orrmi.w	r2, r2, #32
 80096f8:	6022      	strmi	r2, [r4, #0]
 80096fa:	b91b      	cbnz	r3, 8009704 <_printf_i+0x178>
 80096fc:	6822      	ldr	r2, [r4, #0]
 80096fe:	f022 0220 	bic.w	r2, r2, #32
 8009702:	6022      	str	r2, [r4, #0]
 8009704:	2210      	movs	r2, #16
 8009706:	e7b1      	b.n	800966c <_printf_i+0xe0>
 8009708:	4675      	mov	r5, lr
 800970a:	fbb3 f0f2 	udiv	r0, r3, r2
 800970e:	fb02 3310 	mls	r3, r2, r0, r3
 8009712:	5ccb      	ldrb	r3, [r1, r3]
 8009714:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8009718:	4603      	mov	r3, r0
 800971a:	2800      	cmp	r0, #0
 800971c:	d1f5      	bne.n	800970a <_printf_i+0x17e>
 800971e:	e7b7      	b.n	8009690 <_printf_i+0x104>
 8009720:	6808      	ldr	r0, [r1, #0]
 8009722:	681a      	ldr	r2, [r3, #0]
 8009724:	6949      	ldr	r1, [r1, #20]
 8009726:	f010 0f80 	tst.w	r0, #128	; 0x80
 800972a:	d004      	beq.n	8009736 <_printf_i+0x1aa>
 800972c:	1d10      	adds	r0, r2, #4
 800972e:	6018      	str	r0, [r3, #0]
 8009730:	6813      	ldr	r3, [r2, #0]
 8009732:	6019      	str	r1, [r3, #0]
 8009734:	e007      	b.n	8009746 <_printf_i+0x1ba>
 8009736:	f010 0f40 	tst.w	r0, #64	; 0x40
 800973a:	f102 0004 	add.w	r0, r2, #4
 800973e:	6018      	str	r0, [r3, #0]
 8009740:	6813      	ldr	r3, [r2, #0]
 8009742:	d0f6      	beq.n	8009732 <_printf_i+0x1a6>
 8009744:	8019      	strh	r1, [r3, #0]
 8009746:	2300      	movs	r3, #0
 8009748:	6123      	str	r3, [r4, #16]
 800974a:	4675      	mov	r5, lr
 800974c:	e7b1      	b.n	80096b2 <_printf_i+0x126>
 800974e:	681a      	ldr	r2, [r3, #0]
 8009750:	1d11      	adds	r1, r2, #4
 8009752:	6019      	str	r1, [r3, #0]
 8009754:	6815      	ldr	r5, [r2, #0]
 8009756:	6862      	ldr	r2, [r4, #4]
 8009758:	2100      	movs	r1, #0
 800975a:	4628      	mov	r0, r5
 800975c:	f7f8 ffd8 	bl	8002710 <memchr>
 8009760:	b108      	cbz	r0, 8009766 <_printf_i+0x1da>
 8009762:	1b40      	subs	r0, r0, r5
 8009764:	6060      	str	r0, [r4, #4]
 8009766:	6863      	ldr	r3, [r4, #4]
 8009768:	6123      	str	r3, [r4, #16]
 800976a:	2300      	movs	r3, #0
 800976c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009770:	e79f      	b.n	80096b2 <_printf_i+0x126>
 8009772:	6923      	ldr	r3, [r4, #16]
 8009774:	462a      	mov	r2, r5
 8009776:	4639      	mov	r1, r7
 8009778:	4630      	mov	r0, r6
 800977a:	47c0      	blx	r8
 800977c:	3001      	adds	r0, #1
 800977e:	d0a2      	beq.n	80096c6 <_printf_i+0x13a>
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	079b      	lsls	r3, r3, #30
 8009784:	d507      	bpl.n	8009796 <_printf_i+0x20a>
 8009786:	2500      	movs	r5, #0
 8009788:	f104 0919 	add.w	r9, r4, #25
 800978c:	68e3      	ldr	r3, [r4, #12]
 800978e:	9a03      	ldr	r2, [sp, #12]
 8009790:	1a9b      	subs	r3, r3, r2
 8009792:	429d      	cmp	r5, r3
 8009794:	db05      	blt.n	80097a2 <_printf_i+0x216>
 8009796:	68e0      	ldr	r0, [r4, #12]
 8009798:	9b03      	ldr	r3, [sp, #12]
 800979a:	4298      	cmp	r0, r3
 800979c:	bfb8      	it	lt
 800979e:	4618      	movlt	r0, r3
 80097a0:	e793      	b.n	80096ca <_printf_i+0x13e>
 80097a2:	2301      	movs	r3, #1
 80097a4:	464a      	mov	r2, r9
 80097a6:	4639      	mov	r1, r7
 80097a8:	4630      	mov	r0, r6
 80097aa:	47c0      	blx	r8
 80097ac:	3001      	adds	r0, #1
 80097ae:	d08a      	beq.n	80096c6 <_printf_i+0x13a>
 80097b0:	3501      	adds	r5, #1
 80097b2:	e7eb      	b.n	800978c <_printf_i+0x200>
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d1a7      	bne.n	8009708 <_printf_i+0x17c>
 80097b8:	780b      	ldrb	r3, [r1, #0]
 80097ba:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80097be:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80097c2:	e765      	b.n	8009690 <_printf_i+0x104>
 80097c4:	08141812 	.word	0x08141812
 80097c8:	08141801 	.word	0x08141801

080097cc <_sbrk_r>:
 80097cc:	b538      	push	{r3, r4, r5, lr}
 80097ce:	4c06      	ldr	r4, [pc, #24]	; (80097e8 <_sbrk_r+0x1c>)
 80097d0:	2300      	movs	r3, #0
 80097d2:	4605      	mov	r5, r0
 80097d4:	4608      	mov	r0, r1
 80097d6:	6023      	str	r3, [r4, #0]
 80097d8:	f7fe fd86 	bl	80082e8 <_sbrk>
 80097dc:	1c43      	adds	r3, r0, #1
 80097de:	d102      	bne.n	80097e6 <_sbrk_r+0x1a>
 80097e0:	6823      	ldr	r3, [r4, #0]
 80097e2:	b103      	cbz	r3, 80097e6 <_sbrk_r+0x1a>
 80097e4:	602b      	str	r3, [r5, #0]
 80097e6:	bd38      	pop	{r3, r4, r5, pc}
 80097e8:	2002982c 	.word	0x2002982c

080097ec <__sread>:
 80097ec:	b510      	push	{r4, lr}
 80097ee:	460c      	mov	r4, r1
 80097f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097f4:	f000 f8d6 	bl	80099a4 <_read_r>
 80097f8:	2800      	cmp	r0, #0
 80097fa:	bfab      	itete	ge
 80097fc:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80097fe:	89a3      	ldrhlt	r3, [r4, #12]
 8009800:	181b      	addge	r3, r3, r0
 8009802:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8009806:	bfac      	ite	ge
 8009808:	6563      	strge	r3, [r4, #84]	; 0x54
 800980a:	81a3      	strhlt	r3, [r4, #12]
 800980c:	bd10      	pop	{r4, pc}

0800980e <__swrite>:
 800980e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009812:	461f      	mov	r7, r3
 8009814:	898b      	ldrh	r3, [r1, #12]
 8009816:	05db      	lsls	r3, r3, #23
 8009818:	4605      	mov	r5, r0
 800981a:	460c      	mov	r4, r1
 800981c:	4616      	mov	r6, r2
 800981e:	d505      	bpl.n	800982c <__swrite+0x1e>
 8009820:	2302      	movs	r3, #2
 8009822:	2200      	movs	r2, #0
 8009824:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009828:	f000 f868 	bl	80098fc <_lseek_r>
 800982c:	89a3      	ldrh	r3, [r4, #12]
 800982e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009832:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8009836:	81a3      	strh	r3, [r4, #12]
 8009838:	4632      	mov	r2, r6
 800983a:	463b      	mov	r3, r7
 800983c:	4628      	mov	r0, r5
 800983e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009842:	f000 b817 	b.w	8009874 <_write_r>

08009846 <__sseek>:
 8009846:	b510      	push	{r4, lr}
 8009848:	460c      	mov	r4, r1
 800984a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800984e:	f000 f855 	bl	80098fc <_lseek_r>
 8009852:	1c43      	adds	r3, r0, #1
 8009854:	89a3      	ldrh	r3, [r4, #12]
 8009856:	bf15      	itete	ne
 8009858:	6560      	strne	r0, [r4, #84]	; 0x54
 800985a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800985e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8009862:	81a3      	strheq	r3, [r4, #12]
 8009864:	bf18      	it	ne
 8009866:	81a3      	strhne	r3, [r4, #12]
 8009868:	bd10      	pop	{r4, pc}

0800986a <__sclose>:
 800986a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800986e:	f000 b813 	b.w	8009898 <_close_r>
	...

08009874 <_write_r>:
 8009874:	b538      	push	{r3, r4, r5, lr}
 8009876:	4c07      	ldr	r4, [pc, #28]	; (8009894 <_write_r+0x20>)
 8009878:	4605      	mov	r5, r0
 800987a:	4608      	mov	r0, r1
 800987c:	4611      	mov	r1, r2
 800987e:	2200      	movs	r2, #0
 8009880:	6022      	str	r2, [r4, #0]
 8009882:	461a      	mov	r2, r3
 8009884:	f7fe fd22 	bl	80082cc <_write>
 8009888:	1c43      	adds	r3, r0, #1
 800988a:	d102      	bne.n	8009892 <_write_r+0x1e>
 800988c:	6823      	ldr	r3, [r4, #0]
 800988e:	b103      	cbz	r3, 8009892 <_write_r+0x1e>
 8009890:	602b      	str	r3, [r5, #0]
 8009892:	bd38      	pop	{r3, r4, r5, pc}
 8009894:	2002982c 	.word	0x2002982c

08009898 <_close_r>:
 8009898:	b538      	push	{r3, r4, r5, lr}
 800989a:	4c06      	ldr	r4, [pc, #24]	; (80098b4 <_close_r+0x1c>)
 800989c:	2300      	movs	r3, #0
 800989e:	4605      	mov	r5, r0
 80098a0:	4608      	mov	r0, r1
 80098a2:	6023      	str	r3, [r4, #0]
 80098a4:	f7fe fd3a 	bl	800831c <_close>
 80098a8:	1c43      	adds	r3, r0, #1
 80098aa:	d102      	bne.n	80098b2 <_close_r+0x1a>
 80098ac:	6823      	ldr	r3, [r4, #0]
 80098ae:	b103      	cbz	r3, 80098b2 <_close_r+0x1a>
 80098b0:	602b      	str	r3, [r5, #0]
 80098b2:	bd38      	pop	{r3, r4, r5, pc}
 80098b4:	2002982c 	.word	0x2002982c

080098b8 <_fstat_r>:
 80098b8:	b538      	push	{r3, r4, r5, lr}
 80098ba:	4c07      	ldr	r4, [pc, #28]	; (80098d8 <_fstat_r+0x20>)
 80098bc:	2300      	movs	r3, #0
 80098be:	4605      	mov	r5, r0
 80098c0:	4608      	mov	r0, r1
 80098c2:	4611      	mov	r1, r2
 80098c4:	6023      	str	r3, [r4, #0]
 80098c6:	f7fe fd2c 	bl	8008322 <_fstat>
 80098ca:	1c43      	adds	r3, r0, #1
 80098cc:	d102      	bne.n	80098d4 <_fstat_r+0x1c>
 80098ce:	6823      	ldr	r3, [r4, #0]
 80098d0:	b103      	cbz	r3, 80098d4 <_fstat_r+0x1c>
 80098d2:	602b      	str	r3, [r5, #0]
 80098d4:	bd38      	pop	{r3, r4, r5, pc}
 80098d6:	bf00      	nop
 80098d8:	2002982c 	.word	0x2002982c

080098dc <_isatty_r>:
 80098dc:	b538      	push	{r3, r4, r5, lr}
 80098de:	4c06      	ldr	r4, [pc, #24]	; (80098f8 <_isatty_r+0x1c>)
 80098e0:	2300      	movs	r3, #0
 80098e2:	4605      	mov	r5, r0
 80098e4:	4608      	mov	r0, r1
 80098e6:	6023      	str	r3, [r4, #0]
 80098e8:	f7fe fd20 	bl	800832c <_isatty>
 80098ec:	1c43      	adds	r3, r0, #1
 80098ee:	d102      	bne.n	80098f6 <_isatty_r+0x1a>
 80098f0:	6823      	ldr	r3, [r4, #0]
 80098f2:	b103      	cbz	r3, 80098f6 <_isatty_r+0x1a>
 80098f4:	602b      	str	r3, [r5, #0]
 80098f6:	bd38      	pop	{r3, r4, r5, pc}
 80098f8:	2002982c 	.word	0x2002982c

080098fc <_lseek_r>:
 80098fc:	b538      	push	{r3, r4, r5, lr}
 80098fe:	4c07      	ldr	r4, [pc, #28]	; (800991c <_lseek_r+0x20>)
 8009900:	4605      	mov	r5, r0
 8009902:	4608      	mov	r0, r1
 8009904:	4611      	mov	r1, r2
 8009906:	2200      	movs	r2, #0
 8009908:	6022      	str	r2, [r4, #0]
 800990a:	461a      	mov	r2, r3
 800990c:	f7fe fd10 	bl	8008330 <_lseek>
 8009910:	1c43      	adds	r3, r0, #1
 8009912:	d102      	bne.n	800991a <_lseek_r+0x1e>
 8009914:	6823      	ldr	r3, [r4, #0]
 8009916:	b103      	cbz	r3, 800991a <_lseek_r+0x1e>
 8009918:	602b      	str	r3, [r5, #0]
 800991a:	bd38      	pop	{r3, r4, r5, pc}
 800991c:	2002982c 	.word	0x2002982c

08009920 <memmove>:
 8009920:	4288      	cmp	r0, r1
 8009922:	b510      	push	{r4, lr}
 8009924:	eb01 0302 	add.w	r3, r1, r2
 8009928:	d803      	bhi.n	8009932 <memmove+0x12>
 800992a:	1e42      	subs	r2, r0, #1
 800992c:	4299      	cmp	r1, r3
 800992e:	d10c      	bne.n	800994a <memmove+0x2a>
 8009930:	bd10      	pop	{r4, pc}
 8009932:	4298      	cmp	r0, r3
 8009934:	d2f9      	bcs.n	800992a <memmove+0xa>
 8009936:	1881      	adds	r1, r0, r2
 8009938:	1ad2      	subs	r2, r2, r3
 800993a:	42d3      	cmn	r3, r2
 800993c:	d100      	bne.n	8009940 <memmove+0x20>
 800993e:	bd10      	pop	{r4, pc}
 8009940:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8009944:	f801 4d01 	strb.w	r4, [r1, #-1]!
 8009948:	e7f7      	b.n	800993a <memmove+0x1a>
 800994a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800994e:	f802 4f01 	strb.w	r4, [r2, #1]!
 8009952:	e7eb      	b.n	800992c <memmove+0xc>

08009954 <__malloc_lock>:
 8009954:	4770      	bx	lr

08009956 <__malloc_unlock>:
 8009956:	4770      	bx	lr

08009958 <_realloc_r>:
 8009958:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800995a:	4607      	mov	r7, r0
 800995c:	4614      	mov	r4, r2
 800995e:	460e      	mov	r6, r1
 8009960:	b921      	cbnz	r1, 800996c <_realloc_r+0x14>
 8009962:	4611      	mov	r1, r2
 8009964:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8009968:	f7ff baac 	b.w	8008ec4 <_malloc_r>
 800996c:	b922      	cbnz	r2, 8009978 <_realloc_r+0x20>
 800996e:	f7ff fa5b 	bl	8008e28 <_free_r>
 8009972:	4625      	mov	r5, r4
 8009974:	4628      	mov	r0, r5
 8009976:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009978:	f000 f826 	bl	80099c8 <_malloc_usable_size_r>
 800997c:	4284      	cmp	r4, r0
 800997e:	d90f      	bls.n	80099a0 <_realloc_r+0x48>
 8009980:	4621      	mov	r1, r4
 8009982:	4638      	mov	r0, r7
 8009984:	f7ff fa9e 	bl	8008ec4 <_malloc_r>
 8009988:	4605      	mov	r5, r0
 800998a:	2800      	cmp	r0, #0
 800998c:	d0f2      	beq.n	8009974 <_realloc_r+0x1c>
 800998e:	4631      	mov	r1, r6
 8009990:	4622      	mov	r2, r4
 8009992:	f7fe feee 	bl	8008772 <memcpy>
 8009996:	4631      	mov	r1, r6
 8009998:	4638      	mov	r0, r7
 800999a:	f7ff fa45 	bl	8008e28 <_free_r>
 800999e:	e7e9      	b.n	8009974 <_realloc_r+0x1c>
 80099a0:	4635      	mov	r5, r6
 80099a2:	e7e7      	b.n	8009974 <_realloc_r+0x1c>

080099a4 <_read_r>:
 80099a4:	b538      	push	{r3, r4, r5, lr}
 80099a6:	4c07      	ldr	r4, [pc, #28]	; (80099c4 <_read_r+0x20>)
 80099a8:	4605      	mov	r5, r0
 80099aa:	4608      	mov	r0, r1
 80099ac:	4611      	mov	r1, r2
 80099ae:	2200      	movs	r2, #0
 80099b0:	6022      	str	r2, [r4, #0]
 80099b2:	461a      	mov	r2, r3
 80099b4:	f7fe fc7c 	bl	80082b0 <_read>
 80099b8:	1c43      	adds	r3, r0, #1
 80099ba:	d102      	bne.n	80099c2 <_read_r+0x1e>
 80099bc:	6823      	ldr	r3, [r4, #0]
 80099be:	b103      	cbz	r3, 80099c2 <_read_r+0x1e>
 80099c0:	602b      	str	r3, [r5, #0]
 80099c2:	bd38      	pop	{r3, r4, r5, pc}
 80099c4:	2002982c 	.word	0x2002982c

080099c8 <_malloc_usable_size_r>:
 80099c8:	f851 0c04 	ldr.w	r0, [r1, #-4]
 80099cc:	2800      	cmp	r0, #0
 80099ce:	f1a0 0004 	sub.w	r0, r0, #4
 80099d2:	bfbc      	itt	lt
 80099d4:	580b      	ldrlt	r3, [r1, r0]
 80099d6:	18c0      	addlt	r0, r0, r3
 80099d8:	4770      	bx	lr
	...

080099dc <tanhf>:
 80099dc:	b510      	push	{r4, lr}
 80099de:	ee10 4a10 	vmov	r4, s0
 80099e2:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80099e6:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80099ea:	ed2d 8b02 	vpush	{d8}
 80099ee:	eef0 7a40 	vmov.f32	s15, s0
 80099f2:	db0c      	blt.n	8009a0e <tanhf+0x32>
 80099f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80099f8:	ee80 7a27 	vdiv.f32	s14, s0, s15
 80099fc:	2c00      	cmp	r4, #0
 80099fe:	bfac      	ite	ge
 8009a00:	ee37 0a00 	vaddge.f32	s0, s14, s0
 8009a04:	ee37 0a40 	vsublt.f32	s0, s14, s0
 8009a08:	ecbd 8b02 	vpop	{d8}
 8009a0c:	bd10      	pop	{r4, pc}
 8009a0e:	4a1b      	ldr	r2, [pc, #108]	; (8009a7c <tanhf+0xa0>)
 8009a10:	4293      	cmp	r3, r2
 8009a12:	dc30      	bgt.n	8009a76 <tanhf+0x9a>
 8009a14:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 8009a18:	da06      	bge.n	8009a28 <tanhf+0x4c>
 8009a1a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a1e:	ee37 0a80 	vadd.f32	s0, s15, s0
 8009a22:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a26:	e7ef      	b.n	8009a08 <tanhf+0x2c>
 8009a28:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 8009a2c:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 8009a30:	db12      	blt.n	8009a58 <tanhf+0x7c>
 8009a32:	f000 ffaf 	bl	800a994 <fabsf>
 8009a36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009a3a:	f000 fe7f 	bl	800a73c <expm1f>
 8009a3e:	ee30 0a08 	vadd.f32	s0, s0, s16
 8009a42:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8009a46:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a4a:	ee30 0a67 	vsub.f32	s0, s0, s15
 8009a4e:	2c00      	cmp	r4, #0
 8009a50:	bfb8      	it	lt
 8009a52:	eeb1 0a40 	vneglt.f32	s0, s0
 8009a56:	e7d7      	b.n	8009a08 <tanhf+0x2c>
 8009a58:	f000 ff9c 	bl	800a994 <fabsf>
 8009a5c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 8009a60:	ee20 0a27 	vmul.f32	s0, s0, s15
 8009a64:	f000 fe6a 	bl	800a73c <expm1f>
 8009a68:	ee70 7a08 	vadd.f32	s15, s0, s16
 8009a6c:	eeb1 7a40 	vneg.f32	s14, s0
 8009a70:	ee87 0a27 	vdiv.f32	s0, s14, s15
 8009a74:	e7eb      	b.n	8009a4e <tanhf+0x72>
 8009a76:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8009a7a:	e7e8      	b.n	8009a4e <tanhf+0x72>
 8009a7c:	41afffff 	.word	0x41afffff

08009a80 <expf>:
 8009a80:	b530      	push	{r4, r5, lr}
 8009a82:	ed2d 8b02 	vpush	{d8}
 8009a86:	4d35      	ldr	r5, [pc, #212]	; (8009b5c <expf+0xdc>)
 8009a88:	b08b      	sub	sp, #44	; 0x2c
 8009a8a:	eeb0 8a40 	vmov.f32	s16, s0
 8009a8e:	f000 f9ed 	bl	8009e6c <__ieee754_expf>
 8009a92:	f995 3000 	ldrsb.w	r3, [r5]
 8009a96:	3301      	adds	r3, #1
 8009a98:	ee10 4a10 	vmov	r4, s0
 8009a9c:	d030      	beq.n	8009b00 <expf+0x80>
 8009a9e:	eeb0 0a48 	vmov.f32	s0, s16
 8009aa2:	f000 ff7e 	bl	800a9a2 <finitef>
 8009aa6:	b358      	cbz	r0, 8009b00 <expf+0x80>
 8009aa8:	eddf 7a2d 	vldr	s15, [pc, #180]	; 8009b60 <expf+0xe0>
 8009aac:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009ab0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ab4:	dd35      	ble.n	8009b22 <expf+0xa2>
 8009ab6:	2303      	movs	r3, #3
 8009ab8:	9300      	str	r3, [sp, #0]
 8009aba:	4b2a      	ldr	r3, [pc, #168]	; (8009b64 <expf+0xe4>)
 8009abc:	9301      	str	r3, [sp, #4]
 8009abe:	ee18 0a10 	vmov	r0, s16
 8009ac2:	2300      	movs	r3, #0
 8009ac4:	9308      	str	r3, [sp, #32]
 8009ac6:	f7f8 ffd7 	bl	8002a78 <__aeabi_f2d>
 8009aca:	f995 3000 	ldrsb.w	r3, [r5]
 8009ace:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009ad2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009ad6:	b9cb      	cbnz	r3, 8009b0c <expf+0x8c>
 8009ad8:	4b23      	ldr	r3, [pc, #140]	; (8009b68 <expf+0xe8>)
 8009ada:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009ade:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ae2:	4668      	mov	r0, sp
 8009ae4:	f000 fd9f 	bl	800a626 <matherr>
 8009ae8:	b1b0      	cbz	r0, 8009b18 <expf+0x98>
 8009aea:	9b08      	ldr	r3, [sp, #32]
 8009aec:	b11b      	cbz	r3, 8009af6 <expf+0x76>
 8009aee:	f7fe fe07 	bl	8008700 <__errno>
 8009af2:	9b08      	ldr	r3, [sp, #32]
 8009af4:	6003      	str	r3, [r0, #0]
 8009af6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009afa:	f7f9 faab 	bl	8003054 <__aeabi_d2f>
 8009afe:	4604      	mov	r4, r0
 8009b00:	ee00 4a10 	vmov	s0, r4
 8009b04:	b00b      	add	sp, #44	; 0x2c
 8009b06:	ecbd 8b02 	vpop	{d8}
 8009b0a:	bd30      	pop	{r4, r5, pc}
 8009b0c:	4917      	ldr	r1, [pc, #92]	; (8009b6c <expf+0xec>)
 8009b0e:	2000      	movs	r0, #0
 8009b10:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009b14:	2b02      	cmp	r3, #2
 8009b16:	d1e4      	bne.n	8009ae2 <expf+0x62>
 8009b18:	f7fe fdf2 	bl	8008700 <__errno>
 8009b1c:	2322      	movs	r3, #34	; 0x22
 8009b1e:	6003      	str	r3, [r0, #0]
 8009b20:	e7e3      	b.n	8009aea <expf+0x6a>
 8009b22:	eddf 7a13 	vldr	s15, [pc, #76]	; 8009b70 <expf+0xf0>
 8009b26:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8009b2a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009b2e:	d5e7      	bpl.n	8009b00 <expf+0x80>
 8009b30:	2304      	movs	r3, #4
 8009b32:	9300      	str	r3, [sp, #0]
 8009b34:	4b0b      	ldr	r3, [pc, #44]	; (8009b64 <expf+0xe4>)
 8009b36:	9301      	str	r3, [sp, #4]
 8009b38:	ee18 0a10 	vmov	r0, s16
 8009b3c:	2300      	movs	r3, #0
 8009b3e:	9308      	str	r3, [sp, #32]
 8009b40:	f7f8 ff9a 	bl	8002a78 <__aeabi_f2d>
 8009b44:	2300      	movs	r3, #0
 8009b46:	2200      	movs	r2, #0
 8009b48:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009b4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009b50:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009b54:	f995 3000 	ldrsb.w	r3, [r5]
 8009b58:	e7dc      	b.n	8009b14 <expf+0x94>
 8009b5a:	bf00      	nop
 8009b5c:	20000674 	.word	0x20000674
 8009b60:	42b17180 	.word	0x42b17180
 8009b64:	08141823 	.word	0x08141823
 8009b68:	47efffff 	.word	0x47efffff
 8009b6c:	7ff00000 	.word	0x7ff00000
 8009b70:	c2cff1b5 	.word	0xc2cff1b5

08009b74 <powf>:
 8009b74:	b570      	push	{r4, r5, r6, lr}
 8009b76:	ed2d 8b04 	vpush	{d8-d9}
 8009b7a:	4cb5      	ldr	r4, [pc, #724]	; (8009e50 <powf+0x2dc>)
 8009b7c:	b08a      	sub	sp, #40	; 0x28
 8009b7e:	eef0 8a40 	vmov.f32	s17, s0
 8009b82:	eeb0 8a60 	vmov.f32	s16, s1
 8009b86:	f000 fa45 	bl	800a014 <__ieee754_powf>
 8009b8a:	f994 5000 	ldrsb.w	r5, [r4]
 8009b8e:	1c6b      	adds	r3, r5, #1
 8009b90:	eeb0 9a40 	vmov.f32	s18, s0
 8009b94:	4626      	mov	r6, r4
 8009b96:	d05d      	beq.n	8009c54 <powf+0xe0>
 8009b98:	eeb4 8a48 	vcmp.f32	s16, s16
 8009b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009ba0:	d658      	bvs.n	8009c54 <powf+0xe0>
 8009ba2:	eef4 8a68 	vcmp.f32	s17, s17
 8009ba6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009baa:	d721      	bvc.n	8009bf0 <powf+0x7c>
 8009bac:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bb4:	d14e      	bne.n	8009c54 <powf+0xe0>
 8009bb6:	2301      	movs	r3, #1
 8009bb8:	9300      	str	r3, [sp, #0]
 8009bba:	4ba6      	ldr	r3, [pc, #664]	; (8009e54 <powf+0x2e0>)
 8009bbc:	9301      	str	r3, [sp, #4]
 8009bbe:	ee18 0a90 	vmov	r0, s17
 8009bc2:	2300      	movs	r3, #0
 8009bc4:	9308      	str	r3, [sp, #32]
 8009bc6:	f7f8 ff57 	bl	8002a78 <__aeabi_f2d>
 8009bca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009bce:	ee18 0a10 	vmov	r0, s16
 8009bd2:	f7f8 ff51 	bl	8002a78 <__aeabi_f2d>
 8009bd6:	4ba0      	ldr	r3, [pc, #640]	; (8009e58 <powf+0x2e4>)
 8009bd8:	2200      	movs	r2, #0
 8009bda:	2d02      	cmp	r5, #2
 8009bdc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009be0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009be4:	d030      	beq.n	8009c48 <powf+0xd4>
 8009be6:	4668      	mov	r0, sp
 8009be8:	f000 fd1d 	bl	800a626 <matherr>
 8009bec:	bb30      	cbnz	r0, 8009c3c <powf+0xc8>
 8009bee:	e062      	b.n	8009cb6 <powf+0x142>
 8009bf0:	eef5 8a40 	vcmp.f32	s17, #0.0
 8009bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bf8:	d162      	bne.n	8009cc0 <powf+0x14c>
 8009bfa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8009bfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c02:	d12d      	bne.n	8009c60 <powf+0xec>
 8009c04:	2301      	movs	r3, #1
 8009c06:	9300      	str	r3, [sp, #0]
 8009c08:	4b92      	ldr	r3, [pc, #584]	; (8009e54 <powf+0x2e0>)
 8009c0a:	9301      	str	r3, [sp, #4]
 8009c0c:	ee18 0a90 	vmov	r0, s17
 8009c10:	2300      	movs	r3, #0
 8009c12:	9308      	str	r3, [sp, #32]
 8009c14:	f7f8 ff30 	bl	8002a78 <__aeabi_f2d>
 8009c18:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c1c:	ee18 0a10 	vmov	r0, s16
 8009c20:	f7f8 ff2a 	bl	8002a78 <__aeabi_f2d>
 8009c24:	2200      	movs	r2, #0
 8009c26:	2300      	movs	r3, #0
 8009c28:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c2c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c30:	2d00      	cmp	r5, #0
 8009c32:	d0d8      	beq.n	8009be6 <powf+0x72>
 8009c34:	4b88      	ldr	r3, [pc, #544]	; (8009e58 <powf+0x2e4>)
 8009c36:	2200      	movs	r2, #0
 8009c38:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009c3c:	9b08      	ldr	r3, [sp, #32]
 8009c3e:	b11b      	cbz	r3, 8009c48 <powf+0xd4>
 8009c40:	f7fe fd5e 	bl	8008700 <__errno>
 8009c44:	9b08      	ldr	r3, [sp, #32]
 8009c46:	6003      	str	r3, [r0, #0]
 8009c48:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009c4c:	f7f9 fa02 	bl	8003054 <__aeabi_d2f>
 8009c50:	ee09 0a10 	vmov	s18, r0
 8009c54:	eeb0 0a49 	vmov.f32	s0, s18
 8009c58:	b00a      	add	sp, #40	; 0x28
 8009c5a:	ecbd 8b04 	vpop	{d8-d9}
 8009c5e:	bd70      	pop	{r4, r5, r6, pc}
 8009c60:	eeb0 0a48 	vmov.f32	s0, s16
 8009c64:	f000 fe9d 	bl	800a9a2 <finitef>
 8009c68:	2800      	cmp	r0, #0
 8009c6a:	d0f3      	beq.n	8009c54 <powf+0xe0>
 8009c6c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8009c70:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009c74:	d5ee      	bpl.n	8009c54 <powf+0xe0>
 8009c76:	2301      	movs	r3, #1
 8009c78:	9300      	str	r3, [sp, #0]
 8009c7a:	4b76      	ldr	r3, [pc, #472]	; (8009e54 <powf+0x2e0>)
 8009c7c:	9301      	str	r3, [sp, #4]
 8009c7e:	ee18 0a90 	vmov	r0, s17
 8009c82:	2300      	movs	r3, #0
 8009c84:	9308      	str	r3, [sp, #32]
 8009c86:	f7f8 fef7 	bl	8002a78 <__aeabi_f2d>
 8009c8a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009c8e:	ee18 0a10 	vmov	r0, s16
 8009c92:	f7f8 fef1 	bl	8002a78 <__aeabi_f2d>
 8009c96:	f994 3000 	ldrsb.w	r3, [r4]
 8009c9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009c9e:	b923      	cbnz	r3, 8009caa <powf+0x136>
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009ca8:	e79d      	b.n	8009be6 <powf+0x72>
 8009caa:	496c      	ldr	r1, [pc, #432]	; (8009e5c <powf+0x2e8>)
 8009cac:	2000      	movs	r0, #0
 8009cae:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009cb2:	2b02      	cmp	r3, #2
 8009cb4:	d197      	bne.n	8009be6 <powf+0x72>
 8009cb6:	f7fe fd23 	bl	8008700 <__errno>
 8009cba:	2321      	movs	r3, #33	; 0x21
 8009cbc:	6003      	str	r3, [r0, #0]
 8009cbe:	e7bd      	b.n	8009c3c <powf+0xc8>
 8009cc0:	f000 fe6f 	bl	800a9a2 <finitef>
 8009cc4:	4605      	mov	r5, r0
 8009cc6:	2800      	cmp	r0, #0
 8009cc8:	f040 8091 	bne.w	8009dee <powf+0x27a>
 8009ccc:	eeb0 0a68 	vmov.f32	s0, s17
 8009cd0:	f000 fe67 	bl	800a9a2 <finitef>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	f000 808a 	beq.w	8009dee <powf+0x27a>
 8009cda:	eeb0 0a48 	vmov.f32	s0, s16
 8009cde:	f000 fe60 	bl	800a9a2 <finitef>
 8009ce2:	2800      	cmp	r0, #0
 8009ce4:	f000 8083 	beq.w	8009dee <powf+0x27a>
 8009ce8:	eeb4 9a49 	vcmp.f32	s18, s18
 8009cec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009cf0:	f994 4000 	ldrsb.w	r4, [r4]
 8009cf4:	4b57      	ldr	r3, [pc, #348]	; (8009e54 <powf+0x2e0>)
 8009cf6:	d71b      	bvc.n	8009d30 <powf+0x1bc>
 8009cf8:	2201      	movs	r2, #1
 8009cfa:	ee18 0a90 	vmov	r0, s17
 8009cfe:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009d02:	9508      	str	r5, [sp, #32]
 8009d04:	f7f8 feb8 	bl	8002a78 <__aeabi_f2d>
 8009d08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d0c:	ee18 0a10 	vmov	r0, s16
 8009d10:	f7f8 feb2 	bl	8002a78 <__aeabi_f2d>
 8009d14:	2200      	movs	r2, #0
 8009d16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	2c00      	cmp	r4, #0
 8009d1e:	d0c1      	beq.n	8009ca4 <powf+0x130>
 8009d20:	4610      	mov	r0, r2
 8009d22:	4619      	mov	r1, r3
 8009d24:	f7f9 f826 	bl	8002d74 <__aeabi_ddiv>
 8009d28:	2c02      	cmp	r4, #2
 8009d2a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009d2e:	e7c1      	b.n	8009cb4 <powf+0x140>
 8009d30:	2203      	movs	r2, #3
 8009d32:	ee18 0a90 	vmov	r0, s17
 8009d36:	e88d 000c 	stmia.w	sp, {r2, r3}
 8009d3a:	9508      	str	r5, [sp, #32]
 8009d3c:	f7f8 fe9c 	bl	8002a78 <__aeabi_f2d>
 8009d40:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009d44:	ee18 0a10 	vmov	r0, s16
 8009d48:	f7f8 fe96 	bl	8002a78 <__aeabi_f2d>
 8009d4c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009d50:	bb5c      	cbnz	r4, 8009daa <powf+0x236>
 8009d52:	4b43      	ldr	r3, [pc, #268]	; (8009e60 <powf+0x2ec>)
 8009d54:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009d58:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009d5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d60:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d64:	d56c      	bpl.n	8009e40 <powf+0x2cc>
 8009d66:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009d6a:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009d6e:	ee17 0a90 	vmov	r0, s15
 8009d72:	f7f8 fe81 	bl	8002a78 <__aeabi_f2d>
 8009d76:	4604      	mov	r4, r0
 8009d78:	460d      	mov	r5, r1
 8009d7a:	ec45 4b10 	vmov	d0, r4, r5
 8009d7e:	f000 fc55 	bl	800a62c <rint>
 8009d82:	4620      	mov	r0, r4
 8009d84:	ec53 2b10 	vmov	r2, r3, d0
 8009d88:	4629      	mov	r1, r5
 8009d8a:	f7f9 f931 	bl	8002ff0 <__aeabi_dcmpeq>
 8009d8e:	b920      	cbnz	r0, 8009d9a <powf+0x226>
 8009d90:	4b34      	ldr	r3, [pc, #208]	; (8009e64 <powf+0x2f0>)
 8009d92:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 8009d96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009d9a:	f996 3000 	ldrsb.w	r3, [r6]
 8009d9e:	2b02      	cmp	r3, #2
 8009da0:	d14e      	bne.n	8009e40 <powf+0x2cc>
 8009da2:	f7fe fcad 	bl	8008700 <__errno>
 8009da6:	2322      	movs	r3, #34	; 0x22
 8009da8:	e788      	b.n	8009cbc <powf+0x148>
 8009daa:	4b2f      	ldr	r3, [pc, #188]	; (8009e68 <powf+0x2f4>)
 8009dac:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8009db0:	2200      	movs	r2, #0
 8009db2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009db6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8009dba:	d5ee      	bpl.n	8009d9a <powf+0x226>
 8009dbc:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8009dc0:	ee68 7a27 	vmul.f32	s15, s16, s15
 8009dc4:	ee17 0a90 	vmov	r0, s15
 8009dc8:	f7f8 fe56 	bl	8002a78 <__aeabi_f2d>
 8009dcc:	4604      	mov	r4, r0
 8009dce:	460d      	mov	r5, r1
 8009dd0:	ec45 4b10 	vmov	d0, r4, r5
 8009dd4:	f000 fc2a 	bl	800a62c <rint>
 8009dd8:	4620      	mov	r0, r4
 8009dda:	ec53 2b10 	vmov	r2, r3, d0
 8009dde:	4629      	mov	r1, r5
 8009de0:	f7f9 f906 	bl	8002ff0 <__aeabi_dcmpeq>
 8009de4:	2800      	cmp	r0, #0
 8009de6:	d1d8      	bne.n	8009d9a <powf+0x226>
 8009de8:	2200      	movs	r2, #0
 8009dea:	4b1c      	ldr	r3, [pc, #112]	; (8009e5c <powf+0x2e8>)
 8009dec:	e7d3      	b.n	8009d96 <powf+0x222>
 8009dee:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8009df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009df6:	f47f af2d 	bne.w	8009c54 <powf+0xe0>
 8009dfa:	eeb0 0a68 	vmov.f32	s0, s17
 8009dfe:	f000 fdd0 	bl	800a9a2 <finitef>
 8009e02:	2800      	cmp	r0, #0
 8009e04:	f43f af26 	beq.w	8009c54 <powf+0xe0>
 8009e08:	eeb0 0a48 	vmov.f32	s0, s16
 8009e0c:	f000 fdc9 	bl	800a9a2 <finitef>
 8009e10:	2800      	cmp	r0, #0
 8009e12:	f43f af1f 	beq.w	8009c54 <powf+0xe0>
 8009e16:	2304      	movs	r3, #4
 8009e18:	9300      	str	r3, [sp, #0]
 8009e1a:	4b0e      	ldr	r3, [pc, #56]	; (8009e54 <powf+0x2e0>)
 8009e1c:	9301      	str	r3, [sp, #4]
 8009e1e:	ee18 0a90 	vmov	r0, s17
 8009e22:	2300      	movs	r3, #0
 8009e24:	9308      	str	r3, [sp, #32]
 8009e26:	f7f8 fe27 	bl	8002a78 <__aeabi_f2d>
 8009e2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009e2e:	ee18 0a10 	vmov	r0, s16
 8009e32:	f7f8 fe21 	bl	8002a78 <__aeabi_f2d>
 8009e36:	2200      	movs	r2, #0
 8009e38:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8009e3c:	2300      	movs	r3, #0
 8009e3e:	e7aa      	b.n	8009d96 <powf+0x222>
 8009e40:	4668      	mov	r0, sp
 8009e42:	f000 fbf0 	bl	800a626 <matherr>
 8009e46:	2800      	cmp	r0, #0
 8009e48:	f47f aef8 	bne.w	8009c3c <powf+0xc8>
 8009e4c:	e7a9      	b.n	8009da2 <powf+0x22e>
 8009e4e:	bf00      	nop
 8009e50:	20000674 	.word	0x20000674
 8009e54:	08141828 	.word	0x08141828
 8009e58:	3ff00000 	.word	0x3ff00000
 8009e5c:	fff00000 	.word	0xfff00000
 8009e60:	47efffff 	.word	0x47efffff
 8009e64:	c7efffff 	.word	0xc7efffff
 8009e68:	7ff00000 	.word	0x7ff00000

08009e6c <__ieee754_expf>:
 8009e6c:	ee10 2a10 	vmov	r2, s0
 8009e70:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 8009e74:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 8009e78:	d902      	bls.n	8009e80 <__ieee754_expf+0x14>
 8009e7a:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009e7e:	4770      	bx	lr
 8009e80:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 8009e84:	d106      	bne.n	8009e94 <__ieee754_expf+0x28>
 8009e86:	eddf 7a51 	vldr	s15, [pc, #324]	; 8009fcc <__ieee754_expf+0x160>
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	bf18      	it	ne
 8009e8e:	eeb0 0a67 	vmovne.f32	s0, s15
 8009e92:	4770      	bx	lr
 8009e94:	484e      	ldr	r0, [pc, #312]	; (8009fd0 <__ieee754_expf+0x164>)
 8009e96:	4282      	cmp	r2, r0
 8009e98:	dd04      	ble.n	8009ea4 <__ieee754_expf+0x38>
 8009e9a:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 8009fd4 <__ieee754_expf+0x168>
 8009e9e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8009ea2:	4770      	bx	lr
 8009ea4:	2a00      	cmp	r2, #0
 8009ea6:	da03      	bge.n	8009eb0 <__ieee754_expf+0x44>
 8009ea8:	4a4b      	ldr	r2, [pc, #300]	; (8009fd8 <__ieee754_expf+0x16c>)
 8009eaa:	4291      	cmp	r1, r2
 8009eac:	f200 808a 	bhi.w	8009fc4 <__ieee754_expf+0x158>
 8009eb0:	4a4a      	ldr	r2, [pc, #296]	; (8009fdc <__ieee754_expf+0x170>)
 8009eb2:	4291      	cmp	r1, r2
 8009eb4:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8009eb8:	d954      	bls.n	8009f64 <__ieee754_expf+0xf8>
 8009eba:	4a49      	ldr	r2, [pc, #292]	; (8009fe0 <__ieee754_expf+0x174>)
 8009ebc:	4291      	cmp	r1, r2
 8009ebe:	ea4f 0283 	mov.w	r2, r3, lsl #2
 8009ec2:	d836      	bhi.n	8009f32 <__ieee754_expf+0xc6>
 8009ec4:	4947      	ldr	r1, [pc, #284]	; (8009fe4 <__ieee754_expf+0x178>)
 8009ec6:	4411      	add	r1, r2
 8009ec8:	ed91 7a00 	vldr	s14, [r1]
 8009ecc:	4946      	ldr	r1, [pc, #280]	; (8009fe8 <__ieee754_expf+0x17c>)
 8009ece:	440a      	add	r2, r1
 8009ed0:	edd2 7a00 	vldr	s15, [r2]
 8009ed4:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009ed8:	f1c3 0201 	rsb	r2, r3, #1
 8009edc:	1ad2      	subs	r2, r2, r3
 8009ede:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009ee2:	ee60 6a00 	vmul.f32	s13, s0, s0
 8009ee6:	eddf 5a41 	vldr	s11, [pc, #260]	; 8009fec <__ieee754_expf+0x180>
 8009eea:	ed9f 5a41 	vldr	s10, [pc, #260]	; 8009ff0 <__ieee754_expf+0x184>
 8009eee:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009ef2:	eddf 5a40 	vldr	s11, [pc, #256]	; 8009ff4 <__ieee754_expf+0x188>
 8009ef6:	eee6 5a85 	vfma.f32	s11, s13, s10
 8009efa:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 8009ff8 <__ieee754_expf+0x18c>
 8009efe:	eea6 5aa5 	vfma.f32	s10, s13, s11
 8009f02:	eddf 5a3e 	vldr	s11, [pc, #248]	; 8009ffc <__ieee754_expf+0x190>
 8009f06:	eee6 5a85 	vfma.f32	s11, s13, s10
 8009f0a:	eeb0 5a40 	vmov.f32	s10, s0
 8009f0e:	eea6 5ae5 	vfms.f32	s10, s13, s11
 8009f12:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 8009f16:	eef0 6a45 	vmov.f32	s13, s10
 8009f1a:	ee20 5a05 	vmul.f32	s10, s0, s10
 8009f1e:	bb92      	cbnz	r2, 8009f86 <__ieee754_expf+0x11a>
 8009f20:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8009f24:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009f28:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009f2c:	ee36 0a40 	vsub.f32	s0, s12, s0
 8009f30:	4770      	bx	lr
 8009f32:	4b33      	ldr	r3, [pc, #204]	; (800a000 <__ieee754_expf+0x194>)
 8009f34:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800a004 <__ieee754_expf+0x198>
 8009f38:	4413      	add	r3, r2
 8009f3a:	edd3 7a00 	vldr	s15, [r3]
 8009f3e:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009f42:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800a008 <__ieee754_expf+0x19c>
 8009f46:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009f4a:	ee17 2a90 	vmov	r2, s15
 8009f4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009f52:	eea7 0ac7 	vfms.f32	s0, s15, s14
 8009f56:	eeb0 7a40 	vmov.f32	s14, s0
 8009f5a:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800a00c <__ieee754_expf+0x1a0>
 8009f5e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8009f62:	e7bc      	b.n	8009ede <__ieee754_expf+0x72>
 8009f64:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 8009f68:	d20b      	bcs.n	8009f82 <__ieee754_expf+0x116>
 8009f6a:	eddf 6a1a 	vldr	s13, [pc, #104]	; 8009fd4 <__ieee754_expf+0x168>
 8009f6e:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009f72:	eef4 6ac6 	vcmpe.f32	s13, s12
 8009f76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009f7a:	dd02      	ble.n	8009f82 <__ieee754_expf+0x116>
 8009f7c:	ee30 0a06 	vadd.f32	s0, s0, s12
 8009f80:	4770      	bx	lr
 8009f82:	2200      	movs	r2, #0
 8009f84:	e7ad      	b.n	8009ee2 <__ieee754_expf+0x76>
 8009f86:	ee75 6ae6 	vsub.f32	s13, s11, s13
 8009f8a:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009f8e:	ee85 0a26 	vdiv.f32	s0, s10, s13
 8009f92:	bfb8      	it	lt
 8009f94:	3264      	addlt	r2, #100	; 0x64
 8009f96:	ee77 7ac0 	vsub.f32	s15, s15, s0
 8009f9a:	ee37 0ac7 	vsub.f32	s0, s15, s14
 8009f9e:	ee76 7a40 	vsub.f32	s15, s12, s0
 8009fa2:	ee17 3a90 	vmov	r3, s15
 8009fa6:	bfab      	itete	ge
 8009fa8:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009fac:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009fb0:	ee00 3a10 	vmovge	s0, r3
 8009fb4:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800a010 <__ieee754_expf+0x1a4>
 8009fb8:	bfbc      	itt	lt
 8009fba:	ee00 3a10 	vmovlt	s0, r3
 8009fbe:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009fc2:	4770      	bx	lr
 8009fc4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009fcc <__ieee754_expf+0x160>
 8009fc8:	4770      	bx	lr
 8009fca:	bf00      	nop
 8009fcc:	00000000 	.word	0x00000000
 8009fd0:	42b17217 	.word	0x42b17217
 8009fd4:	7149f2ca 	.word	0x7149f2ca
 8009fd8:	42cff1b5 	.word	0x42cff1b5
 8009fdc:	3eb17218 	.word	0x3eb17218
 8009fe0:	3f851591 	.word	0x3f851591
 8009fe4:	08141838 	.word	0x08141838
 8009fe8:	08141840 	.word	0x08141840
 8009fec:	3331bb4c 	.word	0x3331bb4c
 8009ff0:	b5ddea0e 	.word	0xb5ddea0e
 8009ff4:	388ab355 	.word	0x388ab355
 8009ff8:	bb360b61 	.word	0xbb360b61
 8009ffc:	3e2aaaab 	.word	0x3e2aaaab
 800a000:	08141830 	.word	0x08141830
 800a004:	3fb8aa3b 	.word	0x3fb8aa3b
 800a008:	3f317180 	.word	0x3f317180
 800a00c:	3717f7d1 	.word	0x3717f7d1
 800a010:	0d800000 	.word	0x0d800000

0800a014 <__ieee754_powf>:
 800a014:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a018:	ee10 5a90 	vmov	r5, s1
 800a01c:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800a020:	ed2d 8b02 	vpush	{d8}
 800a024:	eeb0 8a40 	vmov.f32	s16, s0
 800a028:	eef0 8a60 	vmov.f32	s17, s1
 800a02c:	f000 8295 	beq.w	800a55a <__ieee754_powf+0x546>
 800a030:	ee10 8a10 	vmov	r8, s0
 800a034:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800a038:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800a03c:	dc06      	bgt.n	800a04c <__ieee754_powf+0x38>
 800a03e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a042:	dd0a      	ble.n	800a05a <__ieee754_powf+0x46>
 800a044:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a048:	f000 8287 	beq.w	800a55a <__ieee754_powf+0x546>
 800a04c:	ecbd 8b02 	vpop	{d8}
 800a050:	48d9      	ldr	r0, [pc, #868]	; (800a3b8 <__ieee754_powf+0x3a4>)
 800a052:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a056:	f000 bcaf 	b.w	800a9b8 <nanf>
 800a05a:	f1b8 0f00 	cmp.w	r8, #0
 800a05e:	da1d      	bge.n	800a09c <__ieee754_powf+0x88>
 800a060:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800a064:	da2c      	bge.n	800a0c0 <__ieee754_powf+0xac>
 800a066:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a06a:	db30      	blt.n	800a0ce <__ieee754_powf+0xba>
 800a06c:	15fb      	asrs	r3, r7, #23
 800a06e:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800a072:	fa47 f603 	asr.w	r6, r7, r3
 800a076:	fa06 f303 	lsl.w	r3, r6, r3
 800a07a:	429f      	cmp	r7, r3
 800a07c:	d127      	bne.n	800a0ce <__ieee754_powf+0xba>
 800a07e:	f006 0601 	and.w	r6, r6, #1
 800a082:	f1c6 0602 	rsb	r6, r6, #2
 800a086:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800a08a:	d122      	bne.n	800a0d2 <__ieee754_powf+0xbe>
 800a08c:	2d00      	cmp	r5, #0
 800a08e:	f280 826a 	bge.w	800a566 <__ieee754_powf+0x552>
 800a092:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a096:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800a09a:	e00d      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a09c:	2600      	movs	r6, #0
 800a09e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800a0a2:	d1f0      	bne.n	800a086 <__ieee754_powf+0x72>
 800a0a4:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800a0a8:	f000 8257 	beq.w	800a55a <__ieee754_powf+0x546>
 800a0ac:	dd0a      	ble.n	800a0c4 <__ieee754_powf+0xb0>
 800a0ae:	2d00      	cmp	r5, #0
 800a0b0:	f280 8256 	bge.w	800a560 <__ieee754_powf+0x54c>
 800a0b4:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800a3bc <__ieee754_powf+0x3a8>
 800a0b8:	ecbd 8b02 	vpop	{d8}
 800a0bc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a0c0:	2602      	movs	r6, #2
 800a0c2:	e7ec      	b.n	800a09e <__ieee754_powf+0x8a>
 800a0c4:	2d00      	cmp	r5, #0
 800a0c6:	daf5      	bge.n	800a0b4 <__ieee754_powf+0xa0>
 800a0c8:	eeb1 0a68 	vneg.f32	s0, s17
 800a0cc:	e7f4      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a0ce:	2600      	movs	r6, #0
 800a0d0:	e7d9      	b.n	800a086 <__ieee754_powf+0x72>
 800a0d2:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800a0d6:	d102      	bne.n	800a0de <__ieee754_powf+0xca>
 800a0d8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800a0dc:	e7ec      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a0de:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800a0e2:	eeb0 0a48 	vmov.f32	s0, s16
 800a0e6:	d108      	bne.n	800a0fa <__ieee754_powf+0xe6>
 800a0e8:	f1b8 0f00 	cmp.w	r8, #0
 800a0ec:	db05      	blt.n	800a0fa <__ieee754_powf+0xe6>
 800a0ee:	ecbd 8b02 	vpop	{d8}
 800a0f2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a0f6:	f000 ba4f 	b.w	800a598 <__ieee754_sqrtf>
 800a0fa:	f000 fc4b 	bl	800a994 <fabsf>
 800a0fe:	b124      	cbz	r4, 800a10a <__ieee754_powf+0xf6>
 800a100:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800a104:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800a108:	d117      	bne.n	800a13a <__ieee754_powf+0x126>
 800a10a:	2d00      	cmp	r5, #0
 800a10c:	bfbc      	itt	lt
 800a10e:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800a112:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800a116:	f1b8 0f00 	cmp.w	r8, #0
 800a11a:	dacd      	bge.n	800a0b8 <__ieee754_powf+0xa4>
 800a11c:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800a120:	ea54 0306 	orrs.w	r3, r4, r6
 800a124:	d104      	bne.n	800a130 <__ieee754_powf+0x11c>
 800a126:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a12a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a12e:	e7c3      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a130:	2e01      	cmp	r6, #1
 800a132:	d1c1      	bne.n	800a0b8 <__ieee754_powf+0xa4>
 800a134:	eeb1 0a40 	vneg.f32	s0, s0
 800a138:	e7be      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a13a:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800a13e:	3801      	subs	r0, #1
 800a140:	ea56 0300 	orrs.w	r3, r6, r0
 800a144:	d104      	bne.n	800a150 <__ieee754_powf+0x13c>
 800a146:	ee38 8a48 	vsub.f32	s16, s16, s16
 800a14a:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800a14e:	e7b3      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a150:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800a154:	dd6d      	ble.n	800a232 <__ieee754_powf+0x21e>
 800a156:	4b9a      	ldr	r3, [pc, #616]	; (800a3c0 <__ieee754_powf+0x3ac>)
 800a158:	429c      	cmp	r4, r3
 800a15a:	dc06      	bgt.n	800a16a <__ieee754_powf+0x156>
 800a15c:	2d00      	cmp	r5, #0
 800a15e:	daa9      	bge.n	800a0b4 <__ieee754_powf+0xa0>
 800a160:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800a3c4 <__ieee754_powf+0x3b0>
 800a164:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a168:	e7a6      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a16a:	4b97      	ldr	r3, [pc, #604]	; (800a3c8 <__ieee754_powf+0x3b4>)
 800a16c:	429c      	cmp	r4, r3
 800a16e:	dd02      	ble.n	800a176 <__ieee754_powf+0x162>
 800a170:	2d00      	cmp	r5, #0
 800a172:	dcf5      	bgt.n	800a160 <__ieee754_powf+0x14c>
 800a174:	e79e      	b.n	800a0b4 <__ieee754_powf+0xa0>
 800a176:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a17a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a17e:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800a3cc <__ieee754_powf+0x3b8>
 800a182:	ed9f 6a93 	vldr	s12, [pc, #588]	; 800a3d0 <__ieee754_powf+0x3bc>
 800a186:	eef1 6a40 	vneg.f32	s13, s0
 800a18a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800a18e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800a192:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a196:	eee6 7a87 	vfma.f32	s15, s13, s14
 800a19a:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a19e:	ee27 7a87 	vmul.f32	s14, s15, s14
 800a1a2:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800a3d4 <__ieee754_powf+0x3c0>
 800a1a6:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 800a1aa:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 800a3d8 <__ieee754_powf+0x3c4>
 800a1ae:	eee0 7a07 	vfma.f32	s15, s0, s14
 800a1b2:	eeb0 7a67 	vmov.f32	s14, s15
 800a1b6:	eea0 7a06 	vfma.f32	s14, s0, s12
 800a1ba:	ee17 3a10 	vmov	r3, s14
 800a1be:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a1c2:	f023 030f 	bic.w	r3, r3, #15
 800a1c6:	ee07 3a10 	vmov	s14, r3
 800a1ca:	eea6 7a86 	vfma.f32	s14, s13, s12
 800a1ce:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a1d2:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800a1d6:	f025 050f 	bic.w	r5, r5, #15
 800a1da:	ee07 5a10 	vmov	s14, r5
 800a1de:	ee67 7aa8 	vmul.f32	s15, s15, s17
 800a1e2:	ee78 8ac7 	vsub.f32	s17, s17, s14
 800a1e6:	ee07 3a10 	vmov	s14, r3
 800a1ea:	ee06 5a90 	vmov	s13, r5
 800a1ee:	eee7 7a28 	vfma.f32	s15, s14, s17
 800a1f2:	3e01      	subs	r6, #1
 800a1f4:	ea56 0200 	orrs.w	r2, r6, r0
 800a1f8:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a1fc:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a200:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a204:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800a208:	ee16 4a90 	vmov	r4, s13
 800a20c:	bf08      	it	eq
 800a20e:	eeb0 8a40 	vmoveq.f32	s16, s0
 800a212:	2c00      	cmp	r4, #0
 800a214:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800a218:	f340 8186 	ble.w	800a528 <__ieee754_powf+0x514>
 800a21c:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800a220:	f340 80fc 	ble.w	800a41c <__ieee754_powf+0x408>
 800a224:	eddf 7a67 	vldr	s15, [pc, #412]	; 800a3c4 <__ieee754_powf+0x3b0>
 800a228:	ee28 0a27 	vmul.f32	s0, s16, s15
 800a22c:	ee20 0a27 	vmul.f32	s0, s0, s15
 800a230:	e742      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a232:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800a236:	bfbf      	itttt	lt
 800a238:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800a3dc <__ieee754_powf+0x3c8>
 800a23c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800a240:	f06f 0217 	mvnlt.w	r2, #23
 800a244:	ee17 4a90 	vmovlt	r4, s15
 800a248:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800a24c:	bfa8      	it	ge
 800a24e:	2200      	movge	r2, #0
 800a250:	3b7f      	subs	r3, #127	; 0x7f
 800a252:	4413      	add	r3, r2
 800a254:	4a62      	ldr	r2, [pc, #392]	; (800a3e0 <__ieee754_powf+0x3cc>)
 800a256:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800a25a:	4294      	cmp	r4, r2
 800a25c:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800a260:	dd06      	ble.n	800a270 <__ieee754_powf+0x25c>
 800a262:	4a60      	ldr	r2, [pc, #384]	; (800a3e4 <__ieee754_powf+0x3d0>)
 800a264:	4294      	cmp	r4, r2
 800a266:	f340 80a5 	ble.w	800a3b4 <__ieee754_powf+0x3a0>
 800a26a:	3301      	adds	r3, #1
 800a26c:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800a270:	2400      	movs	r4, #0
 800a272:	4a5d      	ldr	r2, [pc, #372]	; (800a3e8 <__ieee754_powf+0x3d4>)
 800a274:	00a7      	lsls	r7, r4, #2
 800a276:	443a      	add	r2, r7
 800a278:	ee07 1a90 	vmov	s15, r1
 800a27c:	ed92 7a00 	vldr	s14, [r2]
 800a280:	4a5a      	ldr	r2, [pc, #360]	; (800a3ec <__ieee754_powf+0x3d8>)
 800a282:	ee77 6a87 	vadd.f32	s13, s15, s14
 800a286:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 800a28a:	ee85 5aa6 	vdiv.f32	s10, s11, s13
 800a28e:	1049      	asrs	r1, r1, #1
 800a290:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800a294:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800a298:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800a29c:	ee37 6ac7 	vsub.f32	s12, s15, s14
 800a2a0:	ee06 1a90 	vmov	s13, r1
 800a2a4:	ee66 4a05 	vmul.f32	s9, s12, s10
 800a2a8:	ee14 ea90 	vmov	lr, s9
 800a2ac:	ea02 0e0e 	and.w	lr, r2, lr
 800a2b0:	ee05 ea90 	vmov	s11, lr
 800a2b4:	eeb1 4a65 	vneg.f32	s8, s11
 800a2b8:	eea4 6a26 	vfma.f32	s12, s8, s13
 800a2bc:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a2c0:	ee35 7aa4 	vadd.f32	s14, s11, s9
 800a2c4:	ee77 6ae6 	vsub.f32	s13, s15, s13
 800a2c8:	eddf 7a49 	vldr	s15, [pc, #292]	; 800a3f0 <__ieee754_powf+0x3dc>
 800a2cc:	eea4 6a26 	vfma.f32	s12, s8, s13
 800a2d0:	ee66 6a05 	vmul.f32	s13, s12, s10
 800a2d4:	ee24 6aa4 	vmul.f32	s12, s9, s9
 800a2d8:	ed9f 5a46 	vldr	s10, [pc, #280]	; 800a3f4 <__ieee754_powf+0x3e0>
 800a2dc:	eee6 7a05 	vfma.f32	s15, s12, s10
 800a2e0:	ed9f 5a45 	vldr	s10, [pc, #276]	; 800a3f8 <__ieee754_powf+0x3e4>
 800a2e4:	eea6 5a27 	vfma.f32	s10, s12, s15
 800a2e8:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a3cc <__ieee754_powf+0x3b8>
 800a2ec:	eee6 7a05 	vfma.f32	s15, s12, s10
 800a2f0:	ed9f 5a42 	vldr	s10, [pc, #264]	; 800a3fc <__ieee754_powf+0x3e8>
 800a2f4:	eea6 5a27 	vfma.f32	s10, s12, s15
 800a2f8:	eddf 7a41 	vldr	s15, [pc, #260]	; 800a400 <__ieee754_powf+0x3ec>
 800a2fc:	eee6 7a05 	vfma.f32	s15, s12, s10
 800a300:	ee66 3a06 	vmul.f32	s7, s12, s12
 800a304:	eeb0 5a08 	vmov.f32	s10, #8	; 0x40400000  3.0
 800a308:	ee27 7a26 	vmul.f32	s14, s14, s13
 800a30c:	eeb0 6a45 	vmov.f32	s12, s10
 800a310:	eea3 7aa7 	vfma.f32	s14, s7, s15
 800a314:	eea5 6aa5 	vfma.f32	s12, s11, s11
 800a318:	ee36 6a07 	vadd.f32	s12, s12, s14
 800a31c:	ee16 1a10 	vmov	r1, s12
 800a320:	4011      	ands	r1, r2
 800a322:	ee06 1a10 	vmov	s12, r1
 800a326:	ee76 7a45 	vsub.f32	s15, s12, s10
 800a32a:	ed9f 5a36 	vldr	s10, [pc, #216]	; 800a404 <__ieee754_powf+0x3f0>
 800a32e:	eee4 7a25 	vfma.f32	s15, s8, s11
 800a332:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a336:	ee67 7aa4 	vmul.f32	s15, s15, s9
 800a33a:	eee6 7a26 	vfma.f32	s15, s12, s13
 800a33e:	eeb0 7a67 	vmov.f32	s14, s15
 800a342:	eea5 7a86 	vfma.f32	s14, s11, s12
 800a346:	ee17 1a10 	vmov	r1, s14
 800a34a:	4011      	ands	r1, r2
 800a34c:	ee07 1a10 	vmov	s14, r1
 800a350:	eea4 7a06 	vfma.f32	s14, s8, s12
 800a354:	ee05 1a90 	vmov	s11, r1
 800a358:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a35c:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a408 <__ieee754_powf+0x3f4>
 800a360:	492a      	ldr	r1, [pc, #168]	; (800a40c <__ieee754_powf+0x3f8>)
 800a362:	ee67 7a87 	vmul.f32	s15, s15, s14
 800a366:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 800a410 <__ieee754_powf+0x3fc>
 800a36a:	eee5 7a87 	vfma.f32	s15, s11, s14
 800a36e:	4439      	add	r1, r7
 800a370:	ed91 7a00 	vldr	s14, [r1]
 800a374:	ee37 7a87 	vadd.f32	s14, s15, s14
 800a378:	ee07 3a90 	vmov	s15, r3
 800a37c:	eeb0 6a47 	vmov.f32	s12, s14
 800a380:	4b24      	ldr	r3, [pc, #144]	; (800a414 <__ieee754_powf+0x400>)
 800a382:	eea5 6a85 	vfma.f32	s12, s11, s10
 800a386:	443b      	add	r3, r7
 800a388:	edd3 4a00 	vldr	s9, [r3]
 800a38c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800a390:	ee36 6a24 	vadd.f32	s12, s12, s9
 800a394:	ee76 7a26 	vadd.f32	s15, s12, s13
 800a398:	ee17 3a90 	vmov	r3, s15
 800a39c:	4013      	ands	r3, r2
 800a39e:	ee07 3a90 	vmov	s15, r3
 800a3a2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800a3a6:	ee77 7ae4 	vsub.f32	s15, s15, s9
 800a3aa:	eee5 7ac5 	vfms.f32	s15, s11, s10
 800a3ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a3b2:	e70e      	b.n	800a1d2 <__ieee754_powf+0x1be>
 800a3b4:	2401      	movs	r4, #1
 800a3b6:	e75c      	b.n	800a272 <__ieee754_powf+0x25e>
 800a3b8:	081416bc 	.word	0x081416bc
 800a3bc:	00000000 	.word	0x00000000
 800a3c0:	3f7ffff7 	.word	0x3f7ffff7
 800a3c4:	7149f2ca 	.word	0x7149f2ca
 800a3c8:	3f800007 	.word	0x3f800007
 800a3cc:	3eaaaaab 	.word	0x3eaaaaab
 800a3d0:	3fb8aa00 	.word	0x3fb8aa00
 800a3d4:	3fb8aa3b 	.word	0x3fb8aa3b
 800a3d8:	36eca570 	.word	0x36eca570
 800a3dc:	4b800000 	.word	0x4b800000
 800a3e0:	001cc471 	.word	0x001cc471
 800a3e4:	005db3d6 	.word	0x005db3d6
 800a3e8:	08141848 	.word	0x08141848
 800a3ec:	fffff000 	.word	0xfffff000
 800a3f0:	3e6c3255 	.word	0x3e6c3255
 800a3f4:	3e53f142 	.word	0x3e53f142
 800a3f8:	3e8ba305 	.word	0x3e8ba305
 800a3fc:	3edb6db7 	.word	0x3edb6db7
 800a400:	3f19999a 	.word	0x3f19999a
 800a404:	3f763800 	.word	0x3f763800
 800a408:	3f76384f 	.word	0x3f76384f
 800a40c:	08141858 	.word	0x08141858
 800a410:	369dc3a0 	.word	0x369dc3a0
 800a414:	08141850 	.word	0x08141850
 800a418:	3338aa3c 	.word	0x3338aa3c
 800a41c:	f040 8094 	bne.w	800a548 <__ieee754_powf+0x534>
 800a420:	ed1f 6a03 	vldr	s12, [pc, #-12]	; 800a418 <__ieee754_powf+0x404>
 800a424:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a428:	ee37 6a86 	vadd.f32	s12, s15, s12
 800a42c:	eeb4 6ae6 	vcmpe.f32	s12, s13
 800a430:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a434:	f73f aef6 	bgt.w	800a224 <__ieee754_powf+0x210>
 800a438:	15db      	asrs	r3, r3, #23
 800a43a:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800a43e:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800a442:	4103      	asrs	r3, r0
 800a444:	4423      	add	r3, r4
 800a446:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800a44a:	4948      	ldr	r1, [pc, #288]	; (800a56c <__ieee754_powf+0x558>)
 800a44c:	3a7f      	subs	r2, #127	; 0x7f
 800a44e:	4111      	asrs	r1, r2
 800a450:	ea23 0101 	bic.w	r1, r3, r1
 800a454:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800a458:	ee06 1a90 	vmov	s13, r1
 800a45c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800a460:	f1c2 0217 	rsb	r2, r2, #23
 800a464:	4110      	asrs	r0, r2
 800a466:	2c00      	cmp	r4, #0
 800a468:	ee37 7a66 	vsub.f32	s14, s14, s13
 800a46c:	bfb8      	it	lt
 800a46e:	4240      	neglt	r0, r0
 800a470:	ee77 6a27 	vadd.f32	s13, s14, s15
 800a474:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800a570 <__ieee754_powf+0x55c>
 800a478:	ee16 3a90 	vmov	r3, s13
 800a47c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800a480:	f023 030f 	bic.w	r3, r3, #15
 800a484:	ee06 3a90 	vmov	s13, r3
 800a488:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800a48c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a490:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800a574 <__ieee754_powf+0x560>
 800a494:	ee26 7a87 	vmul.f32	s14, s13, s14
 800a498:	eea7 7a86 	vfma.f32	s14, s15, s12
 800a49c:	eef0 7a47 	vmov.f32	s15, s14
 800a4a0:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800a578 <__ieee754_powf+0x564>
 800a4a4:	eeb0 0a67 	vmov.f32	s0, s15
 800a4a8:	eea6 0a87 	vfma.f32	s0, s13, s14
 800a4ac:	eeb0 6a40 	vmov.f32	s12, s0
 800a4b0:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800a4b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800a4b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800a4bc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800a57c <__ieee754_powf+0x568>
 800a4c0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800a580 <__ieee754_powf+0x56c>
 800a4c4:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a4c8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800a584 <__ieee754_powf+0x570>
 800a4cc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a4d0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800a588 <__ieee754_powf+0x574>
 800a4d4:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a4d8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800a58c <__ieee754_powf+0x578>
 800a4dc:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a4e0:	eeb0 6a40 	vmov.f32	s12, s0
 800a4e4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800a4e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800a4ec:	eeb0 7a46 	vmov.f32	s14, s12
 800a4f0:	ee77 6a66 	vsub.f32	s13, s14, s13
 800a4f4:	ee20 6a06 	vmul.f32	s12, s0, s12
 800a4f8:	eee0 7a27 	vfma.f32	s15, s0, s15
 800a4fc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800a500:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a504:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a508:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800a50c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a510:	ee10 3a10 	vmov	r3, s0
 800a514:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800a518:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a51c:	da1a      	bge.n	800a554 <__ieee754_powf+0x540>
 800a51e:	f000 fa51 	bl	800a9c4 <scalbnf>
 800a522:	ee20 0a08 	vmul.f32	s0, s0, s16
 800a526:	e5c7      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a528:	4a19      	ldr	r2, [pc, #100]	; (800a590 <__ieee754_powf+0x57c>)
 800a52a:	4293      	cmp	r3, r2
 800a52c:	dd02      	ble.n	800a534 <__ieee754_powf+0x520>
 800a52e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800a594 <__ieee754_powf+0x580>
 800a532:	e679      	b.n	800a228 <__ieee754_powf+0x214>
 800a534:	d108      	bne.n	800a548 <__ieee754_powf+0x534>
 800a536:	ee76 6ac7 	vsub.f32	s13, s13, s14
 800a53a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800a53e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a542:	f63f af79 	bhi.w	800a438 <__ieee754_powf+0x424>
 800a546:	e7f2      	b.n	800a52e <__ieee754_powf+0x51a>
 800a548:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800a54c:	f73f af74 	bgt.w	800a438 <__ieee754_powf+0x424>
 800a550:	2000      	movs	r0, #0
 800a552:	e78d      	b.n	800a470 <__ieee754_powf+0x45c>
 800a554:	ee00 3a10 	vmov	s0, r3
 800a558:	e7e3      	b.n	800a522 <__ieee754_powf+0x50e>
 800a55a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800a55e:	e5ab      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a560:	eeb0 0a68 	vmov.f32	s0, s17
 800a564:	e5a8      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a566:	eeb0 0a48 	vmov.f32	s0, s16
 800a56a:	e5a5      	b.n	800a0b8 <__ieee754_powf+0xa4>
 800a56c:	007fffff 	.word	0x007fffff
 800a570:	3f317218 	.word	0x3f317218
 800a574:	35bfbe8c 	.word	0x35bfbe8c
 800a578:	3f317200 	.word	0x3f317200
 800a57c:	3331bb4c 	.word	0x3331bb4c
 800a580:	b5ddea0e 	.word	0xb5ddea0e
 800a584:	388ab355 	.word	0x388ab355
 800a588:	bb360b61 	.word	0xbb360b61
 800a58c:	3e2aaaab 	.word	0x3e2aaaab
 800a590:	43160000 	.word	0x43160000
 800a594:	0da24260 	.word	0x0da24260

0800a598 <__ieee754_sqrtf>:
 800a598:	ee10 2a10 	vmov	r2, s0
 800a59c:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800a5a0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800a5a4:	b570      	push	{r4, r5, r6, lr}
 800a5a6:	d302      	bcc.n	800a5ae <__ieee754_sqrtf+0x16>
 800a5a8:	eea0 0a00 	vfma.f32	s0, s0, s0
 800a5ac:	bd70      	pop	{r4, r5, r6, pc}
 800a5ae:	b3b1      	cbz	r1, 800a61e <__ieee754_sqrtf+0x86>
 800a5b0:	2a00      	cmp	r2, #0
 800a5b2:	da04      	bge.n	800a5be <__ieee754_sqrtf+0x26>
 800a5b4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800a5b8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800a5bc:	bd70      	pop	{r4, r5, r6, pc}
 800a5be:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 800a5c2:	ea4f 53e2 	mov.w	r3, r2, asr #23
 800a5c6:	d204      	bcs.n	800a5d2 <__ieee754_sqrtf+0x3a>
 800a5c8:	2100      	movs	r1, #0
 800a5ca:	0210      	lsls	r0, r2, #8
 800a5cc:	d528      	bpl.n	800a620 <__ieee754_sqrtf+0x88>
 800a5ce:	3901      	subs	r1, #1
 800a5d0:	1a5b      	subs	r3, r3, r1
 800a5d2:	3b7f      	subs	r3, #127	; 0x7f
 800a5d4:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800a5d8:	07d9      	lsls	r1, r3, #31
 800a5da:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 800a5de:	bf48      	it	mi
 800a5e0:	0052      	lslmi	r2, r2, #1
 800a5e2:	1059      	asrs	r1, r3, #1
 800a5e4:	2300      	movs	r3, #0
 800a5e6:	0052      	lsls	r2, r2, #1
 800a5e8:	2419      	movs	r4, #25
 800a5ea:	461e      	mov	r6, r3
 800a5ec:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 800a5f0:	1835      	adds	r5, r6, r0
 800a5f2:	4295      	cmp	r5, r2
 800a5f4:	bfde      	ittt	le
 800a5f6:	182e      	addle	r6, r5, r0
 800a5f8:	1b52      	suble	r2, r2, r5
 800a5fa:	181b      	addle	r3, r3, r0
 800a5fc:	3c01      	subs	r4, #1
 800a5fe:	ea4f 0242 	mov.w	r2, r2, lsl #1
 800a602:	ea4f 0050 	mov.w	r0, r0, lsr #1
 800a606:	d1f3      	bne.n	800a5f0 <__ieee754_sqrtf+0x58>
 800a608:	b112      	cbz	r2, 800a610 <__ieee754_sqrtf+0x78>
 800a60a:	3301      	adds	r3, #1
 800a60c:	f023 0301 	bic.w	r3, r3, #1
 800a610:	105b      	asrs	r3, r3, #1
 800a612:	f103 537c 	add.w	r3, r3, #1056964608	; 0x3f000000
 800a616:	eb03 53c1 	add.w	r3, r3, r1, lsl #23
 800a61a:	ee00 3a10 	vmov	s0, r3
 800a61e:	bd70      	pop	{r4, r5, r6, pc}
 800a620:	0052      	lsls	r2, r2, #1
 800a622:	3101      	adds	r1, #1
 800a624:	e7d1      	b.n	800a5ca <__ieee754_sqrtf+0x32>

0800a626 <matherr>:
 800a626:	2000      	movs	r0, #0
 800a628:	4770      	bx	lr
	...

0800a62c <rint>:
 800a62c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a62e:	ec51 0b10 	vmov	r0, r1, d0
 800a632:	f3c1 540a 	ubfx	r4, r1, #20, #11
 800a636:	f2a4 36ff 	subw	r6, r4, #1023	; 0x3ff
 800a63a:	2e13      	cmp	r6, #19
 800a63c:	ee10 7a10 	vmov	r7, s0
 800a640:	460b      	mov	r3, r1
 800a642:	4602      	mov	r2, r0
 800a644:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a648:	dc58      	bgt.n	800a6fc <rint+0xd0>
 800a64a:	2e00      	cmp	r6, #0
 800a64c:	da2b      	bge.n	800a6a6 <rint+0x7a>
 800a64e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a652:	4302      	orrs	r2, r0
 800a654:	d023      	beq.n	800a69e <rint+0x72>
 800a656:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a65a:	4302      	orrs	r2, r0
 800a65c:	4251      	negs	r1, r2
 800a65e:	4311      	orrs	r1, r2
 800a660:	0b09      	lsrs	r1, r1, #12
 800a662:	0c5b      	lsrs	r3, r3, #17
 800a664:	f401 2100 	and.w	r1, r1, #524288	; 0x80000
 800a668:	045b      	lsls	r3, r3, #17
 800a66a:	ea41 0703 	orr.w	r7, r1, r3
 800a66e:	4b31      	ldr	r3, [pc, #196]	; (800a734 <rint+0x108>)
 800a670:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a674:	4639      	mov	r1, r7
 800a676:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a67a:	ee10 0a10 	vmov	r0, s0
 800a67e:	4632      	mov	r2, r6
 800a680:	463b      	mov	r3, r7
 800a682:	f7f8 f89b 	bl	80027bc <__adddf3>
 800a686:	e9cd 0100 	strd	r0, r1, [sp]
 800a68a:	463b      	mov	r3, r7
 800a68c:	4632      	mov	r2, r6
 800a68e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a692:	f7f8 f891 	bl	80027b8 <__aeabi_dsub>
 800a696:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a69a:	ea43 71c5 	orr.w	r1, r3, r5, lsl #31
 800a69e:	ec41 0b10 	vmov	d0, r0, r1
 800a6a2:	b003      	add	sp, #12
 800a6a4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a6a6:	4c24      	ldr	r4, [pc, #144]	; (800a738 <rint+0x10c>)
 800a6a8:	4134      	asrs	r4, r6
 800a6aa:	ea01 0704 	and.w	r7, r1, r4
 800a6ae:	4307      	orrs	r7, r0
 800a6b0:	d0f5      	beq.n	800a69e <rint+0x72>
 800a6b2:	0861      	lsrs	r1, r4, #1
 800a6b4:	ea03 0001 	and.w	r0, r3, r1
 800a6b8:	4302      	orrs	r2, r0
 800a6ba:	d00b      	beq.n	800a6d4 <rint+0xa8>
 800a6bc:	ea23 0101 	bic.w	r1, r3, r1
 800a6c0:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a6c4:	2e13      	cmp	r6, #19
 800a6c6:	fa43 f306 	asr.w	r3, r3, r6
 800a6ca:	bf0c      	ite	eq
 800a6cc:	f04f 4200 	moveq.w	r2, #2147483648	; 0x80000000
 800a6d0:	2200      	movne	r2, #0
 800a6d2:	430b      	orrs	r3, r1
 800a6d4:	4619      	mov	r1, r3
 800a6d6:	4b17      	ldr	r3, [pc, #92]	; (800a734 <rint+0x108>)
 800a6d8:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800a6dc:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a6e0:	4610      	mov	r0, r2
 800a6e2:	462b      	mov	r3, r5
 800a6e4:	4622      	mov	r2, r4
 800a6e6:	f7f8 f869 	bl	80027bc <__adddf3>
 800a6ea:	e9cd 0100 	strd	r0, r1, [sp]
 800a6ee:	4622      	mov	r2, r4
 800a6f0:	462b      	mov	r3, r5
 800a6f2:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a6f6:	f7f8 f85f 	bl	80027b8 <__aeabi_dsub>
 800a6fa:	e7d0      	b.n	800a69e <rint+0x72>
 800a6fc:	2e33      	cmp	r6, #51	; 0x33
 800a6fe:	dd08      	ble.n	800a712 <rint+0xe6>
 800a700:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a704:	d1cb      	bne.n	800a69e <rint+0x72>
 800a706:	ee10 2a10 	vmov	r2, s0
 800a70a:	460b      	mov	r3, r1
 800a70c:	f7f8 f856 	bl	80027bc <__adddf3>
 800a710:	e7c5      	b.n	800a69e <rint+0x72>
 800a712:	f2a4 4613 	subw	r6, r4, #1043	; 0x413
 800a716:	f04f 34ff 	mov.w	r4, #4294967295
 800a71a:	40f4      	lsrs	r4, r6
 800a71c:	4220      	tst	r0, r4
 800a71e:	d0be      	beq.n	800a69e <rint+0x72>
 800a720:	0861      	lsrs	r1, r4, #1
 800a722:	420f      	tst	r7, r1
 800a724:	bf1f      	itttt	ne
 800a726:	f04f 4280 	movne.w	r2, #1073741824	; 0x40000000
 800a72a:	ea27 0101 	bicne.w	r1, r7, r1
 800a72e:	4132      	asrne	r2, r6
 800a730:	430a      	orrne	r2, r1
 800a732:	e7cf      	b.n	800a6d4 <rint+0xa8>
 800a734:	08141860 	.word	0x08141860
 800a738:	000fffff 	.word	0x000fffff

0800a73c <expm1f>:
 800a73c:	ee10 2a10 	vmov	r2, s0
 800a740:	4985      	ldr	r1, [pc, #532]	; (800a958 <expm1f+0x21c>)
 800a742:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800a746:	428b      	cmp	r3, r1
 800a748:	d924      	bls.n	800a794 <expm1f+0x58>
 800a74a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a74e:	d902      	bls.n	800a756 <expm1f+0x1a>
 800a750:	ee30 0a00 	vadd.f32	s0, s0, s0
 800a754:	4770      	bx	lr
 800a756:	d106      	bne.n	800a766 <expm1f+0x2a>
 800a758:	2a00      	cmp	r2, #0
 800a75a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800a75e:	bfb8      	it	lt
 800a760:	eeb0 0a67 	vmovlt.f32	s0, s15
 800a764:	4770      	bx	lr
 800a766:	2a00      	cmp	r2, #0
 800a768:	db07      	blt.n	800a77a <expm1f+0x3e>
 800a76a:	497c      	ldr	r1, [pc, #496]	; (800a95c <expm1f+0x220>)
 800a76c:	428b      	cmp	r3, r1
 800a76e:	d963      	bls.n	800a838 <expm1f+0xfc>
 800a770:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800a960 <expm1f+0x224>
 800a774:	ee20 0a00 	vmul.f32	s0, s0, s0
 800a778:	4770      	bx	lr
 800a77a:	eddf 7a7a 	vldr	s15, [pc, #488]	; 800a964 <expm1f+0x228>
 800a77e:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a782:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800a786:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a78a:	f140 80dd 	bpl.w	800a948 <expm1f+0x20c>
 800a78e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800a792:	4770      	bx	lr
 800a794:	4974      	ldr	r1, [pc, #464]	; (800a968 <expm1f+0x22c>)
 800a796:	428b      	cmp	r3, r1
 800a798:	d96d      	bls.n	800a876 <expm1f+0x13a>
 800a79a:	4974      	ldr	r1, [pc, #464]	; (800a96c <expm1f+0x230>)
 800a79c:	428b      	cmp	r3, r1
 800a79e:	d84b      	bhi.n	800a838 <expm1f+0xfc>
 800a7a0:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800a970 <expm1f+0x234>
 800a7a4:	2a00      	cmp	r2, #0
 800a7a6:	bfa7      	ittee	ge
 800a7a8:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800a7ac:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800a974 <expm1f+0x238>
 800a7b0:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800a978 <expm1f+0x23c>
 800a7b4:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800a7b8:	bfac      	ite	ge
 800a7ba:	2301      	movge	r3, #1
 800a7bc:	f04f 33ff 	movlt.w	r3, #4294967295
 800a7c0:	ee37 0a67 	vsub.f32	s0, s14, s15
 800a7c4:	ee37 7a40 	vsub.f32	s14, s14, s0
 800a7c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 800a7cc:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800a7d0:	ee20 5a25 	vmul.f32	s10, s0, s11
 800a7d4:	eddf 6a69 	vldr	s13, [pc, #420]	; 800a97c <expm1f+0x240>
 800a7d8:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800a980 <expm1f+0x244>
 800a7dc:	ee20 7a05 	vmul.f32	s14, s0, s10
 800a7e0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a7e4:	eddf 6a67 	vldr	s13, [pc, #412]	; 800a984 <expm1f+0x248>
 800a7e8:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a7ec:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800a988 <expm1f+0x24c>
 800a7f0:	eea7 6a26 	vfma.f32	s12, s14, s13
 800a7f4:	eddf 6a65 	vldr	s13, [pc, #404]	; 800a98c <expm1f+0x250>
 800a7f8:	eee7 6a06 	vfma.f32	s13, s14, s12
 800a7fc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800a800:	eef0 4a46 	vmov.f32	s9, s12
 800a804:	eee7 4a26 	vfma.f32	s9, s14, s13
 800a808:	eef0 6a64 	vmov.f32	s13, s9
 800a80c:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800a810:	eee5 4a66 	vfms.f32	s9, s10, s13
 800a814:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800a818:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800a81c:	eee0 6a64 	vfms.f32	s13, s0, s9
 800a820:	eef0 4a66 	vmov.f32	s9, s13
 800a824:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800a828:	ee66 6a87 	vmul.f32	s13, s13, s14
 800a82c:	bb8b      	cbnz	r3, 800a892 <expm1f+0x156>
 800a82e:	eef0 7a47 	vmov.f32	s15, s14
 800a832:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800a836:	e027      	b.n	800a888 <expm1f+0x14c>
 800a838:	eddf 7a55 	vldr	s15, [pc, #340]	; 800a990 <expm1f+0x254>
 800a83c:	2a00      	cmp	r2, #0
 800a83e:	ee20 7a27 	vmul.f32	s14, s0, s15
 800a842:	eefe 6a00 	vmov.f32	s13, #224	; 0xbf000000 -0.5
 800a846:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800a84a:	bfb8      	it	lt
 800a84c:	eef0 7a66 	vmovlt.f32	s15, s13
 800a850:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a854:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800a970 <expm1f+0x234>
 800a858:	eddf 6a46 	vldr	s13, [pc, #280]	; 800a974 <expm1f+0x238>
 800a85c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800a860:	ee17 3a90 	vmov	r3, s15
 800a864:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a868:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800a86c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800a870:	eeb0 7a40 	vmov.f32	s14, s0
 800a874:	e7a4      	b.n	800a7c0 <expm1f+0x84>
 800a876:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800a87a:	d208      	bcs.n	800a88e <expm1f+0x152>
 800a87c:	eddf 7a38 	vldr	s15, [pc, #224]	; 800a960 <expm1f+0x224>
 800a880:	ee70 7a27 	vadd.f32	s15, s0, s15
 800a884:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800a888:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a88c:	4770      	bx	lr
 800a88e:	2300      	movs	r3, #0
 800a890:	e79c      	b.n	800a7cc <expm1f+0x90>
 800a892:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800a896:	1c5a      	adds	r2, r3, #1
 800a898:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800a89c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800a8a0:	d106      	bne.n	800a8b0 <expm1f+0x174>
 800a8a2:	ee70 7a67 	vsub.f32	s15, s0, s15
 800a8a6:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800a8aa:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800a8ae:	4770      	bx	lr
 800a8b0:	2b01      	cmp	r3, #1
 800a8b2:	d118      	bne.n	800a8e6 <expm1f+0x1aa>
 800a8b4:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800a8b8:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800a8bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800a8c0:	bf41      	itttt	mi
 800a8c2:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800a8c6:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800a8ca:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800a8ce:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800a8d2:	bf5f      	itttt	pl
 800a8d4:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800a8d8:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800a8dc:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800a8e0:	eeb0 0a46 	vmovpl.f32	s0, s12
 800a8e4:	4770      	bx	lr
 800a8e6:	1c5a      	adds	r2, r3, #1
 800a8e8:	2a39      	cmp	r2, #57	; 0x39
 800a8ea:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800a8ee:	d90b      	bls.n	800a908 <expm1f+0x1cc>
 800a8f0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a8f4:	ee36 0a40 	vsub.f32	s0, s12, s0
 800a8f8:	ee10 3a10 	vmov	r3, s0
 800a8fc:	440b      	add	r3, r1
 800a8fe:	ee00 3a10 	vmov	s0, r3
 800a902:	ee30 0a46 	vsub.f32	s0, s0, s12
 800a906:	4770      	bx	lr
 800a908:	2b16      	cmp	r3, #22
 800a90a:	dc11      	bgt.n	800a930 <expm1f+0x1f4>
 800a90c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800a910:	fa42 f303 	asr.w	r3, r2, r3
 800a914:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800a918:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a91c:	ee07 3a90 	vmov	s15, r3
 800a920:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800a924:	ee10 3a10 	vmov	r3, s0
 800a928:	440b      	add	r3, r1
 800a92a:	ee00 3a10 	vmov	s0, r3
 800a92e:	4770      	bx	lr
 800a930:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800a934:	05db      	lsls	r3, r3, #23
 800a936:	ee07 3a10 	vmov	s14, r3
 800a93a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800a93e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800a942:	ee30 0a06 	vadd.f32	s0, s0, s12
 800a946:	e7ed      	b.n	800a924 <expm1f+0x1e8>
 800a948:	eddf 7a11 	vldr	s15, [pc, #68]	; 800a990 <expm1f+0x254>
 800a94c:	ee20 7a27 	vmul.f32	s14, s0, s15
 800a950:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800a954:	e77c      	b.n	800a850 <expm1f+0x114>
 800a956:	bf00      	nop
 800a958:	4195b843 	.word	0x4195b843
 800a95c:	42b17217 	.word	0x42b17217
 800a960:	7149f2ca 	.word	0x7149f2ca
 800a964:	0da24260 	.word	0x0da24260
 800a968:	3eb17218 	.word	0x3eb17218
 800a96c:	3f851591 	.word	0x3f851591
 800a970:	3f317180 	.word	0x3f317180
 800a974:	3717f7d1 	.word	0x3717f7d1
 800a978:	b717f7d1 	.word	0xb717f7d1
 800a97c:	b457edbb 	.word	0xb457edbb
 800a980:	36867e54 	.word	0x36867e54
 800a984:	b8a670cd 	.word	0xb8a670cd
 800a988:	3ad00d01 	.word	0x3ad00d01
 800a98c:	bd088889 	.word	0xbd088889
 800a990:	3fb8aa3b 	.word	0x3fb8aa3b

0800a994 <fabsf>:
 800a994:	ee10 3a10 	vmov	r3, s0
 800a998:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800a99c:	ee00 3a10 	vmov	s0, r3
 800a9a0:	4770      	bx	lr

0800a9a2 <finitef>:
 800a9a2:	ee10 3a10 	vmov	r3, s0
 800a9a6:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800a9aa:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800a9ae:	bfac      	ite	ge
 800a9b0:	2000      	movge	r0, #0
 800a9b2:	2001      	movlt	r0, #1
 800a9b4:	4770      	bx	lr
	...

0800a9b8 <nanf>:
 800a9b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800a9c0 <nanf+0x8>
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	7fc00000 	.word	0x7fc00000

0800a9c4 <scalbnf>:
 800a9c4:	b508      	push	{r3, lr}
 800a9c6:	ee10 2a10 	vmov	r2, s0
 800a9ca:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800a9ce:	ed2d 8b02 	vpush	{d8}
 800a9d2:	eef0 0a40 	vmov.f32	s1, s0
 800a9d6:	d004      	beq.n	800a9e2 <scalbnf+0x1e>
 800a9d8:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800a9dc:	d306      	bcc.n	800a9ec <scalbnf+0x28>
 800a9de:	ee70 0a00 	vadd.f32	s1, s0, s0
 800a9e2:	ecbd 8b02 	vpop	{d8}
 800a9e6:	eeb0 0a60 	vmov.f32	s0, s1
 800a9ea:	bd08      	pop	{r3, pc}
 800a9ec:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800a9f0:	d21c      	bcs.n	800aa2c <scalbnf+0x68>
 800a9f2:	4b1f      	ldr	r3, [pc, #124]	; (800aa70 <scalbnf+0xac>)
 800a9f4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800aa74 <scalbnf+0xb0>
 800a9f8:	4298      	cmp	r0, r3
 800a9fa:	ee60 0a27 	vmul.f32	s1, s0, s15
 800a9fe:	db10      	blt.n	800aa22 <scalbnf+0x5e>
 800aa00:	ee10 2a90 	vmov	r2, s1
 800aa04:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800aa08:	3b19      	subs	r3, #25
 800aa0a:	4403      	add	r3, r0
 800aa0c:	2bfe      	cmp	r3, #254	; 0xfe
 800aa0e:	dd0f      	ble.n	800aa30 <scalbnf+0x6c>
 800aa10:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800aa78 <scalbnf+0xb4>
 800aa14:	eeb0 0a48 	vmov.f32	s0, s16
 800aa18:	f000 f834 	bl	800aa84 <copysignf>
 800aa1c:	ee60 0a08 	vmul.f32	s1, s0, s16
 800aa20:	e7df      	b.n	800a9e2 <scalbnf+0x1e>
 800aa22:	eddf 7a16 	vldr	s15, [pc, #88]	; 800aa7c <scalbnf+0xb8>
 800aa26:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800aa2a:	e7da      	b.n	800a9e2 <scalbnf+0x1e>
 800aa2c:	0ddb      	lsrs	r3, r3, #23
 800aa2e:	e7ec      	b.n	800aa0a <scalbnf+0x46>
 800aa30:	2b00      	cmp	r3, #0
 800aa32:	dd06      	ble.n	800aa42 <scalbnf+0x7e>
 800aa34:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aa38:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800aa3c:	ee00 3a90 	vmov	s1, r3
 800aa40:	e7cf      	b.n	800a9e2 <scalbnf+0x1e>
 800aa42:	f113 0f16 	cmn.w	r3, #22
 800aa46:	da06      	bge.n	800aa56 <scalbnf+0x92>
 800aa48:	f24c 3350 	movw	r3, #50000	; 0xc350
 800aa4c:	4298      	cmp	r0, r3
 800aa4e:	dcdf      	bgt.n	800aa10 <scalbnf+0x4c>
 800aa50:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800aa7c <scalbnf+0xb8>
 800aa54:	e7de      	b.n	800aa14 <scalbnf+0x50>
 800aa56:	3319      	adds	r3, #25
 800aa58:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800aa5c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800aa60:	eddf 7a07 	vldr	s15, [pc, #28]	; 800aa80 <scalbnf+0xbc>
 800aa64:	ee07 3a10 	vmov	s14, r3
 800aa68:	ee67 0a27 	vmul.f32	s1, s14, s15
 800aa6c:	e7b9      	b.n	800a9e2 <scalbnf+0x1e>
 800aa6e:	bf00      	nop
 800aa70:	ffff3cb0 	.word	0xffff3cb0
 800aa74:	4c000000 	.word	0x4c000000
 800aa78:	7149f2ca 	.word	0x7149f2ca
 800aa7c:	0da24260 	.word	0x0da24260
 800aa80:	33000000 	.word	0x33000000

0800aa84 <copysignf>:
 800aa84:	ee10 3a10 	vmov	r3, s0
 800aa88:	ee10 2a90 	vmov	r2, s1
 800aa8c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800aa90:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800aa94:	4313      	orrs	r3, r2
 800aa96:	ee00 3a10 	vmov	s0, r3
 800aa9a:	4770      	bx	lr

0800aa9c <_init>:
 800aa9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa9e:	bf00      	nop
 800aaa0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaa2:	bc08      	pop	{r3}
 800aaa4:	469e      	mov	lr, r3
 800aaa6:	4770      	bx	lr

0800aaa8 <_fini>:
 800aaa8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aaaa:	bf00      	nop
 800aaac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800aaae:	bc08      	pop	{r3}
 800aab0:	469e      	mov	lr, r3
 800aab2:	4770      	bx	lr
